
Wireless Data Acquisition F030 Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000745c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800751c  0800751c  0000851c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075dc  080075dc  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080075dc  080075dc  00009060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080075dc  080075dc  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075dc  080075dc  000085dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075e0  080075e0  000085e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080075e4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000060  08007644  00009060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  08007644  00009428  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001310f  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff9  00000000  00000000  0001c197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  0001e190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f16  00000000  00000000  0001f408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001407f  00000000  00000000  0002031e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170e7  00000000  00000000  0003439d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b6f9  00000000  00000000  0004b484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6b7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc8  00000000  00000000  000b6bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000bb988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007504 	.word	0x08007504

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08007504 	.word	0x08007504

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_ddiv>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	46de      	mov	lr, fp
 8000238:	4645      	mov	r5, r8
 800023a:	4657      	mov	r7, sl
 800023c:	464e      	mov	r6, r9
 800023e:	b5e0      	push	{r5, r6, r7, lr}
 8000240:	b087      	sub	sp, #28
 8000242:	9200      	str	r2, [sp, #0]
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	030b      	lsls	r3, r1, #12
 8000248:	0b1b      	lsrs	r3, r3, #12
 800024a:	469b      	mov	fp, r3
 800024c:	0fca      	lsrs	r2, r1, #31
 800024e:	004b      	lsls	r3, r1, #1
 8000250:	0004      	movs	r4, r0
 8000252:	4680      	mov	r8, r0
 8000254:	0d5b      	lsrs	r3, r3, #21
 8000256:	9202      	str	r2, [sp, #8]
 8000258:	d100      	bne.n	800025c <__aeabi_ddiv+0x28>
 800025a:	e098      	b.n	800038e <__aeabi_ddiv+0x15a>
 800025c:	4a7c      	ldr	r2, [pc, #496]	@ (8000450 <__aeabi_ddiv+0x21c>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d037      	beq.n	80002d2 <__aeabi_ddiv+0x9e>
 8000262:	4659      	mov	r1, fp
 8000264:	0f42      	lsrs	r2, r0, #29
 8000266:	00c9      	lsls	r1, r1, #3
 8000268:	430a      	orrs	r2, r1
 800026a:	2180      	movs	r1, #128	@ 0x80
 800026c:	0409      	lsls	r1, r1, #16
 800026e:	4311      	orrs	r1, r2
 8000270:	00c2      	lsls	r2, r0, #3
 8000272:	4690      	mov	r8, r2
 8000274:	4a77      	ldr	r2, [pc, #476]	@ (8000454 <__aeabi_ddiv+0x220>)
 8000276:	4689      	mov	r9, r1
 8000278:	4692      	mov	sl, r2
 800027a:	449a      	add	sl, r3
 800027c:	2300      	movs	r3, #0
 800027e:	2400      	movs	r4, #0
 8000280:	9303      	str	r3, [sp, #12]
 8000282:	9e00      	ldr	r6, [sp, #0]
 8000284:	9f01      	ldr	r7, [sp, #4]
 8000286:	033b      	lsls	r3, r7, #12
 8000288:	0b1b      	lsrs	r3, r3, #12
 800028a:	469b      	mov	fp, r3
 800028c:	007b      	lsls	r3, r7, #1
 800028e:	0030      	movs	r0, r6
 8000290:	0d5b      	lsrs	r3, r3, #21
 8000292:	0ffd      	lsrs	r5, r7, #31
 8000294:	2b00      	cmp	r3, #0
 8000296:	d059      	beq.n	800034c <__aeabi_ddiv+0x118>
 8000298:	4a6d      	ldr	r2, [pc, #436]	@ (8000450 <__aeabi_ddiv+0x21c>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d048      	beq.n	8000330 <__aeabi_ddiv+0xfc>
 800029e:	4659      	mov	r1, fp
 80002a0:	0f72      	lsrs	r2, r6, #29
 80002a2:	00c9      	lsls	r1, r1, #3
 80002a4:	430a      	orrs	r2, r1
 80002a6:	2180      	movs	r1, #128	@ 0x80
 80002a8:	0409      	lsls	r1, r1, #16
 80002aa:	4311      	orrs	r1, r2
 80002ac:	468b      	mov	fp, r1
 80002ae:	4969      	ldr	r1, [pc, #420]	@ (8000454 <__aeabi_ddiv+0x220>)
 80002b0:	00f2      	lsls	r2, r6, #3
 80002b2:	468c      	mov	ip, r1
 80002b4:	4651      	mov	r1, sl
 80002b6:	4463      	add	r3, ip
 80002b8:	1acb      	subs	r3, r1, r3
 80002ba:	469a      	mov	sl, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	9e02      	ldr	r6, [sp, #8]
 80002c0:	406e      	eors	r6, r5
 80002c2:	b2f6      	uxtb	r6, r6
 80002c4:	2c0f      	cmp	r4, #15
 80002c6:	d900      	bls.n	80002ca <__aeabi_ddiv+0x96>
 80002c8:	e0ce      	b.n	8000468 <__aeabi_ddiv+0x234>
 80002ca:	4b63      	ldr	r3, [pc, #396]	@ (8000458 <__aeabi_ddiv+0x224>)
 80002cc:	00a4      	lsls	r4, r4, #2
 80002ce:	591b      	ldr	r3, [r3, r4]
 80002d0:	469f      	mov	pc, r3
 80002d2:	465a      	mov	r2, fp
 80002d4:	4302      	orrs	r2, r0
 80002d6:	4691      	mov	r9, r2
 80002d8:	d000      	beq.n	80002dc <__aeabi_ddiv+0xa8>
 80002da:	e090      	b.n	80003fe <__aeabi_ddiv+0x1ca>
 80002dc:	469a      	mov	sl, r3
 80002de:	2302      	movs	r3, #2
 80002e0:	4690      	mov	r8, r2
 80002e2:	2408      	movs	r4, #8
 80002e4:	9303      	str	r3, [sp, #12]
 80002e6:	e7cc      	b.n	8000282 <__aeabi_ddiv+0x4e>
 80002e8:	46cb      	mov	fp, r9
 80002ea:	4642      	mov	r2, r8
 80002ec:	9d02      	ldr	r5, [sp, #8]
 80002ee:	9903      	ldr	r1, [sp, #12]
 80002f0:	2902      	cmp	r1, #2
 80002f2:	d100      	bne.n	80002f6 <__aeabi_ddiv+0xc2>
 80002f4:	e1de      	b.n	80006b4 <__aeabi_ddiv+0x480>
 80002f6:	2903      	cmp	r1, #3
 80002f8:	d100      	bne.n	80002fc <__aeabi_ddiv+0xc8>
 80002fa:	e08d      	b.n	8000418 <__aeabi_ddiv+0x1e4>
 80002fc:	2901      	cmp	r1, #1
 80002fe:	d000      	beq.n	8000302 <__aeabi_ddiv+0xce>
 8000300:	e179      	b.n	80005f6 <__aeabi_ddiv+0x3c2>
 8000302:	002e      	movs	r6, r5
 8000304:	2200      	movs	r2, #0
 8000306:	2300      	movs	r3, #0
 8000308:	2400      	movs	r4, #0
 800030a:	4690      	mov	r8, r2
 800030c:	051b      	lsls	r3, r3, #20
 800030e:	4323      	orrs	r3, r4
 8000310:	07f6      	lsls	r6, r6, #31
 8000312:	4333      	orrs	r3, r6
 8000314:	4640      	mov	r0, r8
 8000316:	0019      	movs	r1, r3
 8000318:	b007      	add	sp, #28
 800031a:	bcf0      	pop	{r4, r5, r6, r7}
 800031c:	46bb      	mov	fp, r7
 800031e:	46b2      	mov	sl, r6
 8000320:	46a9      	mov	r9, r5
 8000322:	46a0      	mov	r8, r4
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	2200      	movs	r2, #0
 8000328:	2400      	movs	r4, #0
 800032a:	4690      	mov	r8, r2
 800032c:	4b48      	ldr	r3, [pc, #288]	@ (8000450 <__aeabi_ddiv+0x21c>)
 800032e:	e7ed      	b.n	800030c <__aeabi_ddiv+0xd8>
 8000330:	465a      	mov	r2, fp
 8000332:	9b00      	ldr	r3, [sp, #0]
 8000334:	431a      	orrs	r2, r3
 8000336:	4b49      	ldr	r3, [pc, #292]	@ (800045c <__aeabi_ddiv+0x228>)
 8000338:	469c      	mov	ip, r3
 800033a:	44e2      	add	sl, ip
 800033c:	2a00      	cmp	r2, #0
 800033e:	d159      	bne.n	80003f4 <__aeabi_ddiv+0x1c0>
 8000340:	2302      	movs	r3, #2
 8000342:	431c      	orrs	r4, r3
 8000344:	2300      	movs	r3, #0
 8000346:	2102      	movs	r1, #2
 8000348:	469b      	mov	fp, r3
 800034a:	e7b8      	b.n	80002be <__aeabi_ddiv+0x8a>
 800034c:	465a      	mov	r2, fp
 800034e:	9b00      	ldr	r3, [sp, #0]
 8000350:	431a      	orrs	r2, r3
 8000352:	d049      	beq.n	80003e8 <__aeabi_ddiv+0x1b4>
 8000354:	465b      	mov	r3, fp
 8000356:	2b00      	cmp	r3, #0
 8000358:	d100      	bne.n	800035c <__aeabi_ddiv+0x128>
 800035a:	e19c      	b.n	8000696 <__aeabi_ddiv+0x462>
 800035c:	4658      	mov	r0, fp
 800035e:	f000 faeb 	bl	8000938 <__clzsi2>
 8000362:	0002      	movs	r2, r0
 8000364:	0003      	movs	r3, r0
 8000366:	3a0b      	subs	r2, #11
 8000368:	271d      	movs	r7, #29
 800036a:	9e00      	ldr	r6, [sp, #0]
 800036c:	1aba      	subs	r2, r7, r2
 800036e:	0019      	movs	r1, r3
 8000370:	4658      	mov	r0, fp
 8000372:	40d6      	lsrs	r6, r2
 8000374:	3908      	subs	r1, #8
 8000376:	4088      	lsls	r0, r1
 8000378:	0032      	movs	r2, r6
 800037a:	4302      	orrs	r2, r0
 800037c:	4693      	mov	fp, r2
 800037e:	9a00      	ldr	r2, [sp, #0]
 8000380:	408a      	lsls	r2, r1
 8000382:	4937      	ldr	r1, [pc, #220]	@ (8000460 <__aeabi_ddiv+0x22c>)
 8000384:	4453      	add	r3, sl
 8000386:	468a      	mov	sl, r1
 8000388:	2100      	movs	r1, #0
 800038a:	449a      	add	sl, r3
 800038c:	e797      	b.n	80002be <__aeabi_ddiv+0x8a>
 800038e:	465b      	mov	r3, fp
 8000390:	4303      	orrs	r3, r0
 8000392:	4699      	mov	r9, r3
 8000394:	d021      	beq.n	80003da <__aeabi_ddiv+0x1a6>
 8000396:	465b      	mov	r3, fp
 8000398:	2b00      	cmp	r3, #0
 800039a:	d100      	bne.n	800039e <__aeabi_ddiv+0x16a>
 800039c:	e169      	b.n	8000672 <__aeabi_ddiv+0x43e>
 800039e:	4658      	mov	r0, fp
 80003a0:	f000 faca 	bl	8000938 <__clzsi2>
 80003a4:	230b      	movs	r3, #11
 80003a6:	425b      	negs	r3, r3
 80003a8:	469c      	mov	ip, r3
 80003aa:	0002      	movs	r2, r0
 80003ac:	4484      	add	ip, r0
 80003ae:	4666      	mov	r6, ip
 80003b0:	231d      	movs	r3, #29
 80003b2:	1b9b      	subs	r3, r3, r6
 80003b4:	0026      	movs	r6, r4
 80003b6:	0011      	movs	r1, r2
 80003b8:	4658      	mov	r0, fp
 80003ba:	40de      	lsrs	r6, r3
 80003bc:	3908      	subs	r1, #8
 80003be:	4088      	lsls	r0, r1
 80003c0:	0033      	movs	r3, r6
 80003c2:	4303      	orrs	r3, r0
 80003c4:	4699      	mov	r9, r3
 80003c6:	0023      	movs	r3, r4
 80003c8:	408b      	lsls	r3, r1
 80003ca:	4698      	mov	r8, r3
 80003cc:	4b25      	ldr	r3, [pc, #148]	@ (8000464 <__aeabi_ddiv+0x230>)
 80003ce:	2400      	movs	r4, #0
 80003d0:	1a9b      	subs	r3, r3, r2
 80003d2:	469a      	mov	sl, r3
 80003d4:	2300      	movs	r3, #0
 80003d6:	9303      	str	r3, [sp, #12]
 80003d8:	e753      	b.n	8000282 <__aeabi_ddiv+0x4e>
 80003da:	2300      	movs	r3, #0
 80003dc:	4698      	mov	r8, r3
 80003de:	469a      	mov	sl, r3
 80003e0:	3301      	adds	r3, #1
 80003e2:	2404      	movs	r4, #4
 80003e4:	9303      	str	r3, [sp, #12]
 80003e6:	e74c      	b.n	8000282 <__aeabi_ddiv+0x4e>
 80003e8:	2301      	movs	r3, #1
 80003ea:	431c      	orrs	r4, r3
 80003ec:	2300      	movs	r3, #0
 80003ee:	2101      	movs	r1, #1
 80003f0:	469b      	mov	fp, r3
 80003f2:	e764      	b.n	80002be <__aeabi_ddiv+0x8a>
 80003f4:	2303      	movs	r3, #3
 80003f6:	0032      	movs	r2, r6
 80003f8:	2103      	movs	r1, #3
 80003fa:	431c      	orrs	r4, r3
 80003fc:	e75f      	b.n	80002be <__aeabi_ddiv+0x8a>
 80003fe:	469a      	mov	sl, r3
 8000400:	2303      	movs	r3, #3
 8000402:	46d9      	mov	r9, fp
 8000404:	240c      	movs	r4, #12
 8000406:	9303      	str	r3, [sp, #12]
 8000408:	e73b      	b.n	8000282 <__aeabi_ddiv+0x4e>
 800040a:	2300      	movs	r3, #0
 800040c:	2480      	movs	r4, #128	@ 0x80
 800040e:	4698      	mov	r8, r3
 8000410:	2600      	movs	r6, #0
 8000412:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <__aeabi_ddiv+0x21c>)
 8000414:	0324      	lsls	r4, r4, #12
 8000416:	e779      	b.n	800030c <__aeabi_ddiv+0xd8>
 8000418:	2480      	movs	r4, #128	@ 0x80
 800041a:	465b      	mov	r3, fp
 800041c:	0324      	lsls	r4, r4, #12
 800041e:	431c      	orrs	r4, r3
 8000420:	0324      	lsls	r4, r4, #12
 8000422:	002e      	movs	r6, r5
 8000424:	4690      	mov	r8, r2
 8000426:	4b0a      	ldr	r3, [pc, #40]	@ (8000450 <__aeabi_ddiv+0x21c>)
 8000428:	0b24      	lsrs	r4, r4, #12
 800042a:	e76f      	b.n	800030c <__aeabi_ddiv+0xd8>
 800042c:	2480      	movs	r4, #128	@ 0x80
 800042e:	464b      	mov	r3, r9
 8000430:	0324      	lsls	r4, r4, #12
 8000432:	4223      	tst	r3, r4
 8000434:	d002      	beq.n	800043c <__aeabi_ddiv+0x208>
 8000436:	465b      	mov	r3, fp
 8000438:	4223      	tst	r3, r4
 800043a:	d0f0      	beq.n	800041e <__aeabi_ddiv+0x1ea>
 800043c:	2480      	movs	r4, #128	@ 0x80
 800043e:	464b      	mov	r3, r9
 8000440:	0324      	lsls	r4, r4, #12
 8000442:	431c      	orrs	r4, r3
 8000444:	0324      	lsls	r4, r4, #12
 8000446:	9e02      	ldr	r6, [sp, #8]
 8000448:	4b01      	ldr	r3, [pc, #4]	@ (8000450 <__aeabi_ddiv+0x21c>)
 800044a:	0b24      	lsrs	r4, r4, #12
 800044c:	e75e      	b.n	800030c <__aeabi_ddiv+0xd8>
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	000007ff 	.word	0x000007ff
 8000454:	fffffc01 	.word	0xfffffc01
 8000458:	08007530 	.word	0x08007530
 800045c:	fffff801 	.word	0xfffff801
 8000460:	000003f3 	.word	0x000003f3
 8000464:	fffffc0d 	.word	0xfffffc0d
 8000468:	45cb      	cmp	fp, r9
 800046a:	d200      	bcs.n	800046e <__aeabi_ddiv+0x23a>
 800046c:	e0f8      	b.n	8000660 <__aeabi_ddiv+0x42c>
 800046e:	d100      	bne.n	8000472 <__aeabi_ddiv+0x23e>
 8000470:	e0f3      	b.n	800065a <__aeabi_ddiv+0x426>
 8000472:	2301      	movs	r3, #1
 8000474:	425b      	negs	r3, r3
 8000476:	469c      	mov	ip, r3
 8000478:	4644      	mov	r4, r8
 800047a:	4648      	mov	r0, r9
 800047c:	2500      	movs	r5, #0
 800047e:	44e2      	add	sl, ip
 8000480:	465b      	mov	r3, fp
 8000482:	0e17      	lsrs	r7, r2, #24
 8000484:	021b      	lsls	r3, r3, #8
 8000486:	431f      	orrs	r7, r3
 8000488:	0c19      	lsrs	r1, r3, #16
 800048a:	043b      	lsls	r3, r7, #16
 800048c:	0212      	lsls	r2, r2, #8
 800048e:	9700      	str	r7, [sp, #0]
 8000490:	0c1f      	lsrs	r7, r3, #16
 8000492:	4691      	mov	r9, r2
 8000494:	9102      	str	r1, [sp, #8]
 8000496:	9703      	str	r7, [sp, #12]
 8000498:	f7ff fec6 	bl	8000228 <__aeabi_uidivmod>
 800049c:	0002      	movs	r2, r0
 800049e:	437a      	muls	r2, r7
 80004a0:	040b      	lsls	r3, r1, #16
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	4680      	mov	r8, r0
 80004a6:	4319      	orrs	r1, r3
 80004a8:	428a      	cmp	r2, r1
 80004aa:	d909      	bls.n	80004c0 <__aeabi_ddiv+0x28c>
 80004ac:	9f00      	ldr	r7, [sp, #0]
 80004ae:	2301      	movs	r3, #1
 80004b0:	46bc      	mov	ip, r7
 80004b2:	425b      	negs	r3, r3
 80004b4:	4461      	add	r1, ip
 80004b6:	469c      	mov	ip, r3
 80004b8:	44e0      	add	r8, ip
 80004ba:	428f      	cmp	r7, r1
 80004bc:	d800      	bhi.n	80004c0 <__aeabi_ddiv+0x28c>
 80004be:	e15c      	b.n	800077a <__aeabi_ddiv+0x546>
 80004c0:	1a88      	subs	r0, r1, r2
 80004c2:	9902      	ldr	r1, [sp, #8]
 80004c4:	f7ff feb0 	bl	8000228 <__aeabi_uidivmod>
 80004c8:	9a03      	ldr	r2, [sp, #12]
 80004ca:	0424      	lsls	r4, r4, #16
 80004cc:	4342      	muls	r2, r0
 80004ce:	0409      	lsls	r1, r1, #16
 80004d0:	0c24      	lsrs	r4, r4, #16
 80004d2:	0003      	movs	r3, r0
 80004d4:	430c      	orrs	r4, r1
 80004d6:	42a2      	cmp	r2, r4
 80004d8:	d906      	bls.n	80004e8 <__aeabi_ddiv+0x2b4>
 80004da:	9900      	ldr	r1, [sp, #0]
 80004dc:	3b01      	subs	r3, #1
 80004de:	468c      	mov	ip, r1
 80004e0:	4464      	add	r4, ip
 80004e2:	42a1      	cmp	r1, r4
 80004e4:	d800      	bhi.n	80004e8 <__aeabi_ddiv+0x2b4>
 80004e6:	e142      	b.n	800076e <__aeabi_ddiv+0x53a>
 80004e8:	1aa0      	subs	r0, r4, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	0412      	lsls	r2, r2, #16
 80004ee:	431a      	orrs	r2, r3
 80004f0:	4693      	mov	fp, r2
 80004f2:	464b      	mov	r3, r9
 80004f4:	4659      	mov	r1, fp
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001f      	movs	r7, r3
 80004fa:	9304      	str	r3, [sp, #16]
 80004fc:	040b      	lsls	r3, r1, #16
 80004fe:	4649      	mov	r1, r9
 8000500:	0409      	lsls	r1, r1, #16
 8000502:	0c09      	lsrs	r1, r1, #16
 8000504:	000c      	movs	r4, r1
 8000506:	0c1b      	lsrs	r3, r3, #16
 8000508:	435c      	muls	r4, r3
 800050a:	0c12      	lsrs	r2, r2, #16
 800050c:	437b      	muls	r3, r7
 800050e:	4688      	mov	r8, r1
 8000510:	4351      	muls	r1, r2
 8000512:	437a      	muls	r2, r7
 8000514:	0c27      	lsrs	r7, r4, #16
 8000516:	46bc      	mov	ip, r7
 8000518:	185b      	adds	r3, r3, r1
 800051a:	4463      	add	r3, ip
 800051c:	4299      	cmp	r1, r3
 800051e:	d903      	bls.n	8000528 <__aeabi_ddiv+0x2f4>
 8000520:	2180      	movs	r1, #128	@ 0x80
 8000522:	0249      	lsls	r1, r1, #9
 8000524:	468c      	mov	ip, r1
 8000526:	4462      	add	r2, ip
 8000528:	0c19      	lsrs	r1, r3, #16
 800052a:	0424      	lsls	r4, r4, #16
 800052c:	041b      	lsls	r3, r3, #16
 800052e:	0c24      	lsrs	r4, r4, #16
 8000530:	188a      	adds	r2, r1, r2
 8000532:	191c      	adds	r4, r3, r4
 8000534:	4290      	cmp	r0, r2
 8000536:	d302      	bcc.n	800053e <__aeabi_ddiv+0x30a>
 8000538:	d116      	bne.n	8000568 <__aeabi_ddiv+0x334>
 800053a:	42a5      	cmp	r5, r4
 800053c:	d214      	bcs.n	8000568 <__aeabi_ddiv+0x334>
 800053e:	465b      	mov	r3, fp
 8000540:	9f00      	ldr	r7, [sp, #0]
 8000542:	3b01      	subs	r3, #1
 8000544:	444d      	add	r5, r9
 8000546:	9305      	str	r3, [sp, #20]
 8000548:	454d      	cmp	r5, r9
 800054a:	419b      	sbcs	r3, r3
 800054c:	46bc      	mov	ip, r7
 800054e:	425b      	negs	r3, r3
 8000550:	4463      	add	r3, ip
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	4287      	cmp	r7, r0
 8000556:	d300      	bcc.n	800055a <__aeabi_ddiv+0x326>
 8000558:	e102      	b.n	8000760 <__aeabi_ddiv+0x52c>
 800055a:	4282      	cmp	r2, r0
 800055c:	d900      	bls.n	8000560 <__aeabi_ddiv+0x32c>
 800055e:	e129      	b.n	80007b4 <__aeabi_ddiv+0x580>
 8000560:	d100      	bne.n	8000564 <__aeabi_ddiv+0x330>
 8000562:	e124      	b.n	80007ae <__aeabi_ddiv+0x57a>
 8000564:	9b05      	ldr	r3, [sp, #20]
 8000566:	469b      	mov	fp, r3
 8000568:	1b2c      	subs	r4, r5, r4
 800056a:	42a5      	cmp	r5, r4
 800056c:	41ad      	sbcs	r5, r5
 800056e:	9b00      	ldr	r3, [sp, #0]
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	426d      	negs	r5, r5
 8000574:	1b40      	subs	r0, r0, r5
 8000576:	4283      	cmp	r3, r0
 8000578:	d100      	bne.n	800057c <__aeabi_ddiv+0x348>
 800057a:	e10f      	b.n	800079c <__aeabi_ddiv+0x568>
 800057c:	9902      	ldr	r1, [sp, #8]
 800057e:	f7ff fe53 	bl	8000228 <__aeabi_uidivmod>
 8000582:	9a03      	ldr	r2, [sp, #12]
 8000584:	040b      	lsls	r3, r1, #16
 8000586:	4342      	muls	r2, r0
 8000588:	0c21      	lsrs	r1, r4, #16
 800058a:	0005      	movs	r5, r0
 800058c:	4319      	orrs	r1, r3
 800058e:	428a      	cmp	r2, r1
 8000590:	d900      	bls.n	8000594 <__aeabi_ddiv+0x360>
 8000592:	e0cb      	b.n	800072c <__aeabi_ddiv+0x4f8>
 8000594:	1a88      	subs	r0, r1, r2
 8000596:	9902      	ldr	r1, [sp, #8]
 8000598:	f7ff fe46 	bl	8000228 <__aeabi_uidivmod>
 800059c:	9a03      	ldr	r2, [sp, #12]
 800059e:	0424      	lsls	r4, r4, #16
 80005a0:	4342      	muls	r2, r0
 80005a2:	0409      	lsls	r1, r1, #16
 80005a4:	0c24      	lsrs	r4, r4, #16
 80005a6:	0003      	movs	r3, r0
 80005a8:	430c      	orrs	r4, r1
 80005aa:	42a2      	cmp	r2, r4
 80005ac:	d900      	bls.n	80005b0 <__aeabi_ddiv+0x37c>
 80005ae:	e0ca      	b.n	8000746 <__aeabi_ddiv+0x512>
 80005b0:	4641      	mov	r1, r8
 80005b2:	1aa4      	subs	r4, r4, r2
 80005b4:	042a      	lsls	r2, r5, #16
 80005b6:	431a      	orrs	r2, r3
 80005b8:	9f04      	ldr	r7, [sp, #16]
 80005ba:	0413      	lsls	r3, r2, #16
 80005bc:	0c1b      	lsrs	r3, r3, #16
 80005be:	4359      	muls	r1, r3
 80005c0:	4640      	mov	r0, r8
 80005c2:	437b      	muls	r3, r7
 80005c4:	469c      	mov	ip, r3
 80005c6:	0c15      	lsrs	r5, r2, #16
 80005c8:	4368      	muls	r0, r5
 80005ca:	0c0b      	lsrs	r3, r1, #16
 80005cc:	4484      	add	ip, r0
 80005ce:	4463      	add	r3, ip
 80005d0:	437d      	muls	r5, r7
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d903      	bls.n	80005de <__aeabi_ddiv+0x3aa>
 80005d6:	2080      	movs	r0, #128	@ 0x80
 80005d8:	0240      	lsls	r0, r0, #9
 80005da:	4684      	mov	ip, r0
 80005dc:	4465      	add	r5, ip
 80005de:	0c18      	lsrs	r0, r3, #16
 80005e0:	0409      	lsls	r1, r1, #16
 80005e2:	041b      	lsls	r3, r3, #16
 80005e4:	0c09      	lsrs	r1, r1, #16
 80005e6:	1940      	adds	r0, r0, r5
 80005e8:	185b      	adds	r3, r3, r1
 80005ea:	4284      	cmp	r4, r0
 80005ec:	d327      	bcc.n	800063e <__aeabi_ddiv+0x40a>
 80005ee:	d023      	beq.n	8000638 <__aeabi_ddiv+0x404>
 80005f0:	2301      	movs	r3, #1
 80005f2:	0035      	movs	r5, r6
 80005f4:	431a      	orrs	r2, r3
 80005f6:	4b94      	ldr	r3, [pc, #592]	@ (8000848 <__aeabi_ddiv+0x614>)
 80005f8:	4453      	add	r3, sl
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	dd60      	ble.n	80006c0 <__aeabi_ddiv+0x48c>
 80005fe:	0751      	lsls	r1, r2, #29
 8000600:	d000      	beq.n	8000604 <__aeabi_ddiv+0x3d0>
 8000602:	e086      	b.n	8000712 <__aeabi_ddiv+0x4de>
 8000604:	002e      	movs	r6, r5
 8000606:	08d1      	lsrs	r1, r2, #3
 8000608:	465a      	mov	r2, fp
 800060a:	01d2      	lsls	r2, r2, #7
 800060c:	d506      	bpl.n	800061c <__aeabi_ddiv+0x3e8>
 800060e:	465a      	mov	r2, fp
 8000610:	4b8e      	ldr	r3, [pc, #568]	@ (800084c <__aeabi_ddiv+0x618>)
 8000612:	401a      	ands	r2, r3
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	4693      	mov	fp, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	4453      	add	r3, sl
 800061c:	4a8c      	ldr	r2, [pc, #560]	@ (8000850 <__aeabi_ddiv+0x61c>)
 800061e:	4293      	cmp	r3, r2
 8000620:	dd00      	ble.n	8000624 <__aeabi_ddiv+0x3f0>
 8000622:	e680      	b.n	8000326 <__aeabi_ddiv+0xf2>
 8000624:	465a      	mov	r2, fp
 8000626:	0752      	lsls	r2, r2, #29
 8000628:	430a      	orrs	r2, r1
 800062a:	4690      	mov	r8, r2
 800062c:	465a      	mov	r2, fp
 800062e:	055b      	lsls	r3, r3, #21
 8000630:	0254      	lsls	r4, r2, #9
 8000632:	0b24      	lsrs	r4, r4, #12
 8000634:	0d5b      	lsrs	r3, r3, #21
 8000636:	e669      	b.n	800030c <__aeabi_ddiv+0xd8>
 8000638:	0035      	movs	r5, r6
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0db      	beq.n	80005f6 <__aeabi_ddiv+0x3c2>
 800063e:	9d00      	ldr	r5, [sp, #0]
 8000640:	1e51      	subs	r1, r2, #1
 8000642:	46ac      	mov	ip, r5
 8000644:	4464      	add	r4, ip
 8000646:	42ac      	cmp	r4, r5
 8000648:	d200      	bcs.n	800064c <__aeabi_ddiv+0x418>
 800064a:	e09e      	b.n	800078a <__aeabi_ddiv+0x556>
 800064c:	4284      	cmp	r4, r0
 800064e:	d200      	bcs.n	8000652 <__aeabi_ddiv+0x41e>
 8000650:	e0e1      	b.n	8000816 <__aeabi_ddiv+0x5e2>
 8000652:	d100      	bne.n	8000656 <__aeabi_ddiv+0x422>
 8000654:	e0ee      	b.n	8000834 <__aeabi_ddiv+0x600>
 8000656:	000a      	movs	r2, r1
 8000658:	e7ca      	b.n	80005f0 <__aeabi_ddiv+0x3bc>
 800065a:	4542      	cmp	r2, r8
 800065c:	d900      	bls.n	8000660 <__aeabi_ddiv+0x42c>
 800065e:	e708      	b.n	8000472 <__aeabi_ddiv+0x23e>
 8000660:	464b      	mov	r3, r9
 8000662:	07dc      	lsls	r4, r3, #31
 8000664:	0858      	lsrs	r0, r3, #1
 8000666:	4643      	mov	r3, r8
 8000668:	085b      	lsrs	r3, r3, #1
 800066a:	431c      	orrs	r4, r3
 800066c:	4643      	mov	r3, r8
 800066e:	07dd      	lsls	r5, r3, #31
 8000670:	e706      	b.n	8000480 <__aeabi_ddiv+0x24c>
 8000672:	f000 f961 	bl	8000938 <__clzsi2>
 8000676:	2315      	movs	r3, #21
 8000678:	469c      	mov	ip, r3
 800067a:	4484      	add	ip, r0
 800067c:	0002      	movs	r2, r0
 800067e:	4663      	mov	r3, ip
 8000680:	3220      	adds	r2, #32
 8000682:	2b1c      	cmp	r3, #28
 8000684:	dc00      	bgt.n	8000688 <__aeabi_ddiv+0x454>
 8000686:	e692      	b.n	80003ae <__aeabi_ddiv+0x17a>
 8000688:	0023      	movs	r3, r4
 800068a:	3808      	subs	r0, #8
 800068c:	4083      	lsls	r3, r0
 800068e:	4699      	mov	r9, r3
 8000690:	2300      	movs	r3, #0
 8000692:	4698      	mov	r8, r3
 8000694:	e69a      	b.n	80003cc <__aeabi_ddiv+0x198>
 8000696:	f000 f94f 	bl	8000938 <__clzsi2>
 800069a:	0002      	movs	r2, r0
 800069c:	0003      	movs	r3, r0
 800069e:	3215      	adds	r2, #21
 80006a0:	3320      	adds	r3, #32
 80006a2:	2a1c      	cmp	r2, #28
 80006a4:	dc00      	bgt.n	80006a8 <__aeabi_ddiv+0x474>
 80006a6:	e65f      	b.n	8000368 <__aeabi_ddiv+0x134>
 80006a8:	9900      	ldr	r1, [sp, #0]
 80006aa:	3808      	subs	r0, #8
 80006ac:	4081      	lsls	r1, r0
 80006ae:	2200      	movs	r2, #0
 80006b0:	468b      	mov	fp, r1
 80006b2:	e666      	b.n	8000382 <__aeabi_ddiv+0x14e>
 80006b4:	2200      	movs	r2, #0
 80006b6:	002e      	movs	r6, r5
 80006b8:	2400      	movs	r4, #0
 80006ba:	4690      	mov	r8, r2
 80006bc:	4b65      	ldr	r3, [pc, #404]	@ (8000854 <__aeabi_ddiv+0x620>)
 80006be:	e625      	b.n	800030c <__aeabi_ddiv+0xd8>
 80006c0:	002e      	movs	r6, r5
 80006c2:	2101      	movs	r1, #1
 80006c4:	1ac9      	subs	r1, r1, r3
 80006c6:	2938      	cmp	r1, #56	@ 0x38
 80006c8:	dd00      	ble.n	80006cc <__aeabi_ddiv+0x498>
 80006ca:	e61b      	b.n	8000304 <__aeabi_ddiv+0xd0>
 80006cc:	291f      	cmp	r1, #31
 80006ce:	dc7e      	bgt.n	80007ce <__aeabi_ddiv+0x59a>
 80006d0:	4861      	ldr	r0, [pc, #388]	@ (8000858 <__aeabi_ddiv+0x624>)
 80006d2:	0014      	movs	r4, r2
 80006d4:	4450      	add	r0, sl
 80006d6:	465b      	mov	r3, fp
 80006d8:	4082      	lsls	r2, r0
 80006da:	4083      	lsls	r3, r0
 80006dc:	40cc      	lsrs	r4, r1
 80006de:	1e50      	subs	r0, r2, #1
 80006e0:	4182      	sbcs	r2, r0
 80006e2:	4323      	orrs	r3, r4
 80006e4:	431a      	orrs	r2, r3
 80006e6:	465b      	mov	r3, fp
 80006e8:	40cb      	lsrs	r3, r1
 80006ea:	0751      	lsls	r1, r2, #29
 80006ec:	d009      	beq.n	8000702 <__aeabi_ddiv+0x4ce>
 80006ee:	210f      	movs	r1, #15
 80006f0:	4011      	ands	r1, r2
 80006f2:	2904      	cmp	r1, #4
 80006f4:	d005      	beq.n	8000702 <__aeabi_ddiv+0x4ce>
 80006f6:	1d11      	adds	r1, r2, #4
 80006f8:	4291      	cmp	r1, r2
 80006fa:	4192      	sbcs	r2, r2
 80006fc:	4252      	negs	r2, r2
 80006fe:	189b      	adds	r3, r3, r2
 8000700:	000a      	movs	r2, r1
 8000702:	0219      	lsls	r1, r3, #8
 8000704:	d400      	bmi.n	8000708 <__aeabi_ddiv+0x4d4>
 8000706:	e09b      	b.n	8000840 <__aeabi_ddiv+0x60c>
 8000708:	2200      	movs	r2, #0
 800070a:	2301      	movs	r3, #1
 800070c:	2400      	movs	r4, #0
 800070e:	4690      	mov	r8, r2
 8000710:	e5fc      	b.n	800030c <__aeabi_ddiv+0xd8>
 8000712:	210f      	movs	r1, #15
 8000714:	4011      	ands	r1, r2
 8000716:	2904      	cmp	r1, #4
 8000718:	d100      	bne.n	800071c <__aeabi_ddiv+0x4e8>
 800071a:	e773      	b.n	8000604 <__aeabi_ddiv+0x3d0>
 800071c:	1d11      	adds	r1, r2, #4
 800071e:	4291      	cmp	r1, r2
 8000720:	4192      	sbcs	r2, r2
 8000722:	4252      	negs	r2, r2
 8000724:	002e      	movs	r6, r5
 8000726:	08c9      	lsrs	r1, r1, #3
 8000728:	4493      	add	fp, r2
 800072a:	e76d      	b.n	8000608 <__aeabi_ddiv+0x3d4>
 800072c:	9b00      	ldr	r3, [sp, #0]
 800072e:	3d01      	subs	r5, #1
 8000730:	469c      	mov	ip, r3
 8000732:	4461      	add	r1, ip
 8000734:	428b      	cmp	r3, r1
 8000736:	d900      	bls.n	800073a <__aeabi_ddiv+0x506>
 8000738:	e72c      	b.n	8000594 <__aeabi_ddiv+0x360>
 800073a:	428a      	cmp	r2, r1
 800073c:	d800      	bhi.n	8000740 <__aeabi_ddiv+0x50c>
 800073e:	e729      	b.n	8000594 <__aeabi_ddiv+0x360>
 8000740:	1e85      	subs	r5, r0, #2
 8000742:	4461      	add	r1, ip
 8000744:	e726      	b.n	8000594 <__aeabi_ddiv+0x360>
 8000746:	9900      	ldr	r1, [sp, #0]
 8000748:	3b01      	subs	r3, #1
 800074a:	468c      	mov	ip, r1
 800074c:	4464      	add	r4, ip
 800074e:	42a1      	cmp	r1, r4
 8000750:	d900      	bls.n	8000754 <__aeabi_ddiv+0x520>
 8000752:	e72d      	b.n	80005b0 <__aeabi_ddiv+0x37c>
 8000754:	42a2      	cmp	r2, r4
 8000756:	d800      	bhi.n	800075a <__aeabi_ddiv+0x526>
 8000758:	e72a      	b.n	80005b0 <__aeabi_ddiv+0x37c>
 800075a:	1e83      	subs	r3, r0, #2
 800075c:	4464      	add	r4, ip
 800075e:	e727      	b.n	80005b0 <__aeabi_ddiv+0x37c>
 8000760:	4287      	cmp	r7, r0
 8000762:	d000      	beq.n	8000766 <__aeabi_ddiv+0x532>
 8000764:	e6fe      	b.n	8000564 <__aeabi_ddiv+0x330>
 8000766:	45a9      	cmp	r9, r5
 8000768:	d900      	bls.n	800076c <__aeabi_ddiv+0x538>
 800076a:	e6fb      	b.n	8000564 <__aeabi_ddiv+0x330>
 800076c:	e6f5      	b.n	800055a <__aeabi_ddiv+0x326>
 800076e:	42a2      	cmp	r2, r4
 8000770:	d800      	bhi.n	8000774 <__aeabi_ddiv+0x540>
 8000772:	e6b9      	b.n	80004e8 <__aeabi_ddiv+0x2b4>
 8000774:	1e83      	subs	r3, r0, #2
 8000776:	4464      	add	r4, ip
 8000778:	e6b6      	b.n	80004e8 <__aeabi_ddiv+0x2b4>
 800077a:	428a      	cmp	r2, r1
 800077c:	d800      	bhi.n	8000780 <__aeabi_ddiv+0x54c>
 800077e:	e69f      	b.n	80004c0 <__aeabi_ddiv+0x28c>
 8000780:	46bc      	mov	ip, r7
 8000782:	1e83      	subs	r3, r0, #2
 8000784:	4698      	mov	r8, r3
 8000786:	4461      	add	r1, ip
 8000788:	e69a      	b.n	80004c0 <__aeabi_ddiv+0x28c>
 800078a:	000a      	movs	r2, r1
 800078c:	4284      	cmp	r4, r0
 800078e:	d000      	beq.n	8000792 <__aeabi_ddiv+0x55e>
 8000790:	e72e      	b.n	80005f0 <__aeabi_ddiv+0x3bc>
 8000792:	454b      	cmp	r3, r9
 8000794:	d000      	beq.n	8000798 <__aeabi_ddiv+0x564>
 8000796:	e72b      	b.n	80005f0 <__aeabi_ddiv+0x3bc>
 8000798:	0035      	movs	r5, r6
 800079a:	e72c      	b.n	80005f6 <__aeabi_ddiv+0x3c2>
 800079c:	4b2a      	ldr	r3, [pc, #168]	@ (8000848 <__aeabi_ddiv+0x614>)
 800079e:	4a2f      	ldr	r2, [pc, #188]	@ (800085c <__aeabi_ddiv+0x628>)
 80007a0:	4453      	add	r3, sl
 80007a2:	4592      	cmp	sl, r2
 80007a4:	db43      	blt.n	800082e <__aeabi_ddiv+0x5fa>
 80007a6:	2201      	movs	r2, #1
 80007a8:	2100      	movs	r1, #0
 80007aa:	4493      	add	fp, r2
 80007ac:	e72c      	b.n	8000608 <__aeabi_ddiv+0x3d4>
 80007ae:	42ac      	cmp	r4, r5
 80007b0:	d800      	bhi.n	80007b4 <__aeabi_ddiv+0x580>
 80007b2:	e6d7      	b.n	8000564 <__aeabi_ddiv+0x330>
 80007b4:	2302      	movs	r3, #2
 80007b6:	425b      	negs	r3, r3
 80007b8:	469c      	mov	ip, r3
 80007ba:	9900      	ldr	r1, [sp, #0]
 80007bc:	444d      	add	r5, r9
 80007be:	454d      	cmp	r5, r9
 80007c0:	419b      	sbcs	r3, r3
 80007c2:	44e3      	add	fp, ip
 80007c4:	468c      	mov	ip, r1
 80007c6:	425b      	negs	r3, r3
 80007c8:	4463      	add	r3, ip
 80007ca:	18c0      	adds	r0, r0, r3
 80007cc:	e6cc      	b.n	8000568 <__aeabi_ddiv+0x334>
 80007ce:	201f      	movs	r0, #31
 80007d0:	4240      	negs	r0, r0
 80007d2:	1ac3      	subs	r3, r0, r3
 80007d4:	4658      	mov	r0, fp
 80007d6:	40d8      	lsrs	r0, r3
 80007d8:	2920      	cmp	r1, #32
 80007da:	d004      	beq.n	80007e6 <__aeabi_ddiv+0x5b2>
 80007dc:	4659      	mov	r1, fp
 80007de:	4b20      	ldr	r3, [pc, #128]	@ (8000860 <__aeabi_ddiv+0x62c>)
 80007e0:	4453      	add	r3, sl
 80007e2:	4099      	lsls	r1, r3
 80007e4:	430a      	orrs	r2, r1
 80007e6:	1e53      	subs	r3, r2, #1
 80007e8:	419a      	sbcs	r2, r3
 80007ea:	2307      	movs	r3, #7
 80007ec:	0019      	movs	r1, r3
 80007ee:	4302      	orrs	r2, r0
 80007f0:	2400      	movs	r4, #0
 80007f2:	4011      	ands	r1, r2
 80007f4:	4213      	tst	r3, r2
 80007f6:	d009      	beq.n	800080c <__aeabi_ddiv+0x5d8>
 80007f8:	3308      	adds	r3, #8
 80007fa:	4013      	ands	r3, r2
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	d01d      	beq.n	800083c <__aeabi_ddiv+0x608>
 8000800:	1d13      	adds	r3, r2, #4
 8000802:	4293      	cmp	r3, r2
 8000804:	4189      	sbcs	r1, r1
 8000806:	001a      	movs	r2, r3
 8000808:	4249      	negs	r1, r1
 800080a:	0749      	lsls	r1, r1, #29
 800080c:	08d2      	lsrs	r2, r2, #3
 800080e:	430a      	orrs	r2, r1
 8000810:	4690      	mov	r8, r2
 8000812:	2300      	movs	r3, #0
 8000814:	e57a      	b.n	800030c <__aeabi_ddiv+0xd8>
 8000816:	4649      	mov	r1, r9
 8000818:	9f00      	ldr	r7, [sp, #0]
 800081a:	004d      	lsls	r5, r1, #1
 800081c:	454d      	cmp	r5, r9
 800081e:	4189      	sbcs	r1, r1
 8000820:	46bc      	mov	ip, r7
 8000822:	4249      	negs	r1, r1
 8000824:	4461      	add	r1, ip
 8000826:	46a9      	mov	r9, r5
 8000828:	3a02      	subs	r2, #2
 800082a:	1864      	adds	r4, r4, r1
 800082c:	e7ae      	b.n	800078c <__aeabi_ddiv+0x558>
 800082e:	2201      	movs	r2, #1
 8000830:	4252      	negs	r2, r2
 8000832:	e746      	b.n	80006c2 <__aeabi_ddiv+0x48e>
 8000834:	4599      	cmp	r9, r3
 8000836:	d3ee      	bcc.n	8000816 <__aeabi_ddiv+0x5e2>
 8000838:	000a      	movs	r2, r1
 800083a:	e7aa      	b.n	8000792 <__aeabi_ddiv+0x55e>
 800083c:	2100      	movs	r1, #0
 800083e:	e7e5      	b.n	800080c <__aeabi_ddiv+0x5d8>
 8000840:	0759      	lsls	r1, r3, #29
 8000842:	025b      	lsls	r3, r3, #9
 8000844:	0b1c      	lsrs	r4, r3, #12
 8000846:	e7e1      	b.n	800080c <__aeabi_ddiv+0x5d8>
 8000848:	000003ff 	.word	0x000003ff
 800084c:	feffffff 	.word	0xfeffffff
 8000850:	000007fe 	.word	0x000007fe
 8000854:	000007ff 	.word	0x000007ff
 8000858:	0000041e 	.word	0x0000041e
 800085c:	fffffc02 	.word	0xfffffc02
 8000860:	0000043e 	.word	0x0000043e

08000864 <__aeabi_d2iz>:
 8000864:	000b      	movs	r3, r1
 8000866:	0002      	movs	r2, r0
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	4d16      	ldr	r5, [pc, #88]	@ (80008c4 <__aeabi_d2iz+0x60>)
 800086c:	030c      	lsls	r4, r1, #12
 800086e:	b082      	sub	sp, #8
 8000870:	0049      	lsls	r1, r1, #1
 8000872:	2000      	movs	r0, #0
 8000874:	9200      	str	r2, [sp, #0]
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	0b24      	lsrs	r4, r4, #12
 800087a:	0d49      	lsrs	r1, r1, #21
 800087c:	0fde      	lsrs	r6, r3, #31
 800087e:	42a9      	cmp	r1, r5
 8000880:	dd04      	ble.n	800088c <__aeabi_d2iz+0x28>
 8000882:	4811      	ldr	r0, [pc, #68]	@ (80008c8 <__aeabi_d2iz+0x64>)
 8000884:	4281      	cmp	r1, r0
 8000886:	dd03      	ble.n	8000890 <__aeabi_d2iz+0x2c>
 8000888:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <__aeabi_d2iz+0x68>)
 800088a:	18f0      	adds	r0, r6, r3
 800088c:	b002      	add	sp, #8
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	2080      	movs	r0, #128	@ 0x80
 8000892:	0340      	lsls	r0, r0, #13
 8000894:	4320      	orrs	r0, r4
 8000896:	4c0e      	ldr	r4, [pc, #56]	@ (80008d0 <__aeabi_d2iz+0x6c>)
 8000898:	1a64      	subs	r4, r4, r1
 800089a:	2c1f      	cmp	r4, #31
 800089c:	dd08      	ble.n	80008b0 <__aeabi_d2iz+0x4c>
 800089e:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <__aeabi_d2iz+0x70>)
 80008a0:	1a5b      	subs	r3, r3, r1
 80008a2:	40d8      	lsrs	r0, r3
 80008a4:	0003      	movs	r3, r0
 80008a6:	4258      	negs	r0, r3
 80008a8:	2e00      	cmp	r6, #0
 80008aa:	d1ef      	bne.n	800088c <__aeabi_d2iz+0x28>
 80008ac:	0018      	movs	r0, r3
 80008ae:	e7ed      	b.n	800088c <__aeabi_d2iz+0x28>
 80008b0:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <__aeabi_d2iz+0x74>)
 80008b2:	9a00      	ldr	r2, [sp, #0]
 80008b4:	469c      	mov	ip, r3
 80008b6:	0003      	movs	r3, r0
 80008b8:	4461      	add	r1, ip
 80008ba:	408b      	lsls	r3, r1
 80008bc:	40e2      	lsrs	r2, r4
 80008be:	4313      	orrs	r3, r2
 80008c0:	e7f1      	b.n	80008a6 <__aeabi_d2iz+0x42>
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	000003fe 	.word	0x000003fe
 80008c8:	0000041d 	.word	0x0000041d
 80008cc:	7fffffff 	.word	0x7fffffff
 80008d0:	00000433 	.word	0x00000433
 80008d4:	00000413 	.word	0x00000413
 80008d8:	fffffbed 	.word	0xfffffbed

080008dc <__aeabi_i2d>:
 80008dc:	b570      	push	{r4, r5, r6, lr}
 80008de:	2800      	cmp	r0, #0
 80008e0:	d016      	beq.n	8000910 <__aeabi_i2d+0x34>
 80008e2:	17c3      	asrs	r3, r0, #31
 80008e4:	18c5      	adds	r5, r0, r3
 80008e6:	405d      	eors	r5, r3
 80008e8:	0fc4      	lsrs	r4, r0, #31
 80008ea:	0028      	movs	r0, r5
 80008ec:	f000 f824 	bl	8000938 <__clzsi2>
 80008f0:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <__aeabi_i2d+0x58>)
 80008f2:	1a1b      	subs	r3, r3, r0
 80008f4:	055b      	lsls	r3, r3, #21
 80008f6:	0d5b      	lsrs	r3, r3, #21
 80008f8:	280a      	cmp	r0, #10
 80008fa:	dc14      	bgt.n	8000926 <__aeabi_i2d+0x4a>
 80008fc:	0002      	movs	r2, r0
 80008fe:	002e      	movs	r6, r5
 8000900:	3215      	adds	r2, #21
 8000902:	4096      	lsls	r6, r2
 8000904:	220b      	movs	r2, #11
 8000906:	1a12      	subs	r2, r2, r0
 8000908:	40d5      	lsrs	r5, r2
 800090a:	032d      	lsls	r5, r5, #12
 800090c:	0b2d      	lsrs	r5, r5, #12
 800090e:	e003      	b.n	8000918 <__aeabi_i2d+0x3c>
 8000910:	2400      	movs	r4, #0
 8000912:	2300      	movs	r3, #0
 8000914:	2500      	movs	r5, #0
 8000916:	2600      	movs	r6, #0
 8000918:	051b      	lsls	r3, r3, #20
 800091a:	432b      	orrs	r3, r5
 800091c:	07e4      	lsls	r4, r4, #31
 800091e:	4323      	orrs	r3, r4
 8000920:	0030      	movs	r0, r6
 8000922:	0019      	movs	r1, r3
 8000924:	bd70      	pop	{r4, r5, r6, pc}
 8000926:	380b      	subs	r0, #11
 8000928:	4085      	lsls	r5, r0
 800092a:	032d      	lsls	r5, r5, #12
 800092c:	2600      	movs	r6, #0
 800092e:	0b2d      	lsrs	r5, r5, #12
 8000930:	e7f2      	b.n	8000918 <__aeabi_i2d+0x3c>
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	0000041e 	.word	0x0000041e

08000938 <__clzsi2>:
 8000938:	211c      	movs	r1, #28
 800093a:	2301      	movs	r3, #1
 800093c:	041b      	lsls	r3, r3, #16
 800093e:	4298      	cmp	r0, r3
 8000940:	d301      	bcc.n	8000946 <__clzsi2+0xe>
 8000942:	0c00      	lsrs	r0, r0, #16
 8000944:	3910      	subs	r1, #16
 8000946:	0a1b      	lsrs	r3, r3, #8
 8000948:	4298      	cmp	r0, r3
 800094a:	d301      	bcc.n	8000950 <__clzsi2+0x18>
 800094c:	0a00      	lsrs	r0, r0, #8
 800094e:	3908      	subs	r1, #8
 8000950:	091b      	lsrs	r3, r3, #4
 8000952:	4298      	cmp	r0, r3
 8000954:	d301      	bcc.n	800095a <__clzsi2+0x22>
 8000956:	0900      	lsrs	r0, r0, #4
 8000958:	3904      	subs	r1, #4
 800095a:	a202      	add	r2, pc, #8	@ (adr r2, 8000964 <__clzsi2+0x2c>)
 800095c:	5c10      	ldrb	r0, [r2, r0]
 800095e:	1840      	adds	r0, r0, r1
 8000960:	4770      	bx	lr
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	02020304 	.word	0x02020304
 8000968:	01010101 	.word	0x01010101
	...

08000974 <bno055_write>:
#include "bno055_port.h"

extern I2C_HandleTypeDef hi2c1;

s8 bno055_write (u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 wr_len)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b087      	sub	sp, #28
 8000978:	af04      	add	r7, sp, #16
 800097a:	0004      	movs	r4, r0
 800097c:	0008      	movs	r0, r1
 800097e:	603a      	str	r2, [r7, #0]
 8000980:	0019      	movs	r1, r3
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	1c22      	adds	r2, r4, #0
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	1dbb      	adds	r3, r7, #6
 800098a:	1c02      	adds	r2, r0, #0
 800098c:	701a      	strb	r2, [r3, #0]
 800098e:	1d7b      	adds	r3, r7, #5
 8000990:	1c0a      	adds	r2, r1, #0
 8000992:	701a      	strb	r2, [r3, #0]
	dev_addr = ((dev_addr << 1U) | 0x0U);
 8000994:	1dfa      	adds	r2, r7, #7
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	18db      	adds	r3, r3, r3
 800099c:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Mem_Write(&hi2c1, dev_addr, reg_addr, 1U, reg_data, wr_len, 100);
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b299      	uxth	r1, r3
 80009a4:	1dbb      	adds	r3, r7, #6
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	1d7b      	adds	r3, r7, #5
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	4806      	ldr	r0, [pc, #24]	@ (80009cc <bno055_write+0x58>)
 80009b2:	2464      	movs	r4, #100	@ 0x64
 80009b4:	9402      	str	r4, [sp, #8]
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2301      	movs	r3, #1
 80009be:	f002 fd01 	bl	80033c4 <HAL_I2C_Mem_Write>
	return ( BNO055_SUCCESS );
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	0018      	movs	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b003      	add	sp, #12
 80009ca:	bd90      	pop	{r4, r7, pc}
 80009cc:	20000080 	.word	0x20000080

080009d0 <bno055_read>:

s8 bno055_read (u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 wr_len)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b087      	sub	sp, #28
 80009d4:	af04      	add	r7, sp, #16
 80009d6:	0004      	movs	r4, r0
 80009d8:	0008      	movs	r0, r1
 80009da:	603a      	str	r2, [r7, #0]
 80009dc:	0019      	movs	r1, r3
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	1c22      	adds	r2, r4, #0
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	1dbb      	adds	r3, r7, #6
 80009e6:	1c02      	adds	r2, r0, #0
 80009e8:	701a      	strb	r2, [r3, #0]
 80009ea:	1d7b      	adds	r3, r7, #5
 80009ec:	1c0a      	adds	r2, r1, #0
 80009ee:	701a      	strb	r2, [r3, #0]
	dev_addr = ((dev_addr << 1U) | 0x1U);
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	18db      	adds	r3, r3, r3
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	2101      	movs	r1, #1
 80009fc:	430a      	orrs	r2, r1
 80009fe:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, dev_addr, reg_addr, 1U, reg_data, wr_len, 100);
 8000a00:	1dfb      	adds	r3, r7, #7
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b299      	uxth	r1, r3
 8000a06:	1dbb      	adds	r3, r7, #6
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	1d7b      	adds	r3, r7, #5
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	4807      	ldr	r0, [pc, #28]	@ (8000a30 <bno055_read+0x60>)
 8000a14:	2464      	movs	r4, #100	@ 0x64
 8000a16:	9402      	str	r4, [sp, #8]
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2301      	movs	r3, #1
 8000a20:	f002 fdfe 	bl	8003620 <HAL_I2C_Mem_Read>
	return ( BNO055_SUCCESS );
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	0018      	movs	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b003      	add	sp, #12
 8000a2c:	bd90      	pop	{r4, r7, pc}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	20000080 	.word	0x20000080

08000a34 <bno055_delay>:

void bno055_delay(u32 period)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f002 f900 	bl	8002c44 <HAL_Delay>
}
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b002      	add	sp, #8
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 8000a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000a54:	260f      	movs	r6, #15
 8000a56:	19bb      	adds	r3, r7, r6
 8000a58:	22ff      	movs	r2, #255	@ 0xff
 8000a5a:	701a      	strb	r2, [r3, #0]
    u8 data_u8 = BNO055_INIT_VALUE;
 8000a5c:	230e      	movs	r3, #14
 8000a5e:	18fb      	adds	r3, r7, r3
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8000a64:	220d      	movs	r2, #13
 8000a66:	18bb      	adds	r3, r7, r2
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000a6c:	2108      	movs	r1, #8
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2200      	movs	r2, #0
 8000a72:	801a      	strh	r2, [r3, #0]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8000a74:	4b64      	ldr	r3, [pc, #400]	@ (8000c08 <bno055_init+0x1bc>)
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	601a      	str	r2, [r3, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000a7a:	4b63      	ldr	r3, [pc, #396]	@ (8000c08 <bno055_init+0x1bc>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	68dd      	ldr	r5, [r3, #12]
 8000a80:	4b61      	ldr	r3, [pc, #388]	@ (8000c08 <bno055_init+0x1bc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	7a58      	ldrb	r0, [r3, #9]
 8000a86:	19bc      	adds	r4, r7, r6
 8000a88:	220d      	movs	r2, #13
 8000a8a:	18ba      	adds	r2, r7, r2
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	2107      	movs	r1, #7
 8000a90:	47a8      	blx	r5
 8000a92:	0003      	movs	r3, r0
 8000a94:	7023      	strb	r3, [r4, #0]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a96:	4b5c      	ldr	r3, [pc, #368]	@ (8000c08 <bno055_init+0x1bc>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	691c      	ldr	r4, [r3, #16]
 8000a9c:	4b5a      	ldr	r3, [pc, #360]	@ (8000c08 <bno055_init+0x1bc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	7a58      	ldrb	r0, [r3, #9]
 8000aa2:	230e      	movs	r3, #14
 8000aa4:	18fa      	adds	r2, r7, r3
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	47a0      	blx	r4
 8000aac:	0003      	movs	r3, r0
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	0035      	movs	r5, r6
 8000ab2:	197b      	adds	r3, r7, r5
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	18d3      	adds	r3, r2, r3
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	197b      	adds	r3, r7, r5
 8000abc:	701a      	strb	r2, [r3, #0]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8000abe:	4b52      	ldr	r3, [pc, #328]	@ (8000c08 <bno055_init+0x1bc>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	260e      	movs	r6, #14
 8000ac4:	19ba      	adds	r2, r7, r6
 8000ac6:	7812      	ldrb	r2, [r2, #0]
 8000ac8:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000aca:	4b4f      	ldr	r3, [pc, #316]	@ (8000c08 <bno055_init+0x1bc>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	691c      	ldr	r4, [r3, #16]
 8000ad0:	4b4d      	ldr	r3, [pc, #308]	@ (8000c08 <bno055_init+0x1bc>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	7a58      	ldrb	r0, [r3, #9]
 8000ad6:	19ba      	adds	r2, r7, r6
 8000ad8:	2301      	movs	r3, #1
 8000ada:	2101      	movs	r1, #1
 8000adc:	47a0      	blx	r4
 8000ade:	0003      	movs	r3, r0
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	197b      	adds	r3, r7, r5
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	18d3      	adds	r3, r2, r3
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	197b      	adds	r3, r7, r5
 8000aec:	701a      	strb	r2, [r3, #0]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8000aee:	4b46      	ldr	r3, [pc, #280]	@ (8000c08 <bno055_init+0x1bc>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	19ba      	adds	r2, r7, r6
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000af8:	4b43      	ldr	r3, [pc, #268]	@ (8000c08 <bno055_init+0x1bc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	691c      	ldr	r4, [r3, #16]
 8000afe:	4b42      	ldr	r3, [pc, #264]	@ (8000c08 <bno055_init+0x1bc>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	7a58      	ldrb	r0, [r3, #9]
 8000b04:	19ba      	adds	r2, r7, r6
 8000b06:	2301      	movs	r3, #1
 8000b08:	2102      	movs	r1, #2
 8000b0a:	47a0      	blx	r4
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	197b      	adds	r3, r7, r5
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	18d3      	adds	r3, r2, r3
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	197b      	adds	r3, r7, r5
 8000b1a:	701a      	strb	r2, [r3, #0]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8000b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c08 <bno055_init+0x1bc>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	19ba      	adds	r2, r7, r6
 8000b22:	7812      	ldrb	r2, [r2, #0]
 8000b24:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b26:	4b38      	ldr	r3, [pc, #224]	@ (8000c08 <bno055_init+0x1bc>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	691c      	ldr	r4, [r3, #16]
 8000b2c:	4b36      	ldr	r3, [pc, #216]	@ (8000c08 <bno055_init+0x1bc>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	7a58      	ldrb	r0, [r3, #9]
 8000b32:	19ba      	adds	r2, r7, r6
 8000b34:	2301      	movs	r3, #1
 8000b36:	2103      	movs	r1, #3
 8000b38:	47a0      	blx	r4
 8000b3a:	0003      	movs	r3, r0
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	197b      	adds	r3, r7, r5
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	18d3      	adds	r3, r2, r3
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	197b      	adds	r3, r7, r5
 8000b48:	701a      	strb	r2, [r3, #0]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8000b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c08 <bno055_init+0x1bc>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	19ba      	adds	r2, r7, r6
 8000b50:	7812      	ldrb	r2, [r2, #0]
 8000b52:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b54:	4b2c      	ldr	r3, [pc, #176]	@ (8000c08 <bno055_init+0x1bc>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	691c      	ldr	r4, [r3, #16]
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <bno055_init+0x1bc>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	7a58      	ldrb	r0, [r3, #9]
 8000b60:	19ba      	adds	r2, r7, r6
 8000b62:	2301      	movs	r3, #1
 8000b64:	2106      	movs	r1, #6
 8000b66:	47a0      	blx	r4
 8000b68:	0003      	movs	r3, r0
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	197b      	adds	r3, r7, r5
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	18d3      	adds	r3, r2, r3
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	197b      	adds	r3, r7, r5
 8000b76:	701a      	strb	r2, [r3, #0]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8000b78:	4b23      	ldr	r3, [pc, #140]	@ (8000c08 <bno055_init+0x1bc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	19ba      	adds	r2, r7, r6
 8000b7e:	7812      	ldrb	r2, [r2, #0]
 8000b80:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b82:	4b21      	ldr	r3, [pc, #132]	@ (8000c08 <bno055_init+0x1bc>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	691c      	ldr	r4, [r3, #16]
 8000b88:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <bno055_init+0x1bc>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	7a58      	ldrb	r0, [r3, #9]
 8000b8e:	2108      	movs	r1, #8
 8000b90:	187a      	adds	r2, r7, r1
 8000b92:	2302      	movs	r3, #2
 8000b94:	2104      	movs	r1, #4
 8000b96:	47a0      	blx	r4
 8000b98:	0003      	movs	r3, r0
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	197b      	adds	r3, r7, r5
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	18d3      	adds	r3, r2, r3
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	197b      	adds	r3, r7, r5
 8000ba6:	701a      	strb	r2, [r3, #0]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 8000ba8:	2108      	movs	r1, #8
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	701a      	strb	r2, [r3, #0]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	785b      	ldrb	r3, [r3, #1]
 8000bb6:	021b      	lsls	r3, r3, #8
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	0019      	movs	r1, r3
    p_bno055->sw_rev_id =
 8000bc0:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <bno055_init+0x1bc>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8000bc8:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000bca:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <bno055_init+0x1bc>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	691c      	ldr	r4, [r3, #16]
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c08 <bno055_init+0x1bc>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	7a58      	ldrb	r0, [r3, #9]
 8000bd6:	19ba      	adds	r2, r7, r6
 8000bd8:	2301      	movs	r3, #1
 8000bda:	2107      	movs	r1, #7
 8000bdc:	47a0      	blx	r4
 8000bde:	0003      	movs	r3, r0
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	197b      	adds	r3, r7, r5
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	18d3      	adds	r3, r2, r3
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	197b      	adds	r3, r7, r5
 8000bec:	701a      	strb	r2, [r3, #0]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8000bee:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <bno055_init+0x1bc>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	19ba      	adds	r2, r7, r6
 8000bf4:	7812      	ldrb	r2, [r2, #0]
 8000bf6:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8000bf8:	197b      	adds	r3, r7, r5
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b25b      	sxtb	r3, r3
}
 8000bfe:	0018      	movs	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b005      	add	sp, #20
 8000c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	2000007c 	.word	0x2000007c

08000c0c <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8000c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6039      	str	r1, [r7, #0]
 8000c14:	0011      	movs	r1, r2
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	1c02      	adds	r2, r0, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	1dbb      	adds	r3, r7, #6
 8000c1e:	1c0a      	adds	r2, r1, #0
 8000c20:	701a      	strb	r2, [r3, #0]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000c22:	230f      	movs	r3, #15
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	22ff      	movs	r2, #255	@ 0xff
 8000c28:	701a      	strb	r2, [r3, #0]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <bno055_write_register+0x60>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d102      	bne.n	8000c38 <bno055_write_register+0x2c>
    {
        return BNO055_E_NULL_PTR;
 8000c32:	237f      	movs	r3, #127	@ 0x7f
 8000c34:	425b      	negs	r3, r3
 8000c36:	e014      	b.n	8000c62 <bno055_write_register+0x56>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <bno055_write_register+0x60>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	68dd      	ldr	r5, [r3, #12]
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <bno055_write_register+0x60>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	7a58      	ldrb	r0, [r3, #9]
 8000c44:	230f      	movs	r3, #15
 8000c46:	18fc      	adds	r4, r7, r3
 8000c48:	1dbb      	adds	r3, r7, #6
 8000c4a:	781e      	ldrb	r6, [r3, #0]
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	7819      	ldrb	r1, [r3, #0]
 8000c52:	0033      	movs	r3, r6
 8000c54:	47a8      	blx	r5
 8000c56:	0003      	movs	r3, r0
 8000c58:	7023      	strb	r3, [r4, #0]
    }

    return com_rslt;
 8000c5a:	230f      	movs	r3, #15
 8000c5c:	18fb      	adds	r3, r7, r3
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b25b      	sxtb	r3, r3
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b005      	add	sp, #20
 8000c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	2000007c 	.word	0x2000007c

08000c70 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	0002      	movs	r2, r0
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	701a      	strb	r2, [r3, #0]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	22ff      	movs	r2, #255	@ 0xff
 8000c82:	701a      	strb	r2, [r3, #0]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000c84:	230e      	movs	r3, #14
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000c8c:	4b24      	ldr	r3, [pc, #144]	@ (8000d20 <bno055_write_page_id+0xb0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <bno055_write_page_id+0x2a>
    {
        return BNO055_E_NULL_PTR;
 8000c94:	237f      	movs	r3, #127	@ 0x7f
 8000c96:	425b      	negs	r3, r3
 8000c98:	e03e      	b.n	8000d18 <bno055_write_page_id+0xa8>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <bno055_write_page_id+0xb0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	691d      	ldr	r5, [r3, #16]
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <bno055_write_page_id+0xb0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	7a58      	ldrb	r0, [r3, #9]
 8000ca6:	260f      	movs	r6, #15
 8000ca8:	19bc      	adds	r4, r7, r6
 8000caa:	210e      	movs	r1, #14
 8000cac:	187a      	adds	r2, r7, r1
 8000cae:	2301      	movs	r3, #1
 8000cb0:	2107      	movs	r1, #7
 8000cb2:	47a8      	blx	r5
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	7023      	strb	r3, [r4, #0]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8000cb8:	0035      	movs	r5, r6
 8000cba:	197b      	adds	r3, r7, r5
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d121      	bne.n	8000d08 <bno055_write_page_id+0x98>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8000cc4:	210e      	movs	r1, #14
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	1dfa      	adds	r2, r7, #7
 8000cca:	7812      	ldrb	r2, [r2, #0]
 8000ccc:	701a      	strb	r2, [r3, #0]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000cce:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <bno055_write_page_id+0xb0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	68dc      	ldr	r4, [r3, #12]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <bno055_write_page_id+0xb0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	7a58      	ldrb	r0, [r3, #9]
 8000cda:	187a      	adds	r2, r7, r1
 8000cdc:	2301      	movs	r3, #1
 8000cde:	2107      	movs	r1, #7
 8000ce0:	47a0      	blx	r4
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	197b      	adds	r3, r7, r5
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	18d3      	adds	r3, r2, r3
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	197b      	adds	r3, r7, r5
 8000cf0:	701a      	strb	r2, [r3, #0]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8000cf2:	197b      	adds	r3, r7, r5
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d109      	bne.n	8000d10 <bno055_write_page_id+0xa0>
            {
                p_bno055->page_id = page_id_u8;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <bno055_write_page_id+0xb0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	1dfa      	adds	r2, r7, #7
 8000d02:	7812      	ldrb	r2, [r2, #0]
 8000d04:	711a      	strb	r2, [r3, #4]
 8000d06:	e003      	b.n	8000d10 <bno055_write_page_id+0xa0>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000d08:	230f      	movs	r3, #15
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	22ff      	movs	r2, #255	@ 0xff
 8000d0e:	701a      	strb	r2, [r3, #0]
        }
    }

    return com_rslt;
 8000d10:	230f      	movs	r3, #15
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b25b      	sxtb	r3, r3
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b005      	add	sp, #20
 8000d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d20:	2000007c 	.word	0x2000007c

08000d24 <bno055_read_accel_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_accel_xyz(struct bno055_accel_t *accel)
{
 8000d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	22ff      	movs	r2, #255	@ 0xff
 8000d32:	701a      	strb	r2, [r3, #0]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_ACCEL_XYZ_DATA_SIZE] = {
 8000d34:	2308      	movs	r3, #8
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	0018      	movs	r0, r3
 8000d3a:	2306      	movs	r3, #6
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f005 ff64 	bl	8006c0c <memset>
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8000d44:	230e      	movs	r3, #14
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	22ff      	movs	r2, #255	@ 0xff
 8000d4a:	701a      	strb	r2, [r3, #0]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000d4c:	4b3b      	ldr	r3, [pc, #236]	@ (8000e3c <bno055_read_accel_xyz+0x118>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <bno055_read_accel_xyz+0x36>
    {
        return BNO055_E_NULL_PTR;
 8000d54:	237f      	movs	r3, #127	@ 0x7f
 8000d56:	425b      	negs	r3, r3
 8000d58:	e06b      	b.n	8000e32 <bno055_read_accel_xyz+0x10e>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000d5a:	4b38      	ldr	r3, [pc, #224]	@ (8000e3c <bno055_read_accel_xyz+0x118>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	791b      	ldrb	r3, [r3, #4]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d006      	beq.n	8000d72 <bno055_read_accel_xyz+0x4e>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000d64:	230e      	movs	r3, #14
 8000d66:	18fc      	adds	r4, r7, r3
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f7ff ff81 	bl	8000c70 <bno055_write_page_id>
 8000d6e:	0003      	movs	r3, r0
 8000d70:	7023      	strb	r3, [r4, #0]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000d72:	230e      	movs	r3, #14
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d004      	beq.n	8000d88 <bno055_read_accel_xyz+0x64>
 8000d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e3c <bno055_read_accel_xyz+0x118>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	791b      	ldrb	r3, [r3, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d14c      	bne.n	8000e22 <bno055_read_accel_xyz+0xfe>
        {
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000d88:	4b2c      	ldr	r3, [pc, #176]	@ (8000e3c <bno055_read_accel_xyz+0x118>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	691d      	ldr	r5, [r3, #16]
 8000d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e3c <bno055_read_accel_xyz+0x118>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	7a58      	ldrb	r0, [r3, #9]
 8000d94:	230f      	movs	r3, #15
 8000d96:	18fc      	adds	r4, r7, r3
 8000d98:	2608      	movs	r6, #8
 8000d9a:	19ba      	adds	r2, r7, r6
 8000d9c:	2306      	movs	r3, #6
 8000d9e:	2108      	movs	r1, #8
 8000da0:	47a8      	blx	r5
 8000da2:	0003      	movs	r3, r0
 8000da4:	7023      	strb	r3, [r4, #0]
                                                      BNO055_ACCEL_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_ACCEL_XYZ_DATA_SIZE);

            /* Data X*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 8000da6:	0031      	movs	r1, r6
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	701a      	strb	r2, [r3, #0]
                                                                        BNO055_ACCEL_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	785a      	ldrb	r2, [r3, #1]
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	705a      	strb	r2, [r3, #1]
                                                                        BNO055_ACCEL_DATA_X_MSB_VALUEX);
            accel->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	785b      	ldrb	r3, [r3, #1]
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b21a      	sxth	r2, r3
            accel->x =
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	801a      	strh	r2, [r3, #0]

            /* Data Y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	789a      	ldrb	r2, [r3, #2]
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	709a      	strb	r2, [r3, #2]
                                                                        BNO055_ACCEL_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	78da      	ldrb	r2, [r3, #3]
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	70da      	strb	r2, [r3, #3]
                                                                        BNO055_ACCEL_DATA_Y_MSB_VALUEY);
            accel->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	78db      	ldrb	r3, [r3, #3]
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	789b      	ldrb	r3, [r3, #2]
 8000dee:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000df0:	4313      	orrs	r3, r2
 8000df2:	b21a      	sxth	r2, r3
            accel->y =
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	805a      	strh	r2, [r3, #2]

            /* Data Z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	791a      	ldrb	r2, [r3, #4]
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	711a      	strb	r2, [r3, #4]
                                                                        BNO055_ACCEL_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	795a      	ldrb	r2, [r3, #5]
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	715a      	strb	r2, [r3, #5]
                                                                        BNO055_ACCEL_DATA_Z_MSB_VALUEZ);
            accel->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	795b      	ldrb	r3, [r3, #5]
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	791b      	ldrb	r3, [r3, #4]
 8000e16:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b21a      	sxth	r2, r3
            accel->z =
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	809a      	strh	r2, [r3, #4]
 8000e20:	e003      	b.n	8000e2a <bno055_read_accel_xyz+0x106>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000e22:	230f      	movs	r3, #15
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	22ff      	movs	r2, #255	@ 0xff
 8000e28:	701a      	strb	r2, [r3, #0]
        }
    }

    return com_rslt;
 8000e2a:	230f      	movs	r3, #15
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b25b      	sxtb	r3, r3
}
 8000e32:	0018      	movs	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b005      	add	sp, #20
 8000e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	2000007c 	.word	0x2000007c

08000e40 <bno055_read_mag_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_mag_xyz(struct bno055_mag_t *mag)
{
 8000e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000e48:	230f      	movs	r3, #15
 8000e4a:	18fb      	adds	r3, r7, r3
 8000e4c:	22ff      	movs	r2, #255	@ 0xff
 8000e4e:	701a      	strb	r2, [r3, #0]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_MAG_XYZ_DATA_SIZE] = {
 8000e50:	2308      	movs	r3, #8
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	0018      	movs	r0, r3
 8000e56:	2306      	movs	r3, #6
 8000e58:	001a      	movs	r2, r3
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	f005 fed6 	bl	8006c0c <memset>
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8000e60:	230e      	movs	r3, #14
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	22ff      	movs	r2, #255	@ 0xff
 8000e66:	701a      	strb	r2, [r3, #0]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000e68:	4b3b      	ldr	r3, [pc, #236]	@ (8000f58 <bno055_read_mag_xyz+0x118>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d102      	bne.n	8000e76 <bno055_read_mag_xyz+0x36>
    {
        return BNO055_E_NULL_PTR;
 8000e70:	237f      	movs	r3, #127	@ 0x7f
 8000e72:	425b      	negs	r3, r3
 8000e74:	e06b      	b.n	8000f4e <bno055_read_mag_xyz+0x10e>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000e76:	4b38      	ldr	r3, [pc, #224]	@ (8000f58 <bno055_read_mag_xyz+0x118>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	791b      	ldrb	r3, [r3, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d006      	beq.n	8000e8e <bno055_read_mag_xyz+0x4e>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000e80:	230e      	movs	r3, #14
 8000e82:	18fc      	adds	r4, r7, r3
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff fef3 	bl	8000c70 <bno055_write_page_id>
 8000e8a:	0003      	movs	r3, r0
 8000e8c:	7023      	strb	r3, [r4, #0]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000e8e:	230e      	movs	r3, #14
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d004      	beq.n	8000ea4 <bno055_read_mag_xyz+0x64>
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f58 <bno055_read_mag_xyz+0x118>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	791b      	ldrb	r3, [r3, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d14c      	bne.n	8000f3e <bno055_read_mag_xyz+0xfe>
        {
            /*Read the six byte value of mag xyz*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f58 <bno055_read_mag_xyz+0x118>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	691d      	ldr	r5, [r3, #16]
 8000eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8000f58 <bno055_read_mag_xyz+0x118>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	7a58      	ldrb	r0, [r3, #9]
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	18fc      	adds	r4, r7, r3
 8000eb4:	2608      	movs	r6, #8
 8000eb6:	19ba      	adds	r2, r7, r6
 8000eb8:	2306      	movs	r3, #6
 8000eba:	210e      	movs	r1, #14
 8000ebc:	47a8      	blx	r5
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	7023      	strb	r3, [r4, #0]
                                                      BNO055_MAG_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_MAG_XYZ_DATA_SIZE);

            /* Data X*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 8000ec2:	0031      	movs	r1, r6
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	781a      	ldrb	r2, [r3, #0]
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	701a      	strb	r2, [r3, #0]
                                                                        BNO055_MAG_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	785a      	ldrb	r2, [r3, #1]
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	705a      	strb	r2, [r3, #1]
                                                                        BNO055_MAG_DATA_X_MSB_VALUEX);
            mag->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	785b      	ldrb	r3, [r3, #1]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b21a      	sxth	r2, r3
            mag->x =
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	801a      	strh	r2, [r3, #0]

            /* Data Y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	789a      	ldrb	r2, [r3, #2]
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	709a      	strb	r2, [r3, #2]
                                                                        BNO055_MAG_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	78da      	ldrb	r2, [r3, #3]
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	70da      	strb	r2, [r3, #3]
                                                                        BNO055_MAG_DATA_Y_MSB_VALUEY);
            mag->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	78db      	ldrb	r3, [r3, #3]
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	789b      	ldrb	r3, [r3, #2]
 8000f0a:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b21a      	sxth	r2, r3
            mag->y =
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	805a      	strh	r2, [r3, #2]

            /* Data Z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	791a      	ldrb	r2, [r3, #4]
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	711a      	strb	r2, [r3, #4]
                                                                        BNO055_MAG_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	795a      	ldrb	r2, [r3, #5]
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	715a      	strb	r2, [r3, #5]
                                                                        BNO055_MAG_DATA_Z_MSB_VALUEZ);
            mag->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	795b      	ldrb	r3, [r3, #5]
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	791b      	ldrb	r3, [r3, #4]
 8000f32:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000f34:	4313      	orrs	r3, r2
 8000f36:	b21a      	sxth	r2, r3
            mag->z =
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	809a      	strh	r2, [r3, #4]
 8000f3c:	e003      	b.n	8000f46 <bno055_read_mag_xyz+0x106>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000f3e:	230f      	movs	r3, #15
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	22ff      	movs	r2, #255	@ 0xff
 8000f44:	701a      	strb	r2, [r3, #0]
        }
    }

    return com_rslt;
 8000f46:	230f      	movs	r3, #15
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b25b      	sxtb	r3, r3
}
 8000f4e:	0018      	movs	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b005      	add	sp, #20
 8000f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	2000007c 	.word	0x2000007c

08000f5c <bno055_read_gyro_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_gyro_xyz(struct bno055_gyro_t *gyro)
{
 8000f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000f64:	230f      	movs	r3, #15
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	22ff      	movs	r2, #255	@ 0xff
 8000f6a:	701a      	strb	r2, [r3, #0]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_GYRO_XYZ_DATA_SIZE] = {
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	0018      	movs	r0, r3
 8000f72:	2306      	movs	r3, #6
 8000f74:	001a      	movs	r2, r3
 8000f76:	2100      	movs	r1, #0
 8000f78:	f005 fe48 	bl	8006c0c <memset>
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8000f7c:	230e      	movs	r3, #14
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	22ff      	movs	r2, #255	@ 0xff
 8000f82:	701a      	strb	r2, [r3, #0]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000f84:	4b3b      	ldr	r3, [pc, #236]	@ (8001074 <bno055_read_gyro_xyz+0x118>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <bno055_read_gyro_xyz+0x36>
    {
        return BNO055_E_NULL_PTR;
 8000f8c:	237f      	movs	r3, #127	@ 0x7f
 8000f8e:	425b      	negs	r3, r3
 8000f90:	e06b      	b.n	800106a <bno055_read_gyro_xyz+0x10e>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000f92:	4b38      	ldr	r3, [pc, #224]	@ (8001074 <bno055_read_gyro_xyz+0x118>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	791b      	ldrb	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d006      	beq.n	8000faa <bno055_read_gyro_xyz+0x4e>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000f9c:	230e      	movs	r3, #14
 8000f9e:	18fc      	adds	r4, r7, r3
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f7ff fe65 	bl	8000c70 <bno055_write_page_id>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	7023      	strb	r3, [r4, #0]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000faa:	230e      	movs	r3, #14
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d004      	beq.n	8000fc0 <bno055_read_gyro_xyz+0x64>
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001074 <bno055_read_gyro_xyz+0x118>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	791b      	ldrb	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d14c      	bne.n	800105a <bno055_read_gyro_xyz+0xfe>
        {
            /* Read the six bytes data of gyro xyz*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <bno055_read_gyro_xyz+0x118>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	691d      	ldr	r5, [r3, #16]
 8000fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001074 <bno055_read_gyro_xyz+0x118>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	7a58      	ldrb	r0, [r3, #9]
 8000fcc:	230f      	movs	r3, #15
 8000fce:	18fc      	adds	r4, r7, r3
 8000fd0:	2608      	movs	r6, #8
 8000fd2:	19ba      	adds	r2, r7, r6
 8000fd4:	2306      	movs	r3, #6
 8000fd6:	2114      	movs	r1, #20
 8000fd8:	47a8      	blx	r5
 8000fda:	0003      	movs	r3, r0
 8000fdc:	7023      	strb	r3, [r4, #0]
                                                      BNO055_GYRO_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_GYRO_XYZ_DATA_SIZE);

            /* Data x*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 8000fde:	0031      	movs	r1, r6
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	781a      	ldrb	r2, [r3, #0]
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	701a      	strb	r2, [r3, #0]
                                                                        BNO055_GYRO_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	785a      	ldrb	r2, [r3, #1]
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	705a      	strb	r2, [r3, #1]
                                                                        BNO055_GYRO_DATA_X_MSB_VALUEX);
            gyro->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	785b      	ldrb	r3, [r3, #1]
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001000:	4313      	orrs	r3, r2
 8001002:	b21a      	sxth	r2, r3
            gyro->x =
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	801a      	strh	r2, [r3, #0]

            /* Data y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 8001008:	187b      	adds	r3, r7, r1
 800100a:	789a      	ldrb	r2, [r3, #2]
 800100c:	187b      	adds	r3, r7, r1
 800100e:	709a      	strb	r2, [r3, #2]
                                                                        BNO055_GYRO_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 8001010:	187b      	adds	r3, r7, r1
 8001012:	78da      	ldrb	r2, [r3, #3]
 8001014:	187b      	adds	r3, r7, r1
 8001016:	70da      	strb	r2, [r3, #3]
                                                                        BNO055_GYRO_DATA_Y_MSB_VALUEY);
            gyro->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001018:	187b      	adds	r3, r7, r1
 800101a:	78db      	ldrb	r3, [r3, #3]
 800101c:	b25b      	sxtb	r3, r3
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 8001022:	187b      	adds	r3, r7, r1
 8001024:	789b      	ldrb	r3, [r3, #2]
 8001026:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001028:	4313      	orrs	r3, r2
 800102a:	b21a      	sxth	r2, r3
            gyro->y =
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	805a      	strh	r2, [r3, #2]

            /* Data z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 8001030:	187b      	adds	r3, r7, r1
 8001032:	791a      	ldrb	r2, [r3, #4]
 8001034:	187b      	adds	r3, r7, r1
 8001036:	711a      	strb	r2, [r3, #4]
                                                                        BNO055_GYRO_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 8001038:	187b      	adds	r3, r7, r1
 800103a:	795a      	ldrb	r2, [r3, #5]
 800103c:	187b      	adds	r3, r7, r1
 800103e:	715a      	strb	r2, [r3, #5]
                                                                        BNO055_GYRO_DATA_Z_MSB_VALUEZ);
            gyro->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001040:	187b      	adds	r3, r7, r1
 8001042:	795b      	ldrb	r3, [r3, #5]
 8001044:	b25b      	sxtb	r3, r3
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 800104a:	187b      	adds	r3, r7, r1
 800104c:	791b      	ldrb	r3, [r3, #4]
 800104e:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001050:	4313      	orrs	r3, r2
 8001052:	b21a      	sxth	r2, r3
            gyro->z =
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	809a      	strh	r2, [r3, #4]
 8001058:	e003      	b.n	8001062 <bno055_read_gyro_xyz+0x106>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800105a:	230f      	movs	r3, #15
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	22ff      	movs	r2, #255	@ 0xff
 8001060:	701a      	strb	r2, [r3, #0]
        }
    }

    return com_rslt;
 8001062:	230f      	movs	r3, #15
 8001064:	18fb      	adds	r3, r7, r3
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b25b      	sxtb	r3, r3
}
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	b005      	add	sp, #20
 8001070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	2000007c 	.word	0x2000007c

08001078 <bno055_read_euler_hrp>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_euler_hrp(struct bno055_euler_t *euler)
{
 8001078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001080:	230f      	movs	r3, #15
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	22ff      	movs	r2, #255	@ 0xff
 8001086:	701a      	strb	r2, [r3, #0]
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] - p->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] - p->MSB
     */
    u8 data_u8[BNO055_EULER_HRP_DATA_SIZE] = {
 8001088:	2308      	movs	r3, #8
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	0018      	movs	r0, r3
 800108e:	2306      	movs	r3, #6
 8001090:	001a      	movs	r2, r3
 8001092:	2100      	movs	r1, #0
 8001094:	f005 fdba 	bl	8006c0c <memset>
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8001098:	230e      	movs	r3, #14
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	22ff      	movs	r2, #255	@ 0xff
 800109e:	701a      	strb	r2, [r3, #0]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80010a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001190 <bno055_read_euler_hrp+0x118>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <bno055_read_euler_hrp+0x36>
    {
        return BNO055_E_NULL_PTR;
 80010a8:	237f      	movs	r3, #127	@ 0x7f
 80010aa:	425b      	negs	r3, r3
 80010ac:	e06b      	b.n	8001186 <bno055_read_euler_hrp+0x10e>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80010ae:	4b38      	ldr	r3, [pc, #224]	@ (8001190 <bno055_read_euler_hrp+0x118>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	791b      	ldrb	r3, [r3, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d006      	beq.n	80010c6 <bno055_read_euler_hrp+0x4e>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80010b8:	230e      	movs	r3, #14
 80010ba:	18fc      	adds	r4, r7, r3
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff fdd7 	bl	8000c70 <bno055_write_page_id>
 80010c2:	0003      	movs	r3, r0
 80010c4:	7023      	strb	r3, [r4, #0]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80010c6:	230e      	movs	r3, #14
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d004      	beq.n	80010dc <bno055_read_euler_hrp+0x64>
 80010d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001190 <bno055_read_euler_hrp+0x118>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	791b      	ldrb	r3, [r3, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d14c      	bne.n	8001176 <bno055_read_euler_hrp+0xfe>
        {
            /* Read the six byte of Euler hrp data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80010dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <bno055_read_euler_hrp+0x118>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	691d      	ldr	r5, [r3, #16]
 80010e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001190 <bno055_read_euler_hrp+0x118>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	7a58      	ldrb	r0, [r3, #9]
 80010e8:	230f      	movs	r3, #15
 80010ea:	18fc      	adds	r4, r7, r3
 80010ec:	2608      	movs	r6, #8
 80010ee:	19ba      	adds	r2, r7, r6
 80010f0:	2306      	movs	r3, #6
 80010f2:	211a      	movs	r1, #26
 80010f4:	47a8      	blx	r5
 80010f6:	0003      	movs	r3, r0
 80010f8:	7023      	strb	r3, [r4, #0]
                                                      BNO055_EULER_H_LSB_VALUEH_REG,
                                                      data_u8,
                                                      BNO055_EULER_HRP_DATA_SIZE);

            /* Data h*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB] = BNO055_GET_BITSLICE(
 80010fa:	0031      	movs	r1, r6
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	781a      	ldrb	r2, [r3, #0]
 8001100:	187b      	adds	r3, r7, r1
 8001102:	701a      	strb	r2, [r3, #0]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB],
                BNO055_EULER_H_LSB_VALUEH);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB] = BNO055_GET_BITSLICE(
 8001104:	187b      	adds	r3, r7, r1
 8001106:	785a      	ldrb	r2, [r3, #1]
 8001108:	187b      	adds	r3, r7, r1
 800110a:	705a      	strb	r2, [r3, #1]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB],
                BNO055_EULER_H_MSB_VALUEH);
            euler->h =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800110c:	187b      	adds	r3, r7, r1
 800110e:	785b      	ldrb	r3, [r3, #1]
 8001110:	b25b      	sxtb	r3, r3
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB]));
 8001116:	187b      	adds	r3, r7, r1
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800111c:	4313      	orrs	r3, r2
 800111e:	b21a      	sxth	r2, r3
            euler->h =
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	801a      	strh	r2, [r3, #0]

            /* Data r*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] = BNO055_GET_BITSLICE(
 8001124:	187b      	adds	r3, r7, r1
 8001126:	789a      	ldrb	r2, [r3, #2]
 8001128:	187b      	adds	r3, r7, r1
 800112a:	709a      	strb	r2, [r3, #2]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB],
                BNO055_EULER_R_LSB_VALUER);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] = BNO055_GET_BITSLICE(
 800112c:	187b      	adds	r3, r7, r1
 800112e:	78da      	ldrb	r2, [r3, #3]
 8001130:	187b      	adds	r3, r7, r1
 8001132:	70da      	strb	r2, [r3, #3]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB],
                BNO055_EULER_R_MSB_VALUER);
            euler->r =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001134:	187b      	adds	r3, r7, r1
 8001136:	78db      	ldrb	r3, [r3, #3]
 8001138:	b25b      	sxtb	r3, r3
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB]));
 800113e:	187b      	adds	r3, r7, r1
 8001140:	789b      	ldrb	r3, [r3, #2]
 8001142:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001144:	4313      	orrs	r3, r2
 8001146:	b21a      	sxth	r2, r3
            euler->r =
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	805a      	strh	r2, [r3, #2]

            /* Data p*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] = BNO055_GET_BITSLICE(
 800114c:	187b      	adds	r3, r7, r1
 800114e:	791a      	ldrb	r2, [r3, #4]
 8001150:	187b      	adds	r3, r7, r1
 8001152:	711a      	strb	r2, [r3, #4]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB],
                BNO055_EULER_P_LSB_VALUEP);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] = BNO055_GET_BITSLICE(
 8001154:	187b      	adds	r3, r7, r1
 8001156:	795a      	ldrb	r2, [r3, #5]
 8001158:	187b      	adds	r3, r7, r1
 800115a:	715a      	strb	r2, [r3, #5]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB],
                BNO055_EULER_P_MSB_VALUEP);
            euler->p =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800115c:	187b      	adds	r3, r7, r1
 800115e:	795b      	ldrb	r3, [r3, #5]
 8001160:	b25b      	sxtb	r3, r3
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB]));
 8001166:	187b      	adds	r3, r7, r1
 8001168:	791b      	ldrb	r3, [r3, #4]
 800116a:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800116c:	4313      	orrs	r3, r2
 800116e:	b21a      	sxth	r2, r3
            euler->p =
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	809a      	strh	r2, [r3, #4]
 8001174:	e003      	b.n	800117e <bno055_read_euler_hrp+0x106>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001176:	230f      	movs	r3, #15
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	22ff      	movs	r2, #255	@ 0xff
 800117c:	701a      	strb	r2, [r3, #0]
        }
    }

    return com_rslt;
 800117e:	230f      	movs	r3, #15
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b25b      	sxtb	r3, r3
}
 8001186:	0018      	movs	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	b005      	add	sp, #20
 800118c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	2000007c 	.word	0x2000007c

08001194 <bno055_read_gravity_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_gravity_xyz(struct bno055_gravity_t *gravity)
{
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800119c:	230f      	movs	r3, #15
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	22ff      	movs	r2, #255	@ 0xff
 80011a2:	701a      	strb	r2, [r3, #0]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_GRAVITY_XYZ_DATA_SIZE] = {
 80011a4:	2308      	movs	r3, #8
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	0018      	movs	r0, r3
 80011aa:	2306      	movs	r3, #6
 80011ac:	001a      	movs	r2, r3
 80011ae:	2100      	movs	r1, #0
 80011b0:	f005 fd2c 	bl	8006c0c <memset>
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 80011b4:	230e      	movs	r3, #14
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	22ff      	movs	r2, #255	@ 0xff
 80011ba:	701a      	strb	r2, [r3, #0]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80011bc:	4b3b      	ldr	r3, [pc, #236]	@ (80012ac <bno055_read_gravity_xyz+0x118>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <bno055_read_gravity_xyz+0x36>
    {
        return BNO055_E_NULL_PTR;
 80011c4:	237f      	movs	r3, #127	@ 0x7f
 80011c6:	425b      	negs	r3, r3
 80011c8:	e06b      	b.n	80012a2 <bno055_read_gravity_xyz+0x10e>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80011ca:	4b38      	ldr	r3, [pc, #224]	@ (80012ac <bno055_read_gravity_xyz+0x118>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	791b      	ldrb	r3, [r3, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <bno055_read_gravity_xyz+0x4e>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80011d4:	230e      	movs	r3, #14
 80011d6:	18fc      	adds	r4, r7, r3
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fd49 	bl	8000c70 <bno055_write_page_id>
 80011de:	0003      	movs	r3, r0
 80011e0:	7023      	strb	r3, [r4, #0]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80011e2:	230e      	movs	r3, #14
 80011e4:	18fb      	adds	r3, r7, r3
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d004      	beq.n	80011f8 <bno055_read_gravity_xyz+0x64>
 80011ee:	4b2f      	ldr	r3, [pc, #188]	@ (80012ac <bno055_read_gravity_xyz+0x118>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	791b      	ldrb	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d14c      	bne.n	8001292 <bno055_read_gravity_xyz+0xfe>
        {
            /* Read the six byte value
             * of gravity xyz data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80011f8:	4b2c      	ldr	r3, [pc, #176]	@ (80012ac <bno055_read_gravity_xyz+0x118>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691d      	ldr	r5, [r3, #16]
 80011fe:	4b2b      	ldr	r3, [pc, #172]	@ (80012ac <bno055_read_gravity_xyz+0x118>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	7a58      	ldrb	r0, [r3, #9]
 8001204:	230f      	movs	r3, #15
 8001206:	18fc      	adds	r4, r7, r3
 8001208:	2608      	movs	r6, #8
 800120a:	19ba      	adds	r2, r7, r6
 800120c:	2306      	movs	r3, #6
 800120e:	212e      	movs	r1, #46	@ 0x2e
 8001210:	47a8      	blx	r5
 8001212:	0003      	movs	r3, r0
 8001214:	7023      	strb	r3, [r4, #0]
                                                      BNO055_GRAVITY_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_GRAVITY_XYZ_DATA_SIZE);

            /* Data x*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 8001216:	0031      	movs	r1, r6
 8001218:	187b      	adds	r3, r7, r1
 800121a:	781a      	ldrb	r2, [r3, #0]
 800121c:	187b      	adds	r3, r7, r1
 800121e:	701a      	strb	r2, [r3, #0]
                                                                        BNO055_GRAVITY_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 8001220:	187b      	adds	r3, r7, r1
 8001222:	785a      	ldrb	r2, [r3, #1]
 8001224:	187b      	adds	r3, r7, r1
 8001226:	705a      	strb	r2, [r3, #1]
                                                                        BNO055_GRAVITY_DATA_X_MSB_VALUEX);
            gravity->x =
                (s16)(((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB]) << BNO055_SHIFT_EIGHT_BITS) |
 8001228:	187b      	adds	r3, r7, r1
 800122a:	785b      	ldrb	r3, [r3, #1]
 800122c:	b25b      	sxtb	r3, r3
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8001232:	187b      	adds	r3, r7, r1
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b21b      	sxth	r3, r3
                (s16)(((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB]) << BNO055_SHIFT_EIGHT_BITS) |
 8001238:	4313      	orrs	r3, r2
 800123a:	b21a      	sxth	r2, r3
            gravity->x =
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	801a      	strh	r2, [r3, #0]

            /* Data y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 8001240:	187b      	adds	r3, r7, r1
 8001242:	789a      	ldrb	r2, [r3, #2]
 8001244:	187b      	adds	r3, r7, r1
 8001246:	709a      	strb	r2, [r3, #2]
                                                                        BNO055_GRAVITY_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 8001248:	187b      	adds	r3, r7, r1
 800124a:	78da      	ldrb	r2, [r3, #3]
 800124c:	187b      	adds	r3, r7, r1
 800124e:	70da      	strb	r2, [r3, #3]
                                                                        BNO055_GRAVITY_DATA_Y_MSB_VALUEY);
            gravity->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001250:	187b      	adds	r3, r7, r1
 8001252:	78db      	ldrb	r3, [r3, #3]
 8001254:	b25b      	sxtb	r3, r3
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 800125a:	187b      	adds	r3, r7, r1
 800125c:	789b      	ldrb	r3, [r3, #2]
 800125e:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001260:	4313      	orrs	r3, r2
 8001262:	b21a      	sxth	r2, r3
            gravity->y =
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	805a      	strh	r2, [r3, #2]

            /* Data z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 8001268:	187b      	adds	r3, r7, r1
 800126a:	791a      	ldrb	r2, [r3, #4]
 800126c:	187b      	adds	r3, r7, r1
 800126e:	711a      	strb	r2, [r3, #4]
                                                                        BNO055_GRAVITY_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 8001270:	187b      	adds	r3, r7, r1
 8001272:	795a      	ldrb	r2, [r3, #5]
 8001274:	187b      	adds	r3, r7, r1
 8001276:	715a      	strb	r2, [r3, #5]
                                                                        BNO055_GRAVITY_DATA_Z_MSB_VALUEZ);
            gravity->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001278:	187b      	adds	r3, r7, r1
 800127a:	795b      	ldrb	r3, [r3, #5]
 800127c:	b25b      	sxtb	r3, r3
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 8001282:	187b      	adds	r3, r7, r1
 8001284:	791b      	ldrb	r3, [r3, #4]
 8001286:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001288:	4313      	orrs	r3, r2
 800128a:	b21a      	sxth	r2, r3
            gravity->z =
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	809a      	strh	r2, [r3, #4]
 8001290:	e003      	b.n	800129a <bno055_read_gravity_xyz+0x106>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001292:	230f      	movs	r3, #15
 8001294:	18fb      	adds	r3, r7, r3
 8001296:	22ff      	movs	r2, #255	@ 0xff
 8001298:	701a      	strb	r2, [r3, #0]
        }
    }

    return com_rslt;
 800129a:	230f      	movs	r3, #15
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b25b      	sxtb	r3, r3
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b005      	add	sp, #20
 80012a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	2000007c 	.word	0x2000007c

080012b0 <bno055_convert_double_accel_xyz_mg>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_accel_xyz_mg(struct bno055_accel_double_t *accel_xyz)
{
 80012b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80012b8:	2117      	movs	r1, #23
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	22ff      	movs	r2, #255	@ 0xff
 80012be:	701a      	strb	r2, [r3, #0]
    struct bno055_accel_t reg_accel_xyz = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 80012c0:	2010      	movs	r0, #16
 80012c2:	183b      	adds	r3, r7, r0
 80012c4:	2200      	movs	r2, #0
 80012c6:	801a      	strh	r2, [r3, #0]
 80012c8:	183b      	adds	r3, r7, r0
 80012ca:	2200      	movs	r2, #0
 80012cc:	805a      	strh	r2, [r3, #2]
 80012ce:	183b      	adds	r3, r7, r0
 80012d0:	2200      	movs	r2, #0
 80012d2:	809a      	strh	r2, [r3, #4]
    u8 accel_unit_u8 = BNO055_INIT_VALUE;
 80012d4:	260f      	movs	r6, #15
 80012d6:	19bb      	adds	r3, r7, r6
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]

    /* Read the current accel unit and set the
     * unit as m/s2 if the unit is in mg*/
    com_rslt = bno055_get_accel_unit(&accel_unit_u8);
 80012dc:	000d      	movs	r5, r1
 80012de:	187c      	adds	r4, r7, r1
 80012e0:	19bb      	adds	r3, r7, r6
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 fa22 	bl	800172c <bno055_get_accel_unit>
 80012e8:	0003      	movs	r3, r0
 80012ea:	7023      	strb	r3, [r4, #0]
    if (accel_unit_u8 != BNO055_ACCEL_UNIT_MG)
 80012ec:	19bb      	adds	r3, r7, r6
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d00a      	beq.n	800130a <bno055_convert_double_accel_xyz_mg+0x5a>
    {
        com_rslt += bno055_set_accel_unit(BNO055_ACCEL_UNIT_MG);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f000 fa6d 	bl	80017d4 <bno055_set_accel_unit>
 80012fa:	0003      	movs	r3, r0
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	197b      	adds	r3, r7, r5
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	18d3      	adds	r3, r2, r3
 8001304:	b2da      	uxtb	r2, r3
 8001306:	197b      	adds	r3, r7, r5
 8001308:	701a      	strb	r2, [r3, #0]
    }
    if (com_rslt == BNO055_SUCCESS)
 800130a:	2417      	movs	r4, #23
 800130c:	193b      	adds	r3, r7, r4
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b25b      	sxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d138      	bne.n	8001388 <bno055_convert_double_accel_xyz_mg+0xd8>
    {
        /* Read the accel raw xyz data*/
        com_rslt += bno055_read_accel_xyz(&reg_accel_xyz);
 8001316:	2510      	movs	r5, #16
 8001318:	197b      	adds	r3, r7, r5
 800131a:	0018      	movs	r0, r3
 800131c:	f7ff fd02 	bl	8000d24 <bno055_read_accel_xyz>
 8001320:	0003      	movs	r3, r0
 8001322:	b2da      	uxtb	r2, r3
 8001324:	193b      	adds	r3, r7, r4
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	18d3      	adds	r3, r2, r3
 800132a:	b2da      	uxtb	r2, r3
 800132c:	193b      	adds	r3, r7, r4
 800132e:	701a      	strb	r2, [r3, #0]
        if (com_rslt == BNO055_SUCCESS)
 8001330:	193b      	adds	r3, r7, r4
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b25b      	sxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d121      	bne.n	800137e <bno055_convert_double_accel_xyz_mg+0xce>
        {
            /* Convert raw xyz to mg*/
            accel_xyz->x = (double)(reg_accel_xyz.x / BNO055_ACCEL_DIV_MG);
 800133a:	197b      	adds	r3, r7, r5
 800133c:	2200      	movs	r2, #0
 800133e:	5e9b      	ldrsh	r3, [r3, r2]
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff facb 	bl	80008dc <__aeabi_i2d>
 8001346:	0002      	movs	r2, r0
 8001348:	000b      	movs	r3, r1
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	600a      	str	r2, [r1, #0]
 800134e:	604b      	str	r3, [r1, #4]
            accel_xyz->y = (double)(reg_accel_xyz.y / BNO055_ACCEL_DIV_MG);
 8001350:	197b      	adds	r3, r7, r5
 8001352:	2202      	movs	r2, #2
 8001354:	5e9b      	ldrsh	r3, [r3, r2]
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff fac0 	bl	80008dc <__aeabi_i2d>
 800135c:	0002      	movs	r2, r0
 800135e:	000b      	movs	r3, r1
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	608a      	str	r2, [r1, #8]
 8001364:	60cb      	str	r3, [r1, #12]
            accel_xyz->z = (double)(reg_accel_xyz.z / BNO055_ACCEL_DIV_MG);
 8001366:	197b      	adds	r3, r7, r5
 8001368:	2204      	movs	r2, #4
 800136a:	5e9b      	ldrsh	r3, [r3, r2]
 800136c:	0018      	movs	r0, r3
 800136e:	f7ff fab5 	bl	80008dc <__aeabi_i2d>
 8001372:	0002      	movs	r2, r0
 8001374:	000b      	movs	r3, r1
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	610a      	str	r2, [r1, #16]
 800137a:	614b      	str	r3, [r1, #20]
 800137c:	e008      	b.n	8001390 <bno055_convert_double_accel_xyz_mg+0xe0>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800137e:	2317      	movs	r3, #23
 8001380:	18fb      	adds	r3, r7, r3
 8001382:	22ff      	movs	r2, #255	@ 0xff
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	e003      	b.n	8001390 <bno055_convert_double_accel_xyz_mg+0xe0>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 8001388:	2317      	movs	r3, #23
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	22ff      	movs	r2, #255	@ 0xff
 800138e:	701a      	strb	r2, [r3, #0]
    }

    return com_rslt;
 8001390:	2317      	movs	r3, #23
 8001392:	18fb      	adds	r3, r7, r3
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b25b      	sxtb	r3, r3
}
 8001398:	0018      	movs	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	b007      	add	sp, #28
 800139e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013a0 <bno055_convert_double_mag_xyz_uT>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_mag_xyz_uT(struct bno055_mag_double_t *mag_xyz)
{
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80013a8:	210f      	movs	r1, #15
 80013aa:	187b      	adds	r3, r7, r1
 80013ac:	22ff      	movs	r2, #255	@ 0xff
 80013ae:	701a      	strb	r2, [r3, #0]
    struct bno055_mag_t reg_mag_xyz = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 80013b0:	2508      	movs	r5, #8
 80013b2:	197b      	adds	r3, r7, r5
 80013b4:	2200      	movs	r2, #0
 80013b6:	801a      	strh	r2, [r3, #0]
 80013b8:	197b      	adds	r3, r7, r5
 80013ba:	2200      	movs	r2, #0
 80013bc:	805a      	strh	r2, [r3, #2]
 80013be:	197b      	adds	r3, r7, r5
 80013c0:	2200      	movs	r2, #0
 80013c2:	809a      	strh	r2, [r3, #4]

    /* Read raw mag xyz data */
    com_rslt = bno055_read_mag_xyz(&reg_mag_xyz);
 80013c4:	000e      	movs	r6, r1
 80013c6:	187c      	adds	r4, r7, r1
 80013c8:	197b      	adds	r3, r7, r5
 80013ca:	0018      	movs	r0, r3
 80013cc:	f7ff fd38 	bl	8000e40 <bno055_read_mag_xyz>
 80013d0:	0003      	movs	r3, r0
 80013d2:	7023      	strb	r3, [r4, #0]
    if (com_rslt == BNO055_SUCCESS)
 80013d4:	19bb      	adds	r3, r7, r6
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d12d      	bne.n	800143a <bno055_convert_double_mag_xyz_uT+0x9a>
    {
        /* Convert raw mag xyz to microTesla*/
        mag_xyz->x = (double)(reg_mag_xyz.x / BNO055_MAG_DIV_UT);
 80013de:	197b      	adds	r3, r7, r5
 80013e0:	2200      	movs	r2, #0
 80013e2:	5e9b      	ldrsh	r3, [r3, r2]
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff fa79 	bl	80008dc <__aeabi_i2d>
 80013ea:	2200      	movs	r2, #0
 80013ec:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <bno055_convert_double_mag_xyz_uT+0xb4>)
 80013ee:	f7fe ff21 	bl	8000234 <__aeabi_ddiv>
 80013f2:	0002      	movs	r2, r0
 80013f4:	000b      	movs	r3, r1
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	600a      	str	r2, [r1, #0]
 80013fa:	604b      	str	r3, [r1, #4]
        mag_xyz->y = (double)(reg_mag_xyz.y / BNO055_MAG_DIV_UT);
 80013fc:	197b      	adds	r3, r7, r5
 80013fe:	2202      	movs	r2, #2
 8001400:	5e9b      	ldrsh	r3, [r3, r2]
 8001402:	0018      	movs	r0, r3
 8001404:	f7ff fa6a 	bl	80008dc <__aeabi_i2d>
 8001408:	2200      	movs	r2, #0
 800140a:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <bno055_convert_double_mag_xyz_uT+0xb4>)
 800140c:	f7fe ff12 	bl	8000234 <__aeabi_ddiv>
 8001410:	0002      	movs	r2, r0
 8001412:	000b      	movs	r3, r1
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	608a      	str	r2, [r1, #8]
 8001418:	60cb      	str	r3, [r1, #12]
        mag_xyz->z = (double)(reg_mag_xyz.z / BNO055_MAG_DIV_UT);
 800141a:	197b      	adds	r3, r7, r5
 800141c:	2204      	movs	r2, #4
 800141e:	5e9b      	ldrsh	r3, [r3, r2]
 8001420:	0018      	movs	r0, r3
 8001422:	f7ff fa5b 	bl	80008dc <__aeabi_i2d>
 8001426:	2200      	movs	r2, #0
 8001428:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <bno055_convert_double_mag_xyz_uT+0xb4>)
 800142a:	f7fe ff03 	bl	8000234 <__aeabi_ddiv>
 800142e:	0002      	movs	r2, r0
 8001430:	000b      	movs	r3, r1
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	610a      	str	r2, [r1, #16]
 8001436:	614b      	str	r3, [r1, #20]
 8001438:	e003      	b.n	8001442 <bno055_convert_double_mag_xyz_uT+0xa2>
    }
    else
    {
        com_rslt = BNO055_ERROR;
 800143a:	230f      	movs	r3, #15
 800143c:	18fb      	adds	r3, r7, r3
 800143e:	22ff      	movs	r2, #255	@ 0xff
 8001440:	701a      	strb	r2, [r3, #0]
    }

    return com_rslt;
 8001442:	230f      	movs	r3, #15
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	b25b      	sxtb	r3, r3
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b005      	add	sp, #20
 8001450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	40300000 	.word	0x40300000

08001458 <bno055_convert_double_gyro_xyz_dps>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_gyro_xyz_dps(struct bno055_gyro_double_t *gyro_xyz)
{
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001460:	2117      	movs	r1, #23
 8001462:	187b      	adds	r3, r7, r1
 8001464:	22ff      	movs	r2, #255	@ 0xff
 8001466:	701a      	strb	r2, [r3, #0]
    struct bno055_gyro_t reg_gyro_xyz = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8001468:	2010      	movs	r0, #16
 800146a:	183b      	adds	r3, r7, r0
 800146c:	2200      	movs	r2, #0
 800146e:	801a      	strh	r2, [r3, #0]
 8001470:	183b      	adds	r3, r7, r0
 8001472:	2200      	movs	r2, #0
 8001474:	805a      	strh	r2, [r3, #2]
 8001476:	183b      	adds	r3, r7, r0
 8001478:	2200      	movs	r2, #0
 800147a:	809a      	strh	r2, [r3, #4]
    u8 gyro_unit_u8 = BNO055_INIT_VALUE;
 800147c:	260f      	movs	r6, #15
 800147e:	19bb      	adds	r3, r7, r6
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]

    /* Read the current gyro unit and set the
     * unit as dps if the unit is in rps */
    com_rslt = bno055_get_gyro_unit(&gyro_unit_u8);
 8001484:	000d      	movs	r5, r1
 8001486:	187c      	adds	r4, r7, r1
 8001488:	19bb      	adds	r3, r7, r6
 800148a:	0018      	movs	r0, r3
 800148c:	f000 fa44 	bl	8001918 <bno055_get_gyro_unit>
 8001490:	0003      	movs	r3, r0
 8001492:	7023      	strb	r3, [r4, #0]
    if (gyro_unit_u8 != BNO055_GYRO_UNIT_DPS)
 8001494:	19bb      	adds	r3, r7, r6
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00a      	beq.n	80014b2 <bno055_convert_double_gyro_xyz_dps+0x5a>
    {
        com_rslt += bno055_set_gyro_unit(BNO055_GYRO_UNIT_DPS);
 800149c:	2000      	movs	r0, #0
 800149e:	f000 fa91 	bl	80019c4 <bno055_set_gyro_unit>
 80014a2:	0003      	movs	r3, r0
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	197b      	adds	r3, r7, r5
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	18d3      	adds	r3, r2, r3
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	197b      	adds	r3, r7, r5
 80014b0:	701a      	strb	r2, [r3, #0]
    }
    if (com_rslt == BNO055_SUCCESS)
 80014b2:	2417      	movs	r4, #23
 80014b4:	193b      	adds	r3, r7, r4
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d144      	bne.n	8001548 <bno055_convert_double_gyro_xyz_dps+0xf0>
    {
        /* Read gyro raw xyz data */
        com_rslt += bno055_read_gyro_xyz(&reg_gyro_xyz);
 80014be:	2510      	movs	r5, #16
 80014c0:	197b      	adds	r3, r7, r5
 80014c2:	0018      	movs	r0, r3
 80014c4:	f7ff fd4a 	bl	8000f5c <bno055_read_gyro_xyz>
 80014c8:	0003      	movs	r3, r0
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	193b      	adds	r3, r7, r4
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	18d3      	adds	r3, r2, r3
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	193b      	adds	r3, r7, r4
 80014d6:	701a      	strb	r2, [r3, #0]
        if (com_rslt == BNO055_SUCCESS)
 80014d8:	193b      	adds	r3, r7, r4
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d12d      	bne.n	800153e <bno055_convert_double_gyro_xyz_dps+0xe6>
        {
            /* Convert gyro raw xyz to dps*/
            gyro_xyz->x = (double)(reg_gyro_xyz.x / BNO055_GYRO_DIV_DPS);
 80014e2:	197b      	adds	r3, r7, r5
 80014e4:	2200      	movs	r2, #0
 80014e6:	5e9b      	ldrsh	r3, [r3, r2]
 80014e8:	0018      	movs	r0, r3
 80014ea:	f7ff f9f7 	bl	80008dc <__aeabi_i2d>
 80014ee:	2200      	movs	r2, #0
 80014f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001560 <bno055_convert_double_gyro_xyz_dps+0x108>)
 80014f2:	f7fe fe9f 	bl	8000234 <__aeabi_ddiv>
 80014f6:	0002      	movs	r2, r0
 80014f8:	000b      	movs	r3, r1
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	600a      	str	r2, [r1, #0]
 80014fe:	604b      	str	r3, [r1, #4]
            gyro_xyz->y = (double)(reg_gyro_xyz.y / BNO055_GYRO_DIV_DPS);
 8001500:	197b      	adds	r3, r7, r5
 8001502:	2202      	movs	r2, #2
 8001504:	5e9b      	ldrsh	r3, [r3, r2]
 8001506:	0018      	movs	r0, r3
 8001508:	f7ff f9e8 	bl	80008dc <__aeabi_i2d>
 800150c:	2200      	movs	r2, #0
 800150e:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <bno055_convert_double_gyro_xyz_dps+0x108>)
 8001510:	f7fe fe90 	bl	8000234 <__aeabi_ddiv>
 8001514:	0002      	movs	r2, r0
 8001516:	000b      	movs	r3, r1
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	608a      	str	r2, [r1, #8]
 800151c:	60cb      	str	r3, [r1, #12]
            gyro_xyz->z = (double)(reg_gyro_xyz.z / BNO055_GYRO_DIV_DPS);
 800151e:	197b      	adds	r3, r7, r5
 8001520:	2204      	movs	r2, #4
 8001522:	5e9b      	ldrsh	r3, [r3, r2]
 8001524:	0018      	movs	r0, r3
 8001526:	f7ff f9d9 	bl	80008dc <__aeabi_i2d>
 800152a:	2200      	movs	r2, #0
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <bno055_convert_double_gyro_xyz_dps+0x108>)
 800152e:	f7fe fe81 	bl	8000234 <__aeabi_ddiv>
 8001532:	0002      	movs	r2, r0
 8001534:	000b      	movs	r3, r1
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	610a      	str	r2, [r1, #16]
 800153a:	614b      	str	r3, [r1, #20]
 800153c:	e008      	b.n	8001550 <bno055_convert_double_gyro_xyz_dps+0xf8>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800153e:	2317      	movs	r3, #23
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	22ff      	movs	r2, #255	@ 0xff
 8001544:	701a      	strb	r2, [r3, #0]
 8001546:	e003      	b.n	8001550 <bno055_convert_double_gyro_xyz_dps+0xf8>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 8001548:	2317      	movs	r3, #23
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	22ff      	movs	r2, #255	@ 0xff
 800154e:	701a      	strb	r2, [r3, #0]
    }

    return com_rslt;
 8001550:	2317      	movs	r3, #23
 8001552:	18fb      	adds	r3, r7, r3
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b25b      	sxtb	r3, r3
}
 8001558:	0018      	movs	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	b007      	add	sp, #28
 800155e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001560:	40300000 	.word	0x40300000

08001564 <bno055_convert_double_euler_hpr_deg>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_euler_hpr_deg(struct bno055_euler_double_t *euler_hpr)
{
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800156c:	2117      	movs	r1, #23
 800156e:	187b      	adds	r3, r7, r1
 8001570:	22ff      	movs	r2, #255	@ 0xff
 8001572:	701a      	strb	r2, [r3, #0]
    struct bno055_euler_t reg_euler = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8001574:	2010      	movs	r0, #16
 8001576:	183b      	adds	r3, r7, r0
 8001578:	2200      	movs	r2, #0
 800157a:	801a      	strh	r2, [r3, #0]
 800157c:	183b      	adds	r3, r7, r0
 800157e:	2200      	movs	r2, #0
 8001580:	805a      	strh	r2, [r3, #2]
 8001582:	183b      	adds	r3, r7, r0
 8001584:	2200      	movs	r2, #0
 8001586:	809a      	strh	r2, [r3, #4]
    u8 euler_unit_u8 = BNO055_INIT_VALUE;
 8001588:	260f      	movs	r6, #15
 800158a:	19bb      	adds	r3, r7, r6
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]

    /* Read the current Euler unit and set the
     * unit as degree if the unit is in radians */
    com_rslt = bno055_get_euler_unit(&euler_unit_u8);
 8001590:	000d      	movs	r5, r1
 8001592:	187c      	adds	r4, r7, r1
 8001594:	19bb      	adds	r3, r7, r6
 8001596:	0018      	movs	r0, r3
 8001598:	f000 fab8 	bl	8001b0c <bno055_get_euler_unit>
 800159c:	0003      	movs	r3, r0
 800159e:	7023      	strb	r3, [r4, #0]
    if (euler_unit_u8 != BNO055_EULER_UNIT_DEG)
 80015a0:	19bb      	adds	r3, r7, r6
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00a      	beq.n	80015be <bno055_convert_double_euler_hpr_deg+0x5a>
    {
        com_rslt += bno055_set_euler_unit(BNO055_EULER_UNIT_DEG);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f000 fb05 	bl	8001bb8 <bno055_set_euler_unit>
 80015ae:	0003      	movs	r3, r0
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	197b      	adds	r3, r7, r5
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	18d3      	adds	r3, r2, r3
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	197b      	adds	r3, r7, r5
 80015bc:	701a      	strb	r2, [r3, #0]
    }
    if (com_rslt == BNO055_SUCCESS)
 80015be:	2417      	movs	r4, #23
 80015c0:	193b      	adds	r3, r7, r4
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d144      	bne.n	8001654 <bno055_convert_double_euler_hpr_deg+0xf0>
    {
        /* Read Euler raw h data*/
        com_rslt += bno055_read_euler_hrp(&reg_euler);
 80015ca:	2510      	movs	r5, #16
 80015cc:	197b      	adds	r3, r7, r5
 80015ce:	0018      	movs	r0, r3
 80015d0:	f7ff fd52 	bl	8001078 <bno055_read_euler_hrp>
 80015d4:	0003      	movs	r3, r0
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	193b      	adds	r3, r7, r4
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	18d3      	adds	r3, r2, r3
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	193b      	adds	r3, r7, r4
 80015e2:	701a      	strb	r2, [r3, #0]
        if (com_rslt == BNO055_SUCCESS)
 80015e4:	193b      	adds	r3, r7, r4
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d12d      	bne.n	800164a <bno055_convert_double_euler_hpr_deg+0xe6>
        {
            /* Convert raw Euler hrp to degree*/
            euler_hpr->h = (double)(reg_euler.h / BNO055_EULER_DIV_DEG);
 80015ee:	197b      	adds	r3, r7, r5
 80015f0:	2200      	movs	r2, #0
 80015f2:	5e9b      	ldrsh	r3, [r3, r2]
 80015f4:	0018      	movs	r0, r3
 80015f6:	f7ff f971 	bl	80008dc <__aeabi_i2d>
 80015fa:	2200      	movs	r2, #0
 80015fc:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <bno055_convert_double_euler_hpr_deg+0x108>)
 80015fe:	f7fe fe19 	bl	8000234 <__aeabi_ddiv>
 8001602:	0002      	movs	r2, r0
 8001604:	000b      	movs	r3, r1
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	600a      	str	r2, [r1, #0]
 800160a:	604b      	str	r3, [r1, #4]
            euler_hpr->p = (double)(reg_euler.p / BNO055_EULER_DIV_DEG);
 800160c:	197b      	adds	r3, r7, r5
 800160e:	2204      	movs	r2, #4
 8001610:	5e9b      	ldrsh	r3, [r3, r2]
 8001612:	0018      	movs	r0, r3
 8001614:	f7ff f962 	bl	80008dc <__aeabi_i2d>
 8001618:	2200      	movs	r2, #0
 800161a:	4b14      	ldr	r3, [pc, #80]	@ (800166c <bno055_convert_double_euler_hpr_deg+0x108>)
 800161c:	f7fe fe0a 	bl	8000234 <__aeabi_ddiv>
 8001620:	0002      	movs	r2, r0
 8001622:	000b      	movs	r3, r1
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	610a      	str	r2, [r1, #16]
 8001628:	614b      	str	r3, [r1, #20]
            euler_hpr->r = (double)(reg_euler.r / BNO055_EULER_DIV_DEG);
 800162a:	197b      	adds	r3, r7, r5
 800162c:	2202      	movs	r2, #2
 800162e:	5e9b      	ldrsh	r3, [r3, r2]
 8001630:	0018      	movs	r0, r3
 8001632:	f7ff f953 	bl	80008dc <__aeabi_i2d>
 8001636:	2200      	movs	r2, #0
 8001638:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <bno055_convert_double_euler_hpr_deg+0x108>)
 800163a:	f7fe fdfb 	bl	8000234 <__aeabi_ddiv>
 800163e:	0002      	movs	r2, r0
 8001640:	000b      	movs	r3, r1
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	608a      	str	r2, [r1, #8]
 8001646:	60cb      	str	r3, [r1, #12]
 8001648:	e008      	b.n	800165c <bno055_convert_double_euler_hpr_deg+0xf8>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800164a:	2317      	movs	r3, #23
 800164c:	18fb      	adds	r3, r7, r3
 800164e:	22ff      	movs	r2, #255	@ 0xff
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	e003      	b.n	800165c <bno055_convert_double_euler_hpr_deg+0xf8>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 8001654:	2317      	movs	r3, #23
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	22ff      	movs	r2, #255	@ 0xff
 800165a:	701a      	strb	r2, [r3, #0]
    }

    return com_rslt;
 800165c:	2317      	movs	r3, #23
 800165e:	18fb      	adds	r3, r7, r3
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b25b      	sxtb	r3, r3
}
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	b007      	add	sp, #28
 800166a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166c:	40300000 	.word	0x40300000

08001670 <bno055_convert_double_gravity_xyz_msq>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_gravity_xyz_msq(struct bno055_gravity_double_t *gravity_xyz)
{
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001678:	210f      	movs	r1, #15
 800167a:	187b      	adds	r3, r7, r1
 800167c:	22ff      	movs	r2, #255	@ 0xff
 800167e:	701a      	strb	r2, [r3, #0]
    struct bno055_gravity_t reg_gravity_xyz = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8001680:	2508      	movs	r5, #8
 8001682:	197b      	adds	r3, r7, r5
 8001684:	2200      	movs	r2, #0
 8001686:	801a      	strh	r2, [r3, #0]
 8001688:	197b      	adds	r3, r7, r5
 800168a:	2200      	movs	r2, #0
 800168c:	805a      	strh	r2, [r3, #2]
 800168e:	197b      	adds	r3, r7, r5
 8001690:	2200      	movs	r2, #0
 8001692:	809a      	strh	r2, [r3, #4]

    /* Read raw gravity of xyz */
    com_rslt = bno055_read_gravity_xyz(&reg_gravity_xyz);
 8001694:	000e      	movs	r6, r1
 8001696:	187c      	adds	r4, r7, r1
 8001698:	197b      	adds	r3, r7, r5
 800169a:	0018      	movs	r0, r3
 800169c:	f7ff fd7a 	bl	8001194 <bno055_read_gravity_xyz>
 80016a0:	0003      	movs	r3, r0
 80016a2:	7023      	strb	r3, [r4, #0]
    if (com_rslt == BNO055_SUCCESS)
 80016a4:	19bb      	adds	r3, r7, r6
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d12d      	bne.n	800170a <bno055_convert_double_gravity_xyz_msq+0x9a>
    {
        /* Convert raw gravity of xyz to m/s2 */
        gravity_xyz->x = (double)(reg_gravity_xyz.x / BNO055_GRAVITY_DIV_MSQ);
 80016ae:	197b      	adds	r3, r7, r5
 80016b0:	2200      	movs	r2, #0
 80016b2:	5e9b      	ldrsh	r3, [r3, r2]
 80016b4:	0018      	movs	r0, r3
 80016b6:	f7ff f911 	bl	80008dc <__aeabi_i2d>
 80016ba:	2200      	movs	r2, #0
 80016bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001728 <bno055_convert_double_gravity_xyz_msq+0xb8>)
 80016be:	f7fe fdb9 	bl	8000234 <__aeabi_ddiv>
 80016c2:	0002      	movs	r2, r0
 80016c4:	000b      	movs	r3, r1
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	600a      	str	r2, [r1, #0]
 80016ca:	604b      	str	r3, [r1, #4]
        gravity_xyz->y = (double)(reg_gravity_xyz.y / BNO055_GRAVITY_DIV_MSQ);
 80016cc:	197b      	adds	r3, r7, r5
 80016ce:	2202      	movs	r2, #2
 80016d0:	5e9b      	ldrsh	r3, [r3, r2]
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7ff f902 	bl	80008dc <__aeabi_i2d>
 80016d8:	2200      	movs	r2, #0
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <bno055_convert_double_gravity_xyz_msq+0xb8>)
 80016dc:	f7fe fdaa 	bl	8000234 <__aeabi_ddiv>
 80016e0:	0002      	movs	r2, r0
 80016e2:	000b      	movs	r3, r1
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	608a      	str	r2, [r1, #8]
 80016e8:	60cb      	str	r3, [r1, #12]
        gravity_xyz->z = (double)(reg_gravity_xyz.z / BNO055_GRAVITY_DIV_MSQ);
 80016ea:	197b      	adds	r3, r7, r5
 80016ec:	2204      	movs	r2, #4
 80016ee:	5e9b      	ldrsh	r3, [r3, r2]
 80016f0:	0018      	movs	r0, r3
 80016f2:	f7ff f8f3 	bl	80008dc <__aeabi_i2d>
 80016f6:	2200      	movs	r2, #0
 80016f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <bno055_convert_double_gravity_xyz_msq+0xb8>)
 80016fa:	f7fe fd9b 	bl	8000234 <__aeabi_ddiv>
 80016fe:	0002      	movs	r2, r0
 8001700:	000b      	movs	r3, r1
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	610a      	str	r2, [r1, #16]
 8001706:	614b      	str	r3, [r1, #20]
 8001708:	e006      	b.n	8001718 <bno055_convert_double_gravity_xyz_msq+0xa8>
    }
    else
    {
        com_rslt += BNO055_ERROR;
 800170a:	210f      	movs	r1, #15
 800170c:	187b      	adds	r3, r7, r1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	3b01      	subs	r3, #1
 8001712:	b2da      	uxtb	r2, r3
 8001714:	187b      	adds	r3, r7, r1
 8001716:	701a      	strb	r2, [r3, #0]
    }

    return com_rslt;
 8001718:	230f      	movs	r3, #15
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b25b      	sxtb	r3, r3
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b005      	add	sp, #20
 8001726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001728:	40590000 	.word	0x40590000

0800172c <bno055_get_accel_unit>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_accel_unit(u8 *accel_unit_u8)
{
 800172c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001734:	230f      	movs	r3, #15
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	22ff      	movs	r2, #255	@ 0xff
 800173a:	701a      	strb	r2, [r3, #0]
    u8 data_u8r = BNO055_INIT_VALUE;
 800173c:	230d      	movs	r3, #13
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
    s8 stat_s8 = BNO055_ERROR;
 8001744:	230e      	movs	r3, #14
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	22ff      	movs	r2, #255	@ 0xff
 800174a:	701a      	strb	r2, [r3, #0]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800174c:	4b20      	ldr	r3, [pc, #128]	@ (80017d0 <bno055_get_accel_unit+0xa4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <bno055_get_accel_unit+0x2e>
    {
        return BNO055_E_NULL_PTR;
 8001754:	237f      	movs	r3, #127	@ 0x7f
 8001756:	425b      	negs	r3, r3
 8001758:	e035      	b.n	80017c6 <bno055_get_accel_unit+0x9a>
    }
    else
    {
        /*condition check for page, accel unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 800175a:	4b1d      	ldr	r3, [pc, #116]	@ (80017d0 <bno055_get_accel_unit+0xa4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	791b      	ldrb	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <bno055_get_accel_unit+0x46>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001764:	230e      	movs	r3, #14
 8001766:	18fc      	adds	r4, r7, r3
 8001768:	2000      	movs	r0, #0
 800176a:	f7ff fa81 	bl	8000c70 <bno055_write_page_id>
 800176e:	0003      	movs	r3, r0
 8001770:	7023      	strb	r3, [r4, #0]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001772:	230e      	movs	r3, #14
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b25b      	sxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d004      	beq.n	8001788 <bno055_get_accel_unit+0x5c>
 800177e:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <bno055_get_accel_unit+0xa4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	791b      	ldrb	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d116      	bne.n	80017b6 <bno055_get_accel_unit+0x8a>
        {
            /* Read the accel unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001788:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <bno055_get_accel_unit+0xa4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691d      	ldr	r5, [r3, #16]
 800178e:	4b10      	ldr	r3, [pc, #64]	@ (80017d0 <bno055_get_accel_unit+0xa4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	7a58      	ldrb	r0, [r3, #9]
 8001794:	230f      	movs	r3, #15
 8001796:	18fc      	adds	r4, r7, r3
 8001798:	260d      	movs	r6, #13
 800179a:	19ba      	adds	r2, r7, r6
 800179c:	2301      	movs	r3, #1
 800179e:	213b      	movs	r1, #59	@ 0x3b
 80017a0:	47a8      	blx	r5
 80017a2:	0003      	movs	r3, r0
 80017a4:	7023      	strb	r3, [r4, #0]
                                                      BNO055_ACCEL_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *accel_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_ACCEL_UNIT);
 80017a6:	19bb      	adds	r3, r7, r6
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2201      	movs	r2, #1
 80017ac:	4013      	ands	r3, r2
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e003      	b.n	80017be <bno055_get_accel_unit+0x92>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80017b6:	230f      	movs	r3, #15
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	22ff      	movs	r2, #255	@ 0xff
 80017bc:	701a      	strb	r2, [r3, #0]
        }
    }

    return com_rslt;
 80017be:	230f      	movs	r3, #15
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b25b      	sxtb	r3, r3
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b005      	add	sp, #20
 80017cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ce:	46c0      	nop			@ (mov r8, r8)
 80017d0:	2000007c 	.word	0x2000007c

080017d4 <bno055_set_accel_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_accel_unit(u8 accel_unit_u8)
{
 80017d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	0002      	movs	r2, r0
 80017dc:	1dfb      	adds	r3, r7, #7
 80017de:	701a      	strb	r2, [r3, #0]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80017e0:	230f      	movs	r3, #15
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	22ff      	movs	r2, #255	@ 0xff
 80017e6:	701a      	strb	r2, [r3, #0]
    u8 data_u8r = BNO055_INIT_VALUE;
 80017e8:	230d      	movs	r3, #13
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80017f0:	230c      	movs	r3, #12
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
    s8 stat_s8 = BNO055_ERROR;
 80017f8:	230e      	movs	r3, #14
 80017fa:	18fb      	adds	r3, r7, r3
 80017fc:	22ff      	movs	r2, #255	@ 0xff
 80017fe:	701a      	strb	r2, [r3, #0]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001800:	4b44      	ldr	r3, [pc, #272]	@ (8001914 <bno055_set_accel_unit+0x140>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <bno055_set_accel_unit+0x3a>
    {
        return BNO055_E_NULL_PTR;
 8001808:	237f      	movs	r3, #127	@ 0x7f
 800180a:	425b      	negs	r3, r3
 800180c:	e07e      	b.n	800190c <bno055_set_accel_unit+0x138>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 800180e:	250e      	movs	r5, #14
 8001810:	197c      	adds	r4, r7, r5
 8001812:	260c      	movs	r6, #12
 8001814:	19bb      	adds	r3, r7, r6
 8001816:	0018      	movs	r0, r3
 8001818:	f000 fa72 	bl	8001d00 <bno055_get_operation_mode>
 800181c:	0003      	movs	r3, r0
 800181e:	7023      	strb	r3, [r4, #0]
        if (stat_s8 == BNO055_SUCCESS)
 8001820:	002c      	movs	r4, r5
 8001822:	193b      	adds	r3, r7, r4
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b25b      	sxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d154      	bne.n	80018d6 <bno055_set_accel_unit+0x102>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800182c:	19bb      	adds	r3, r7, r6
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00a      	beq.n	800184a <bno055_set_accel_unit+0x76>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001834:	2000      	movs	r0, #0
 8001836:	f000 fab7 	bl	8001da8 <bno055_set_operation_mode>
 800183a:	0003      	movs	r3, r0
 800183c:	b2da      	uxtb	r2, r3
 800183e:	193b      	adds	r3, r7, r4
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	18d3      	adds	r3, r2, r3
 8001844:	b2da      	uxtb	r2, r3
 8001846:	193b      	adds	r3, r7, r4
 8001848:	701a      	strb	r2, [r3, #0]
            }
            if (stat_s8 == BNO055_SUCCESS)
 800184a:	230e      	movs	r3, #14
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b25b      	sxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d13a      	bne.n	80018cc <bno055_set_accel_unit+0xf8>
            {
                /* Write the accel unit */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001856:	4b2f      	ldr	r3, [pc, #188]	@ (8001914 <bno055_set_accel_unit+0x140>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	691d      	ldr	r5, [r3, #16]
 800185c:	4b2d      	ldr	r3, [pc, #180]	@ (8001914 <bno055_set_accel_unit+0x140>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	7a58      	ldrb	r0, [r3, #9]
 8001862:	260f      	movs	r6, #15
 8001864:	19bc      	adds	r4, r7, r6
 8001866:	230d      	movs	r3, #13
 8001868:	18fa      	adds	r2, r7, r3
 800186a:	2301      	movs	r3, #1
 800186c:	213b      	movs	r1, #59	@ 0x3b
 800186e:	47a8      	blx	r5
 8001870:	0003      	movs	r3, r0
 8001872:	7023      	strb	r3, [r4, #0]
                                                          BNO055_ACCEL_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001874:	0035      	movs	r5, r6
 8001876:	197b      	adds	r3, r7, r5
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b25b      	sxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d12e      	bne.n	80018de <bno055_set_accel_unit+0x10a>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_ACCEL_UNIT, accel_unit_u8);
 8001880:	200d      	movs	r0, #13
 8001882:	183b      	adds	r3, r7, r0
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b25b      	sxtb	r3, r3
 8001888:	2201      	movs	r2, #1
 800188a:	4393      	bics	r3, r2
 800188c:	b25a      	sxtb	r2, r3
 800188e:	1dfb      	adds	r3, r7, #7
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b25b      	sxtb	r3, r3
 8001894:	2101      	movs	r1, #1
 8001896:	400b      	ands	r3, r1
 8001898:	b25b      	sxtb	r3, r3
 800189a:	4313      	orrs	r3, r2
 800189c:	b25b      	sxtb	r3, r3
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	0001      	movs	r1, r0
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	701a      	strb	r2, [r3, #0]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80018a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001914 <bno055_set_accel_unit+0x140>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68dc      	ldr	r4, [r3, #12]
 80018ac:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <bno055_set_accel_unit+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	7a58      	ldrb	r0, [r3, #9]
 80018b2:	187a      	adds	r2, r7, r1
 80018b4:	2301      	movs	r3, #1
 80018b6:	213b      	movs	r1, #59	@ 0x3b
 80018b8:	47a0      	blx	r4
 80018ba:	0003      	movs	r3, r0
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	197b      	adds	r3, r7, r5
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	18d3      	adds	r3, r2, r3
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	197b      	adds	r3, r7, r5
 80018c8:	701a      	strb	r2, [r3, #0]
 80018ca:	e008      	b.n	80018de <bno055_set_accel_unit+0x10a>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 80018cc:	230f      	movs	r3, #15
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	22ff      	movs	r2, #255	@ 0xff
 80018d2:	701a      	strb	r2, [r3, #0]
 80018d4:	e003      	b.n	80018de <bno055_set_accel_unit+0x10a>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80018d6:	230f      	movs	r3, #15
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	22ff      	movs	r2, #255	@ 0xff
 80018dc:	701a      	strb	r2, [r3, #0]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80018de:	220c      	movs	r2, #12
 80018e0:	18bb      	adds	r3, r7, r2
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00d      	beq.n	8001904 <bno055_set_accel_unit+0x130>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 80018e8:	18bb      	adds	r3, r7, r2
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f000 fa5b 	bl	8001da8 <bno055_set_operation_mode>
 80018f2:	0003      	movs	r3, r0
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	210f      	movs	r1, #15
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	18d3      	adds	r3, r2, r3
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	187b      	adds	r3, r7, r1
 8001902:	701a      	strb	r2, [r3, #0]
    }

    return com_rslt;
 8001904:	230f      	movs	r3, #15
 8001906:	18fb      	adds	r3, r7, r3
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b25b      	sxtb	r3, r3
}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b005      	add	sp, #20
 8001912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001914:	2000007c 	.word	0x2000007c

08001918 <bno055_get_gyro_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_gyro_unit(u8 *gyro_unit_u8)
{
 8001918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001920:	230f      	movs	r3, #15
 8001922:	18fb      	adds	r3, r7, r3
 8001924:	22ff      	movs	r2, #255	@ 0xff
 8001926:	701a      	strb	r2, [r3, #0]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001928:	230d      	movs	r3, #13
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
    s8 stat_s8 = BNO055_ERROR;
 8001930:	230e      	movs	r3, #14
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	22ff      	movs	r2, #255	@ 0xff
 8001936:	701a      	strb	r2, [r3, #0]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001938:	4b21      	ldr	r3, [pc, #132]	@ (80019c0 <bno055_get_gyro_unit+0xa8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <bno055_get_gyro_unit+0x2e>
    {
        return BNO055_E_NULL_PTR;
 8001940:	237f      	movs	r3, #127	@ 0x7f
 8001942:	425b      	negs	r3, r3
 8001944:	e037      	b.n	80019b6 <bno055_get_gyro_unit+0x9e>
    }
    else
    {
        /*condition check for page, gyro unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001946:	4b1e      	ldr	r3, [pc, #120]	@ (80019c0 <bno055_get_gyro_unit+0xa8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	791b      	ldrb	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d006      	beq.n	800195e <bno055_get_gyro_unit+0x46>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001950:	230e      	movs	r3, #14
 8001952:	18fc      	adds	r4, r7, r3
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff f98b 	bl	8000c70 <bno055_write_page_id>
 800195a:	0003      	movs	r3, r0
 800195c:	7023      	strb	r3, [r4, #0]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 800195e:	230e      	movs	r3, #14
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b25b      	sxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d004      	beq.n	8001974 <bno055_get_gyro_unit+0x5c>
 800196a:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <bno055_get_gyro_unit+0xa8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	791b      	ldrb	r3, [r3, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d118      	bne.n	80019a6 <bno055_get_gyro_unit+0x8e>
        {
            /* Read the gyro unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <bno055_get_gyro_unit+0xa8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	691d      	ldr	r5, [r3, #16]
 800197a:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <bno055_get_gyro_unit+0xa8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	7a58      	ldrb	r0, [r3, #9]
 8001980:	230f      	movs	r3, #15
 8001982:	18fc      	adds	r4, r7, r3
 8001984:	260d      	movs	r6, #13
 8001986:	19ba      	adds	r2, r7, r6
 8001988:	2301      	movs	r3, #1
 800198a:	213b      	movs	r1, #59	@ 0x3b
 800198c:	47a8      	blx	r5
 800198e:	0003      	movs	r3, r0
 8001990:	7023      	strb	r3, [r4, #0]
                                                      BNO055_GYRO_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *gyro_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_GYRO_UNIT);
 8001992:	19bb      	adds	r3, r7, r6
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	105b      	asrs	r3, r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2201      	movs	r2, #1
 800199c:	4013      	ands	r3, r2
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	e003      	b.n	80019ae <bno055_get_gyro_unit+0x96>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80019a6:	230f      	movs	r3, #15
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	22ff      	movs	r2, #255	@ 0xff
 80019ac:	701a      	strb	r2, [r3, #0]
        }
    }

    return com_rslt;
 80019ae:	230f      	movs	r3, #15
 80019b0:	18fb      	adds	r3, r7, r3
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b25b      	sxtb	r3, r3
}
 80019b6:	0018      	movs	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b005      	add	sp, #20
 80019bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	2000007c 	.word	0x2000007c

080019c4 <bno055_set_gyro_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_gyro_unit(u8 gyro_unit_u8)
{
 80019c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	0002      	movs	r2, r0
 80019cc:	1dfb      	adds	r3, r7, #7
 80019ce:	701a      	strb	r2, [r3, #0]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80019d0:	230f      	movs	r3, #15
 80019d2:	18fb      	adds	r3, r7, r3
 80019d4:	22ff      	movs	r2, #255	@ 0xff
 80019d6:	701a      	strb	r2, [r3, #0]
    u8 data_u8r = BNO055_INIT_VALUE;
 80019d8:	230d      	movs	r3, #13
 80019da:	18fb      	adds	r3, r7, r3
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80019e0:	230c      	movs	r3, #12
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
    s8 stat_s8 = BNO055_ERROR;
 80019e8:	230e      	movs	r3, #14
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	22ff      	movs	r2, #255	@ 0xff
 80019ee:	701a      	strb	r2, [r3, #0]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80019f0:	4b45      	ldr	r3, [pc, #276]	@ (8001b08 <bno055_set_gyro_unit+0x144>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <bno055_set_gyro_unit+0x3a>
    {
        return BNO055_E_NULL_PTR;
 80019f8:	237f      	movs	r3, #127	@ 0x7f
 80019fa:	425b      	negs	r3, r3
 80019fc:	e080      	b.n	8001b00 <bno055_set_gyro_unit+0x13c>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80019fe:	250e      	movs	r5, #14
 8001a00:	197c      	adds	r4, r7, r5
 8001a02:	260c      	movs	r6, #12
 8001a04:	19bb      	adds	r3, r7, r6
 8001a06:	0018      	movs	r0, r3
 8001a08:	f000 f97a 	bl	8001d00 <bno055_get_operation_mode>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	7023      	strb	r3, [r4, #0]
        if (stat_s8 == BNO055_SUCCESS)
 8001a10:	002c      	movs	r4, r5
 8001a12:	193b      	adds	r3, r7, r4
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d156      	bne.n	8001aca <bno055_set_gyro_unit+0x106>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001a1c:	19bb      	adds	r3, r7, r6
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00a      	beq.n	8001a3a <bno055_set_gyro_unit+0x76>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f000 f9bf 	bl	8001da8 <bno055_set_operation_mode>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	193b      	adds	r3, r7, r4
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	18d3      	adds	r3, r2, r3
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	193b      	adds	r3, r7, r4
 8001a38:	701a      	strb	r2, [r3, #0]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8001a3a:	230e      	movs	r3, #14
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d13c      	bne.n	8001ac0 <bno055_set_gyro_unit+0xfc>
            {
                /* Write the gyro unit */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001a46:	4b30      	ldr	r3, [pc, #192]	@ (8001b08 <bno055_set_gyro_unit+0x144>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	691d      	ldr	r5, [r3, #16]
 8001a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b08 <bno055_set_gyro_unit+0x144>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	7a58      	ldrb	r0, [r3, #9]
 8001a52:	260f      	movs	r6, #15
 8001a54:	19bc      	adds	r4, r7, r6
 8001a56:	230d      	movs	r3, #13
 8001a58:	18fa      	adds	r2, r7, r3
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	213b      	movs	r1, #59	@ 0x3b
 8001a5e:	47a8      	blx	r5
 8001a60:	0003      	movs	r3, r0
 8001a62:	7023      	strb	r3, [r4, #0]
                                                          BNO055_GYRO_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001a64:	0035      	movs	r5, r6
 8001a66:	197b      	adds	r3, r7, r5
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	b25b      	sxtb	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d130      	bne.n	8001ad2 <bno055_set_gyro_unit+0x10e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_GYRO_UNIT, gyro_unit_u8);
 8001a70:	200d      	movs	r0, #13
 8001a72:	183b      	adds	r3, r7, r0
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b25b      	sxtb	r3, r3
 8001a78:	2202      	movs	r2, #2
 8001a7a:	4393      	bics	r3, r2
 8001a7c:	b25a      	sxtb	r2, r3
 8001a7e:	1dfb      	adds	r3, r7, #7
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	18db      	adds	r3, r3, r3
 8001a86:	b25b      	sxtb	r3, r3
 8001a88:	2102      	movs	r1, #2
 8001a8a:	400b      	ands	r3, r1
 8001a8c:	b25b      	sxtb	r3, r3
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	0001      	movs	r1, r0
 8001a96:	187b      	adds	r3, r7, r1
 8001a98:	701a      	strb	r2, [r3, #0]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b08 <bno055_set_gyro_unit+0x144>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68dc      	ldr	r4, [r3, #12]
 8001aa0:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <bno055_set_gyro_unit+0x144>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	7a58      	ldrb	r0, [r3, #9]
 8001aa6:	187a      	adds	r2, r7, r1
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	213b      	movs	r1, #59	@ 0x3b
 8001aac:	47a0      	blx	r4
 8001aae:	0003      	movs	r3, r0
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	197b      	adds	r3, r7, r5
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	18d3      	adds	r3, r2, r3
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	197b      	adds	r3, r7, r5
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	e008      	b.n	8001ad2 <bno055_set_gyro_unit+0x10e>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8001ac0:	230f      	movs	r3, #15
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	22ff      	movs	r2, #255	@ 0xff
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	e003      	b.n	8001ad2 <bno055_set_gyro_unit+0x10e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001aca:	230f      	movs	r3, #15
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	22ff      	movs	r2, #255	@ 0xff
 8001ad0:	701a      	strb	r2, [r3, #0]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	18bb      	adds	r3, r7, r2
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00d      	beq.n	8001af8 <bno055_set_gyro_unit+0x134>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8001adc:	18bb      	adds	r3, r7, r2
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f000 f961 	bl	8001da8 <bno055_set_operation_mode>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	210f      	movs	r1, #15
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	18d3      	adds	r3, r2, r3
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	187b      	adds	r3, r7, r1
 8001af6:	701a      	strb	r2, [r3, #0]
    }

    return com_rslt;
 8001af8:	230f      	movs	r3, #15
 8001afa:	18fb      	adds	r3, r7, r3
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b25b      	sxtb	r3, r3
}
 8001b00:	0018      	movs	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b005      	add	sp, #20
 8001b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b08:	2000007c 	.word	0x2000007c

08001b0c <bno055_get_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_euler_unit(u8 *euler_unit_u8)
{
 8001b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001b14:	230f      	movs	r3, #15
 8001b16:	18fb      	adds	r3, r7, r3
 8001b18:	22ff      	movs	r2, #255	@ 0xff
 8001b1a:	701a      	strb	r2, [r3, #0]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001b1c:	230d      	movs	r3, #13
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
    s8 stat_s8 = BNO055_ERROR;
 8001b24:	230e      	movs	r3, #14
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	22ff      	movs	r2, #255	@ 0xff
 8001b2a:	701a      	strb	r2, [r3, #0]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001b2c:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <bno055_get_euler_unit+0xa8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <bno055_get_euler_unit+0x2e>
    {
        return BNO055_E_NULL_PTR;
 8001b34:	237f      	movs	r3, #127	@ 0x7f
 8001b36:	425b      	negs	r3, r3
 8001b38:	e037      	b.n	8001baa <bno055_get_euler_unit+0x9e>
    }
    else
    {
        /*condition check for page, Euler unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <bno055_get_euler_unit+0xa8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	791b      	ldrb	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <bno055_get_euler_unit+0x46>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001b44:	230e      	movs	r3, #14
 8001b46:	18fc      	adds	r4, r7, r3
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f7ff f891 	bl	8000c70 <bno055_write_page_id>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	7023      	strb	r3, [r4, #0]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001b52:	230e      	movs	r3, #14
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	b25b      	sxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d004      	beq.n	8001b68 <bno055_get_euler_unit+0x5c>
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <bno055_get_euler_unit+0xa8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	791b      	ldrb	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d118      	bne.n	8001b9a <bno055_get_euler_unit+0x8e>
        {
            /* Read the Euler unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001b68:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <bno055_get_euler_unit+0xa8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691d      	ldr	r5, [r3, #16]
 8001b6e:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <bno055_get_euler_unit+0xa8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	7a58      	ldrb	r0, [r3, #9]
 8001b74:	230f      	movs	r3, #15
 8001b76:	18fc      	adds	r4, r7, r3
 8001b78:	260d      	movs	r6, #13
 8001b7a:	19ba      	adds	r2, r7, r6
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	213b      	movs	r1, #59	@ 0x3b
 8001b80:	47a8      	blx	r5
 8001b82:	0003      	movs	r3, r0
 8001b84:	7023      	strb	r3, [r4, #0]
                                                      BNO055_EULER_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *euler_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_EULER_UNIT);
 8001b86:	19bb      	adds	r3, r7, r6
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	109b      	asrs	r3, r3, #2
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4013      	ands	r3, r2
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	e003      	b.n	8001ba2 <bno055_get_euler_unit+0x96>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001b9a:	230f      	movs	r3, #15
 8001b9c:	18fb      	adds	r3, r7, r3
 8001b9e:	22ff      	movs	r2, #255	@ 0xff
 8001ba0:	701a      	strb	r2, [r3, #0]
        }
    }

    return com_rslt;
 8001ba2:	230f      	movs	r3, #15
 8001ba4:	18fb      	adds	r3, r7, r3
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b25b      	sxtb	r3, r3
}
 8001baa:	0018      	movs	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	b005      	add	sp, #20
 8001bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bb2:	46c0      	nop			@ (mov r8, r8)
 8001bb4:	2000007c 	.word	0x2000007c

08001bb8 <bno055_set_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_euler_unit(u8 euler_unit_u8)
{
 8001bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	1dfb      	adds	r3, r7, #7
 8001bc2:	701a      	strb	r2, [r3, #0]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001bc4:	230f      	movs	r3, #15
 8001bc6:	18fb      	adds	r3, r7, r3
 8001bc8:	22ff      	movs	r2, #255	@ 0xff
 8001bca:	701a      	strb	r2, [r3, #0]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001bcc:	230d      	movs	r3, #13
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001bd4:	230c      	movs	r3, #12
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
    s8 stat_s8 = BNO055_ERROR;
 8001bdc:	230e      	movs	r3, #14
 8001bde:	18fb      	adds	r3, r7, r3
 8001be0:	22ff      	movs	r2, #255	@ 0xff
 8001be2:	701a      	strb	r2, [r3, #0]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001be4:	4b45      	ldr	r3, [pc, #276]	@ (8001cfc <bno055_set_euler_unit+0x144>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <bno055_set_euler_unit+0x3a>
    {
        return BNO055_E_NULL_PTR;
 8001bec:	237f      	movs	r3, #127	@ 0x7f
 8001bee:	425b      	negs	r3, r3
 8001bf0:	e080      	b.n	8001cf4 <bno055_set_euler_unit+0x13c>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001bf2:	250e      	movs	r5, #14
 8001bf4:	197c      	adds	r4, r7, r5
 8001bf6:	260c      	movs	r6, #12
 8001bf8:	19bb      	adds	r3, r7, r6
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f000 f880 	bl	8001d00 <bno055_get_operation_mode>
 8001c00:	0003      	movs	r3, r0
 8001c02:	7023      	strb	r3, [r4, #0]
        if (stat_s8 == BNO055_SUCCESS)
 8001c04:	002c      	movs	r4, r5
 8001c06:	193b      	adds	r3, r7, r4
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	b25b      	sxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d156      	bne.n	8001cbe <bno055_set_euler_unit+0x106>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001c10:	19bb      	adds	r3, r7, r6
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00a      	beq.n	8001c2e <bno055_set_euler_unit+0x76>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f000 f8c5 	bl	8001da8 <bno055_set_operation_mode>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	193b      	adds	r3, r7, r4
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	18d3      	adds	r3, r2, r3
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	193b      	adds	r3, r7, r4
 8001c2c:	701a      	strb	r2, [r3, #0]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8001c2e:	230e      	movs	r3, #14
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d13c      	bne.n	8001cb4 <bno055_set_euler_unit+0xfc>
            {
                /* Write the Euler unit*/
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001c3a:	4b30      	ldr	r3, [pc, #192]	@ (8001cfc <bno055_set_euler_unit+0x144>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	691d      	ldr	r5, [r3, #16]
 8001c40:	4b2e      	ldr	r3, [pc, #184]	@ (8001cfc <bno055_set_euler_unit+0x144>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	7a58      	ldrb	r0, [r3, #9]
 8001c46:	260f      	movs	r6, #15
 8001c48:	19bc      	adds	r4, r7, r6
 8001c4a:	230d      	movs	r3, #13
 8001c4c:	18fa      	adds	r2, r7, r3
 8001c4e:	2301      	movs	r3, #1
 8001c50:	213b      	movs	r1, #59	@ 0x3b
 8001c52:	47a8      	blx	r5
 8001c54:	0003      	movs	r3, r0
 8001c56:	7023      	strb	r3, [r4, #0]
                                                          BNO055_EULER_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001c58:	0035      	movs	r5, r6
 8001c5a:	197b      	adds	r3, r7, r5
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d130      	bne.n	8001cc6 <bno055_set_euler_unit+0x10e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_EULER_UNIT, euler_unit_u8);
 8001c64:	200d      	movs	r0, #13
 8001c66:	183b      	adds	r3, r7, r0
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b25b      	sxtb	r3, r3
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	4393      	bics	r3, r2
 8001c70:	b25a      	sxtb	r2, r3
 8001c72:	1dfb      	adds	r3, r7, #7
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b25b      	sxtb	r3, r3
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	2104      	movs	r1, #4
 8001c7e:	400b      	ands	r3, r1
 8001c80:	b25b      	sxtb	r3, r3
 8001c82:	4313      	orrs	r3, r2
 8001c84:	b25b      	sxtb	r3, r3
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	0001      	movs	r1, r0
 8001c8a:	187b      	adds	r3, r7, r1
 8001c8c:	701a      	strb	r2, [r3, #0]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <bno055_set_euler_unit+0x144>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68dc      	ldr	r4, [r3, #12]
 8001c94:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <bno055_set_euler_unit+0x144>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	7a58      	ldrb	r0, [r3, #9]
 8001c9a:	187a      	adds	r2, r7, r1
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	213b      	movs	r1, #59	@ 0x3b
 8001ca0:	47a0      	blx	r4
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	197b      	adds	r3, r7, r5
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	18d3      	adds	r3, r2, r3
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	197b      	adds	r3, r7, r5
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	e008      	b.n	8001cc6 <bno055_set_euler_unit+0x10e>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8001cb4:	230f      	movs	r3, #15
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	22ff      	movs	r2, #255	@ 0xff
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	e003      	b.n	8001cc6 <bno055_set_euler_unit+0x10e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001cbe:	230f      	movs	r3, #15
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	22ff      	movs	r2, #255	@ 0xff
 8001cc4:	701a      	strb	r2, [r3, #0]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	18bb      	adds	r3, r7, r2
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00d      	beq.n	8001cec <bno055_set_euler_unit+0x134>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8001cd0:	18bb      	adds	r3, r7, r2
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f000 f867 	bl	8001da8 <bno055_set_operation_mode>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	210f      	movs	r1, #15
 8001ce0:	187b      	adds	r3, r7, r1
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	18d3      	adds	r3, r2, r3
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	187b      	adds	r3, r7, r1
 8001cea:	701a      	strb	r2, [r3, #0]
    }

    return com_rslt;
 8001cec:	230f      	movs	r3, #15
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b25b      	sxtb	r3, r3
}
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b005      	add	sp, #20
 8001cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cfc:	2000007c 	.word	0x2000007c

08001d00 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8001d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001d08:	230f      	movs	r3, #15
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	22ff      	movs	r2, #255	@ 0xff
 8001d0e:	701a      	strb	r2, [r3, #0]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001d10:	230d      	movs	r3, #13
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
    s8 stat_s8 = BNO055_ERROR;
 8001d18:	230e      	movs	r3, #14
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	22ff      	movs	r2, #255	@ 0xff
 8001d1e:	701a      	strb	r2, [r3, #0]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001d20:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <bno055_get_operation_mode+0xa4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <bno055_get_operation_mode+0x2e>
    {
        return BNO055_E_NULL_PTR;
 8001d28:	237f      	movs	r3, #127	@ 0x7f
 8001d2a:	425b      	negs	r3, r3
 8001d2c:	e035      	b.n	8001d9a <bno055_get_operation_mode+0x9a>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001da4 <bno055_get_operation_mode+0xa4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	791b      	ldrb	r3, [r3, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d006      	beq.n	8001d46 <bno055_get_operation_mode+0x46>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001d38:	230e      	movs	r3, #14
 8001d3a:	18fc      	adds	r4, r7, r3
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7fe ff97 	bl	8000c70 <bno055_write_page_id>
 8001d42:	0003      	movs	r3, r0
 8001d44:	7023      	strb	r3, [r4, #0]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001d46:	230e      	movs	r3, #14
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	b25b      	sxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d004      	beq.n	8001d5c <bno055_get_operation_mode+0x5c>
 8001d52:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <bno055_get_operation_mode+0xa4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	791b      	ldrb	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d116      	bne.n	8001d8a <bno055_get_operation_mode+0x8a>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <bno055_get_operation_mode+0xa4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691d      	ldr	r5, [r3, #16]
 8001d62:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <bno055_get_operation_mode+0xa4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	7a58      	ldrb	r0, [r3, #9]
 8001d68:	230f      	movs	r3, #15
 8001d6a:	18fc      	adds	r4, r7, r3
 8001d6c:	260d      	movs	r6, #13
 8001d6e:	19ba      	adds	r2, r7, r6
 8001d70:	2301      	movs	r3, #1
 8001d72:	213d      	movs	r1, #61	@ 0x3d
 8001d74:	47a8      	blx	r5
 8001d76:	0003      	movs	r3, r0
 8001d78:	7023      	strb	r3, [r4, #0]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8001d7a:	19bb      	adds	r3, r7, r6
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	220f      	movs	r2, #15
 8001d80:	4013      	ands	r3, r2
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	e003      	b.n	8001d92 <bno055_get_operation_mode+0x92>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001d8a:	230f      	movs	r3, #15
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	22ff      	movs	r2, #255	@ 0xff
 8001d90:	701a      	strb	r2, [r3, #0]
        }
    }

    return com_rslt;
 8001d92:	230f      	movs	r3, #15
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b25b      	sxtb	r3, r3
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b005      	add	sp, #20
 8001da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da2:	46c0      	nop			@ (mov r8, r8)
 8001da4:	2000007c 	.word	0x2000007c

08001da8 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8001da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	0002      	movs	r2, r0
 8001db0:	1dfb      	adds	r3, r7, #7
 8001db2:	701a      	strb	r2, [r3, #0]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001db4:	230f      	movs	r3, #15
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	22ff      	movs	r2, #255	@ 0xff
 8001dba:	701a      	strb	r2, [r3, #0]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001dbc:	230d      	movs	r3, #13
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001dc4:	230c      	movs	r3, #12
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
    s8 stat_s8 = BNO055_ERROR;
 8001dcc:	230e      	movs	r3, #14
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	22ff      	movs	r2, #255	@ 0xff
 8001dd2:	701a      	strb	r2, [r3, #0]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001dd4:	4b6f      	ldr	r3, [pc, #444]	@ (8001f94 <bno055_set_operation_mode+0x1ec>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <bno055_set_operation_mode+0x3a>
    {
        return BNO055_E_NULL_PTR;
 8001ddc:	237f      	movs	r3, #127	@ 0x7f
 8001dde:	425b      	negs	r3, r3
 8001de0:	e0d3      	b.n	8001f8a <bno055_set_operation_mode+0x1e2>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001de2:	250e      	movs	r5, #14
 8001de4:	197c      	adds	r4, r7, r5
 8001de6:	260c      	movs	r6, #12
 8001de8:	19bb      	adds	r3, r7, r6
 8001dea:	0018      	movs	r0, r3
 8001dec:	f7ff ff88 	bl	8001d00 <bno055_get_operation_mode>
 8001df0:	0003      	movs	r3, r0
 8001df2:	7023      	strb	r3, [r4, #0]
        if (stat_s8 == BNO055_SUCCESS)
 8001df4:	197b      	adds	r3, r7, r5
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b25b      	sxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d000      	beq.n	8001e00 <bno055_set_operation_mode+0x58>
 8001dfe:	e0bc      	b.n	8001f7a <bno055_set_operation_mode+0x1d2>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8001e00:	19bb      	adds	r3, r7, r6
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d142      	bne.n	8001e8e <bno055_set_operation_mode+0xe6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001e08:	4b62      	ldr	r3, [pc, #392]	@ (8001f94 <bno055_set_operation_mode+0x1ec>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691d      	ldr	r5, [r3, #16]
 8001e0e:	4b61      	ldr	r3, [pc, #388]	@ (8001f94 <bno055_set_operation_mode+0x1ec>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	7a58      	ldrb	r0, [r3, #9]
 8001e14:	260f      	movs	r6, #15
 8001e16:	19bc      	adds	r4, r7, r6
 8001e18:	230d      	movs	r3, #13
 8001e1a:	18fa      	adds	r2, r7, r3
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	213d      	movs	r1, #61	@ 0x3d
 8001e20:	47a8      	blx	r5
 8001e22:	0003      	movs	r3, r0
 8001e24:	7023      	strb	r3, [r4, #0]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001e26:	0035      	movs	r5, r6
 8001e28:	197b      	adds	r3, r7, r5
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b25b      	sxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d000      	beq.n	8001e34 <bno055_set_operation_mode+0x8c>
 8001e32:	e0a6      	b.n	8001f82 <bno055_set_operation_mode+0x1da>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8001e34:	200d      	movs	r0, #13
 8001e36:	183b      	adds	r3, r7, r0
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b25b      	sxtb	r3, r3
 8001e3c:	220f      	movs	r2, #15
 8001e3e:	4393      	bics	r3, r2
 8001e40:	b25a      	sxtb	r2, r3
 8001e42:	1dfb      	adds	r3, r7, #7
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b25b      	sxtb	r3, r3
 8001e48:	210f      	movs	r1, #15
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	b25b      	sxtb	r3, r3
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	b25b      	sxtb	r3, r3
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	0001      	movs	r1, r0
 8001e56:	187b      	adds	r3, r7, r1
 8001e58:	701a      	strb	r2, [r3, #0]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001e5a:	4b4e      	ldr	r3, [pc, #312]	@ (8001f94 <bno055_set_operation_mode+0x1ec>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68dc      	ldr	r4, [r3, #12]
 8001e60:	4b4c      	ldr	r3, [pc, #304]	@ (8001f94 <bno055_set_operation_mode+0x1ec>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	7a58      	ldrb	r0, [r3, #9]
 8001e66:	187a      	adds	r2, r7, r1
 8001e68:	2301      	movs	r3, #1
 8001e6a:	213d      	movs	r1, #61	@ 0x3d
 8001e6c:	47a0      	blx	r4
 8001e6e:	0003      	movs	r3, r0
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	197b      	adds	r3, r7, r5
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	18d3      	adds	r3, r2, r3
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	197b      	adds	r3, r7, r5
 8001e7c:	701a      	strb	r2, [r3, #0]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8001e7e:	4b45      	ldr	r3, [pc, #276]	@ (8001f94 <bno055_set_operation_mode+0x1ec>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	2296      	movs	r2, #150	@ 0x96
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	0010      	movs	r0, r2
 8001e8a:	4798      	blx	r3
 8001e8c:	e079      	b.n	8001f82 <bno055_set_operation_mode+0x1da>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001e8e:	4b41      	ldr	r3, [pc, #260]	@ (8001f94 <bno055_set_operation_mode+0x1ec>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	691d      	ldr	r5, [r3, #16]
 8001e94:	4b3f      	ldr	r3, [pc, #252]	@ (8001f94 <bno055_set_operation_mode+0x1ec>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	7a58      	ldrb	r0, [r3, #9]
 8001e9a:	260f      	movs	r6, #15
 8001e9c:	19bc      	adds	r4, r7, r6
 8001e9e:	210d      	movs	r1, #13
 8001ea0:	187a      	adds	r2, r7, r1
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	213d      	movs	r1, #61	@ 0x3d
 8001ea6:	47a8      	blx	r5
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	7023      	strb	r3, [r4, #0]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001eac:	0034      	movs	r4, r6
 8001eae:	193b      	adds	r3, r7, r4
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	b25b      	sxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d11a      	bne.n	8001eee <bno055_set_operation_mode+0x146>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8001eb8:	210d      	movs	r1, #13
 8001eba:	187b      	adds	r3, r7, r1
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	4393      	bics	r3, r2
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	187b      	adds	r3, r7, r1
 8001ec6:	701a      	strb	r2, [r3, #0]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	2201      	movs	r2, #1
 8001ecc:	0019      	movs	r1, r3
 8001ece:	203d      	movs	r0, #61	@ 0x3d
 8001ed0:	f7fe fe9c 	bl	8000c0c <bno055_write_register>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8001ed8:	193b      	adds	r3, r7, r4
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	18d3      	adds	r3, r2, r3
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	193b      	adds	r3, r7, r4
 8001ee2:	701a      	strb	r2, [r3, #0]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 8001ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f94 <bno055_set_operation_mode+0x1ec>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	2014      	movs	r0, #20
 8001eec:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001eee:	1dfb      	adds	r3, r7, #7
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d045      	beq.n	8001f82 <bno055_set_operation_mode+0x1da>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001ef6:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <bno055_set_operation_mode+0x1ec>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	691d      	ldr	r5, [r3, #16]
 8001efc:	4b25      	ldr	r3, [pc, #148]	@ (8001f94 <bno055_set_operation_mode+0x1ec>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	7a58      	ldrb	r0, [r3, #9]
 8001f02:	260f      	movs	r6, #15
 8001f04:	19bc      	adds	r4, r7, r6
 8001f06:	230d      	movs	r3, #13
 8001f08:	18fa      	adds	r2, r7, r3
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	213d      	movs	r1, #61	@ 0x3d
 8001f0e:	47a8      	blx	r5
 8001f10:	0003      	movs	r3, r0
 8001f12:	7023      	strb	r3, [r4, #0]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8001f14:	0035      	movs	r5, r6
 8001f16:	197b      	adds	r3, r7, r5
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b25b      	sxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d130      	bne.n	8001f82 <bno055_set_operation_mode+0x1da>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8001f20:	200d      	movs	r0, #13
 8001f22:	183b      	adds	r3, r7, r0
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b25b      	sxtb	r3, r3
 8001f28:	220f      	movs	r2, #15
 8001f2a:	4393      	bics	r3, r2
 8001f2c:	b25a      	sxtb	r2, r3
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b25b      	sxtb	r3, r3
 8001f34:	210f      	movs	r1, #15
 8001f36:	400b      	ands	r3, r1
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b25b      	sxtb	r3, r3
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	0001      	movs	r1, r0
 8001f42:	187b      	adds	r3, r7, r1
 8001f44:	701a      	strb	r2, [r3, #0]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001f46:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <bno055_set_operation_mode+0x1ec>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68dc      	ldr	r4, [r3, #12]
 8001f4c:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <bno055_set_operation_mode+0x1ec>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	7a58      	ldrb	r0, [r3, #9]
 8001f52:	187a      	adds	r2, r7, r1
 8001f54:	2301      	movs	r3, #1
 8001f56:	213d      	movs	r1, #61	@ 0x3d
 8001f58:	47a0      	blx	r4
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	197b      	adds	r3, r7, r5
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	18d3      	adds	r3, r2, r3
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	197b      	adds	r3, r7, r5
 8001f68:	701a      	strb	r2, [r3, #0]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <bno055_set_operation_mode+0x1ec>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	2296      	movs	r2, #150	@ 0x96
 8001f72:	0092      	lsls	r2, r2, #2
 8001f74:	0010      	movs	r0, r2
 8001f76:	4798      	blx	r3
 8001f78:	e003      	b.n	8001f82 <bno055_set_operation_mode+0x1da>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001f7a:	230f      	movs	r3, #15
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	22ff      	movs	r2, #255	@ 0xff
 8001f80:	701a      	strb	r2, [r3, #0]
        }
    }

    return com_rslt;
 8001f82:	230f      	movs	r3, #15
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	b25b      	sxtb	r3, r3
}
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b005      	add	sp, #20
 8001f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	2000007c 	.word	0x2000007c

08001f98 <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 8001f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	1dfb      	adds	r3, r7, #7
 8001fa2:	701a      	strb	r2, [r3, #0]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001fa4:	230f      	movs	r3, #15
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	22ff      	movs	r2, #255	@ 0xff
 8001faa:	701a      	strb	r2, [r3, #0]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001fac:	230d      	movs	r3, #13
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001fb4:	230c      	movs	r3, #12
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
    s8 stat_s8 = BNO055_ERROR;
 8001fbc:	230e      	movs	r3, #14
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	22ff      	movs	r2, #255	@ 0xff
 8001fc2:	701a      	strb	r2, [r3, #0]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001fc4:	4b44      	ldr	r3, [pc, #272]	@ (80020d8 <bno055_set_power_mode+0x140>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <bno055_set_power_mode+0x3a>
    {
        return BNO055_E_NULL_PTR;
 8001fcc:	237f      	movs	r3, #127	@ 0x7f
 8001fce:	425b      	negs	r3, r3
 8001fd0:	e07e      	b.n	80020d0 <bno055_set_power_mode+0x138>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001fd2:	250e      	movs	r5, #14
 8001fd4:	197c      	adds	r4, r7, r5
 8001fd6:	260c      	movs	r6, #12
 8001fd8:	19bb      	adds	r3, r7, r6
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f7ff fe90 	bl	8001d00 <bno055_get_operation_mode>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	7023      	strb	r3, [r4, #0]
        if (stat_s8 == BNO055_SUCCESS)
 8001fe4:	002c      	movs	r4, r5
 8001fe6:	193b      	adds	r3, r7, r4
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25b      	sxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d154      	bne.n	800209a <bno055_set_power_mode+0x102>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001ff0:	19bb      	adds	r3, r7, r6
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <bno055_set_power_mode+0x76>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f7ff fed5 	bl	8001da8 <bno055_set_operation_mode>
 8001ffe:	0003      	movs	r3, r0
 8002000:	b2da      	uxtb	r2, r3
 8002002:	193b      	adds	r3, r7, r4
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	18d3      	adds	r3, r2, r3
 8002008:	b2da      	uxtb	r2, r3
 800200a:	193b      	adds	r3, r7, r4
 800200c:	701a      	strb	r2, [r3, #0]
            }
            if (stat_s8 == BNO055_SUCCESS)
 800200e:	230e      	movs	r3, #14
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b25b      	sxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d13a      	bne.n	8002090 <bno055_set_power_mode+0xf8>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800201a:	4b2f      	ldr	r3, [pc, #188]	@ (80020d8 <bno055_set_power_mode+0x140>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691d      	ldr	r5, [r3, #16]
 8002020:	4b2d      	ldr	r3, [pc, #180]	@ (80020d8 <bno055_set_power_mode+0x140>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	7a58      	ldrb	r0, [r3, #9]
 8002026:	260f      	movs	r6, #15
 8002028:	19bc      	adds	r4, r7, r6
 800202a:	230d      	movs	r3, #13
 800202c:	18fa      	adds	r2, r7, r3
 800202e:	2301      	movs	r3, #1
 8002030:	213e      	movs	r1, #62	@ 0x3e
 8002032:	47a8      	blx	r5
 8002034:	0003      	movs	r3, r0
 8002036:	7023      	strb	r3, [r4, #0]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8002038:	0035      	movs	r5, r6
 800203a:	197b      	adds	r3, r7, r5
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	b25b      	sxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d12e      	bne.n	80020a2 <bno055_set_power_mode+0x10a>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 8002044:	200d      	movs	r0, #13
 8002046:	183b      	adds	r3, r7, r0
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b25b      	sxtb	r3, r3
 800204c:	2203      	movs	r2, #3
 800204e:	4393      	bics	r3, r2
 8002050:	b25a      	sxtb	r2, r3
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b25b      	sxtb	r3, r3
 8002058:	2103      	movs	r1, #3
 800205a:	400b      	ands	r3, r1
 800205c:	b25b      	sxtb	r3, r3
 800205e:	4313      	orrs	r3, r2
 8002060:	b25b      	sxtb	r3, r3
 8002062:	b2da      	uxtb	r2, r3
 8002064:	0001      	movs	r1, r0
 8002066:	187b      	adds	r3, r7, r1
 8002068:	701a      	strb	r2, [r3, #0]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800206a:	4b1b      	ldr	r3, [pc, #108]	@ (80020d8 <bno055_set_power_mode+0x140>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68dc      	ldr	r4, [r3, #12]
 8002070:	4b19      	ldr	r3, [pc, #100]	@ (80020d8 <bno055_set_power_mode+0x140>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	7a58      	ldrb	r0, [r3, #9]
 8002076:	187a      	adds	r2, r7, r1
 8002078:	2301      	movs	r3, #1
 800207a:	213e      	movs	r1, #62	@ 0x3e
 800207c:	47a0      	blx	r4
 800207e:	0003      	movs	r3, r0
 8002080:	b2da      	uxtb	r2, r3
 8002082:	197b      	adds	r3, r7, r5
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	18d3      	adds	r3, r2, r3
 8002088:	b2da      	uxtb	r2, r3
 800208a:	197b      	adds	r3, r7, r5
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e008      	b.n	80020a2 <bno055_set_power_mode+0x10a>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8002090:	230f      	movs	r3, #15
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	22ff      	movs	r2, #255	@ 0xff
 8002096:	701a      	strb	r2, [r3, #0]
 8002098:	e003      	b.n	80020a2 <bno055_set_power_mode+0x10a>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800209a:	230f      	movs	r3, #15
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	22ff      	movs	r2, #255	@ 0xff
 80020a0:	701a      	strb	r2, [r3, #0]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80020a2:	220c      	movs	r2, #12
 80020a4:	18bb      	adds	r3, r7, r2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00d      	beq.n	80020c8 <bno055_set_power_mode+0x130>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 80020ac:	18bb      	adds	r3, r7, r2
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff fe79 	bl	8001da8 <bno055_set_operation_mode>
 80020b6:	0003      	movs	r3, r0
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	210f      	movs	r1, #15
 80020bc:	187b      	adds	r3, r7, r1
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	18d3      	adds	r3, r2, r3
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	701a      	strb	r2, [r3, #0]
    }

    return com_rslt;
 80020c8:	230f      	movs	r3, #15
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b25b      	sxtb	r3, r3
}
 80020d0:	0018      	movs	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b005      	add	sp, #20
 80020d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d8:	2000007c 	.word	0x2000007c

080020dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e0:	f000 fd4c 	bl	8002b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e4:	f000 f95a 	bl	800239c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e8:	f000 fa5c 	bl	80025a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80020ec:	f000 f9fa 	bl	80024e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80020f0:	f000 fa28 	bl	8002544 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80020f4:	f000 f9b6 	bl	8002464 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &RxChar, 1);
 80020f8:	4988      	ldr	r1, [pc, #544]	@ (800231c <main+0x240>)
 80020fa:	4b89      	ldr	r3, [pc, #548]	@ (8002320 <main+0x244>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	0018      	movs	r0, r3
 8002100:	f003 fbdf 	bl	80058c2 <HAL_UART_Receive_IT>

  bno055_.dev_addr = 0x28U;
 8002104:	4b87      	ldr	r3, [pc, #540]	@ (8002324 <main+0x248>)
 8002106:	2228      	movs	r2, #40	@ 0x28
 8002108:	725a      	strb	r2, [r3, #9]
  bno055_.delay_msec = bno055_delay;
 800210a:	4b86      	ldr	r3, [pc, #536]	@ (8002324 <main+0x248>)
 800210c:	4a86      	ldr	r2, [pc, #536]	@ (8002328 <main+0x24c>)
 800210e:	615a      	str	r2, [r3, #20]
  bno055_.bus_read = bno055_read;
 8002110:	4b84      	ldr	r3, [pc, #528]	@ (8002324 <main+0x248>)
 8002112:	4a86      	ldr	r2, [pc, #536]	@ (800232c <main+0x250>)
 8002114:	611a      	str	r2, [r3, #16]
  bno055_.bus_write = bno055_write;
 8002116:	4b83      	ldr	r3, [pc, #524]	@ (8002324 <main+0x248>)
 8002118:	4a85      	ldr	r2, [pc, #532]	@ (8002330 <main+0x254>)
 800211a:	60da      	str	r2, [r3, #12]

  if(bno055_init(&bno055_) != BNO055_SUCCESS)
 800211c:	4b81      	ldr	r3, [pc, #516]	@ (8002324 <main+0x248>)
 800211e:	0018      	movs	r0, r3
 8002120:	f7fe fc94 	bl	8000a4c <bno055_init>
 8002124:	1e03      	subs	r3, r0, #0
 8002126:	d001      	beq.n	800212c <main+0x50>
  {
	  Error_Handler();
 8002128:	f000 fb74 	bl	8002814 <Error_Handler>
  }

  power_mode = BNO055_POWER_MODE_NORMAL;
 800212c:	4b81      	ldr	r3, [pc, #516]	@ (8002334 <main+0x258>)
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]

  comres += bno055_set_power_mode(power_mode);
 8002132:	4b80      	ldr	r3, [pc, #512]	@ (8002334 <main+0x258>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	0018      	movs	r0, r3
 8002138:	f7ff ff2e 	bl	8001f98 <bno055_set_power_mode>
 800213c:	0003      	movs	r3, r0
 800213e:	001a      	movs	r2, r3
 8002140:	4b7d      	ldr	r3, [pc, #500]	@ (8002338 <main+0x25c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	18d2      	adds	r2, r2, r3
 8002146:	4b7c      	ldr	r3, [pc, #496]	@ (8002338 <main+0x25c>)
 8002148:	601a      	str	r2, [r3, #0]

  comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 800214a:	200c      	movs	r0, #12
 800214c:	f7ff fe2c 	bl	8001da8 <bno055_set_operation_mode>
 8002150:	0003      	movs	r3, r0
 8002152:	001a      	movs	r2, r3
 8002154:	4b78      	ldr	r3, [pc, #480]	@ (8002338 <main+0x25c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	18d2      	adds	r2, r2, r3
 800215a:	4b77      	ldr	r3, [pc, #476]	@ (8002338 <main+0x25c>)
 800215c:	601a      	str	r2, [r3, #0]

  Global_Receive_Buff[0] = '$';
 800215e:	4b77      	ldr	r3, [pc, #476]	@ (800233c <main+0x260>)
 8002160:	2224      	movs	r2, #36	@ 0x24
 8002162:	701a      	strb	r2, [r3, #0]
  strcpy(&Global_Receive_Buff[1], ";S:");
 8002164:	4a76      	ldr	r2, [pc, #472]	@ (8002340 <main+0x264>)
 8002166:	4b77      	ldr	r3, [pc, #476]	@ (8002344 <main+0x268>)
 8002168:	0010      	movs	r0, r2
 800216a:	0019      	movs	r1, r3
 800216c:	2304      	movs	r3, #4
 800216e:	001a      	movs	r2, r3
 8002170:	f004 fd80 	bl	8006c74 <memcpy>
  Global_Receive_Buff[8] = ',';
 8002174:	4b71      	ldr	r3, [pc, #452]	@ (800233c <main+0x260>)
 8002176:	222c      	movs	r2, #44	@ 0x2c
 8002178:	721a      	strb	r2, [r3, #8]
  Global_Receive_Buff[13] = ',';
 800217a:	4b70      	ldr	r3, [pc, #448]	@ (800233c <main+0x260>)
 800217c:	222c      	movs	r2, #44	@ 0x2c
 800217e:	735a      	strb	r2, [r3, #13]
  strcpy(&Global_Receive_Buff[18], ";M:");
 8002180:	4a71      	ldr	r2, [pc, #452]	@ (8002348 <main+0x26c>)
 8002182:	4b72      	ldr	r3, [pc, #456]	@ (800234c <main+0x270>)
 8002184:	0010      	movs	r0, r2
 8002186:	0019      	movs	r1, r3
 8002188:	2304      	movs	r3, #4
 800218a:	001a      	movs	r2, r3
 800218c:	f004 fd72 	bl	8006c74 <memcpy>
  Global_Receive_Buff[24] = ',';
 8002190:	4b6a      	ldr	r3, [pc, #424]	@ (800233c <main+0x260>)
 8002192:	222c      	movs	r2, #44	@ 0x2c
 8002194:	761a      	strb	r2, [r3, #24]
  strcpy(&Global_Receive_Buff[28], ";!");
 8002196:	4b6e      	ldr	r3, [pc, #440]	@ (8002350 <main+0x274>)
 8002198:	4a6e      	ldr	r2, [pc, #440]	@ (8002354 <main+0x278>)
 800219a:	8811      	ldrh	r1, [r2, #0]
 800219c:	8019      	strh	r1, [r3, #0]
 800219e:	7892      	ldrb	r2, [r2, #2]
 80021a0:	709a      	strb	r2, [r3, #2]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  comres += bno055_read_accel_xyz(&accel_xyz);
 80021a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002358 <main+0x27c>)
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7fe fdbd 	bl	8000d24 <bno055_read_accel_xyz>
 80021aa:	0003      	movs	r3, r0
 80021ac:	001a      	movs	r2, r3
 80021ae:	4b62      	ldr	r3, [pc, #392]	@ (8002338 <main+0x25c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	18d2      	adds	r2, r2, r3
 80021b4:	4b60      	ldr	r3, [pc, #384]	@ (8002338 <main+0x25c>)
 80021b6:	601a      	str	r2, [r3, #0]
	  comres += bno055_read_mag_xyz(&mag_xyz);
 80021b8:	4b68      	ldr	r3, [pc, #416]	@ (800235c <main+0x280>)
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7fe fe40 	bl	8000e40 <bno055_read_mag_xyz>
 80021c0:	0003      	movs	r3, r0
 80021c2:	001a      	movs	r2, r3
 80021c4:	4b5c      	ldr	r3, [pc, #368]	@ (8002338 <main+0x25c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	18d2      	adds	r2, r2, r3
 80021ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002338 <main+0x25c>)
 80021cc:	601a      	str	r2, [r3, #0]
	  comres += bno055_read_gyro_xyz(&gyro_xyz);
 80021ce:	4b64      	ldr	r3, [pc, #400]	@ (8002360 <main+0x284>)
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7fe fec3 	bl	8000f5c <bno055_read_gyro_xyz>
 80021d6:	0003      	movs	r3, r0
 80021d8:	001a      	movs	r2, r3
 80021da:	4b57      	ldr	r3, [pc, #348]	@ (8002338 <main+0x25c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	18d2      	adds	r2, r2, r3
 80021e0:	4b55      	ldr	r3, [pc, #340]	@ (8002338 <main+0x25c>)
 80021e2:	601a      	str	r2, [r3, #0]
	  comres += bno055_read_gravity_xyz(&gravity_xyz);
 80021e4:	4b5f      	ldr	r3, [pc, #380]	@ (8002364 <main+0x288>)
 80021e6:	0018      	movs	r0, r3
 80021e8:	f7fe ffd4 	bl	8001194 <bno055_read_gravity_xyz>
 80021ec:	0003      	movs	r3, r0
 80021ee:	001a      	movs	r2, r3
 80021f0:	4b51      	ldr	r3, [pc, #324]	@ (8002338 <main+0x25c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	18d2      	adds	r2, r2, r3
 80021f6:	4b50      	ldr	r3, [pc, #320]	@ (8002338 <main+0x25c>)
 80021f8:	601a      	str	r2, [r3, #0]
	  comres += bno055_read_euler_hrp(&euler_hrp);
 80021fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002368 <main+0x28c>)
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7fe ff3b 	bl	8001078 <bno055_read_euler_hrp>
 8002202:	0003      	movs	r3, r0
 8002204:	001a      	movs	r2, r3
 8002206:	4b4c      	ldr	r3, [pc, #304]	@ (8002338 <main+0x25c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	18d2      	adds	r2, r2, r3
 800220c:	4b4a      	ldr	r3, [pc, #296]	@ (8002338 <main+0x25c>)
 800220e:	601a      	str	r2, [r3, #0]

	  //Datas converted to double
	  comres += bno055_convert_double_accel_xyz_mg(&d_accel_xyz);
 8002210:	4b56      	ldr	r3, [pc, #344]	@ (800236c <main+0x290>)
 8002212:	0018      	movs	r0, r3
 8002214:	f7ff f84c 	bl	80012b0 <bno055_convert_double_accel_xyz_mg>
 8002218:	0003      	movs	r3, r0
 800221a:	001a      	movs	r2, r3
 800221c:	4b46      	ldr	r3, [pc, #280]	@ (8002338 <main+0x25c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	18d2      	adds	r2, r2, r3
 8002222:	4b45      	ldr	r3, [pc, #276]	@ (8002338 <main+0x25c>)
 8002224:	601a      	str	r2, [r3, #0]
	  comres += bno055_convert_double_mag_xyz_uT(&d_mag_xyz);
 8002226:	4b52      	ldr	r3, [pc, #328]	@ (8002370 <main+0x294>)
 8002228:	0018      	movs	r0, r3
 800222a:	f7ff f8b9 	bl	80013a0 <bno055_convert_double_mag_xyz_uT>
 800222e:	0003      	movs	r3, r0
 8002230:	001a      	movs	r2, r3
 8002232:	4b41      	ldr	r3, [pc, #260]	@ (8002338 <main+0x25c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	18d2      	adds	r2, r2, r3
 8002238:	4b3f      	ldr	r3, [pc, #252]	@ (8002338 <main+0x25c>)
 800223a:	601a      	str	r2, [r3, #0]
	  comres += bno055_convert_double_gyro_xyz_dps(&d_gyro_xyz);
 800223c:	4b4d      	ldr	r3, [pc, #308]	@ (8002374 <main+0x298>)
 800223e:	0018      	movs	r0, r3
 8002240:	f7ff f90a 	bl	8001458 <bno055_convert_double_gyro_xyz_dps>
 8002244:	0003      	movs	r3, r0
 8002246:	001a      	movs	r2, r3
 8002248:	4b3b      	ldr	r3, [pc, #236]	@ (8002338 <main+0x25c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	18d2      	adds	r2, r2, r3
 800224e:	4b3a      	ldr	r3, [pc, #232]	@ (8002338 <main+0x25c>)
 8002250:	601a      	str	r2, [r3, #0]
	  comres += bno055_convert_double_gravity_xyz_msq(&d_gravity_xyz);
 8002252:	4b49      	ldr	r3, [pc, #292]	@ (8002378 <main+0x29c>)
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff fa0b 	bl	8001670 <bno055_convert_double_gravity_xyz_msq>
 800225a:	0003      	movs	r3, r0
 800225c:	001a      	movs	r2, r3
 800225e:	4b36      	ldr	r3, [pc, #216]	@ (8002338 <main+0x25c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	18d2      	adds	r2, r2, r3
 8002264:	4b34      	ldr	r3, [pc, #208]	@ (8002338 <main+0x25c>)
 8002266:	601a      	str	r2, [r3, #0]
	  comres += bno055_convert_double_euler_hpr_deg(&d_euler_hpr);
 8002268:	4b44      	ldr	r3, [pc, #272]	@ (800237c <main+0x2a0>)
 800226a:	0018      	movs	r0, r3
 800226c:	f7ff f97a 	bl	8001564 <bno055_convert_double_euler_hpr_deg>
 8002270:	0003      	movs	r3, r0
 8002272:	001a      	movs	r2, r3
 8002274:	4b30      	ldr	r3, [pc, #192]	@ (8002338 <main+0x25c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	18d2      	adds	r2, r2, r3
 800227a:	4b2f      	ldr	r3, [pc, #188]	@ (8002338 <main+0x25c>)
 800227c:	601a      	str	r2, [r3, #0]

	  sprintf(temp, "%04d", (int)d_euler_hpr.r);
 800227e:	4b3f      	ldr	r3, [pc, #252]	@ (800237c <main+0x2a0>)
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	0010      	movs	r0, r2
 8002286:	0019      	movs	r1, r3
 8002288:	f7fe faec 	bl	8000864 <__aeabi_d2iz>
 800228c:	0002      	movs	r2, r0
 800228e:	493c      	ldr	r1, [pc, #240]	@ (8002380 <main+0x2a4>)
 8002290:	4b3c      	ldr	r3, [pc, #240]	@ (8002384 <main+0x2a8>)
 8002292:	0018      	movs	r0, r3
 8002294:	f004 fc98 	bl	8006bc8 <siprintf>
	  memcpy(&Global_Receive_Buff[4], temp, 4);
 8002298:	4b3a      	ldr	r3, [pc, #232]	@ (8002384 <main+0x2a8>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b27      	ldr	r3, [pc, #156]	@ (800233c <main+0x260>)
 800229e:	605a      	str	r2, [r3, #4]

	  sprintf(temp, "%04d", (int)d_euler_hpr.p);
 80022a0:	4b36      	ldr	r3, [pc, #216]	@ (800237c <main+0x2a0>)
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	0010      	movs	r0, r2
 80022a8:	0019      	movs	r1, r3
 80022aa:	f7fe fadb 	bl	8000864 <__aeabi_d2iz>
 80022ae:	0002      	movs	r2, r0
 80022b0:	4933      	ldr	r1, [pc, #204]	@ (8002380 <main+0x2a4>)
 80022b2:	4b34      	ldr	r3, [pc, #208]	@ (8002384 <main+0x2a8>)
 80022b4:	0018      	movs	r0, r3
 80022b6:	f004 fc87 	bl	8006bc8 <siprintf>
	  memcpy(&Global_Receive_Buff[9], temp, 4);
 80022ba:	4932      	ldr	r1, [pc, #200]	@ (8002384 <main+0x2a8>)
 80022bc:	4b32      	ldr	r3, [pc, #200]	@ (8002388 <main+0x2ac>)
 80022be:	2204      	movs	r2, #4
 80022c0:	0018      	movs	r0, r3
 80022c2:	f004 fcd7 	bl	8006c74 <memcpy>

	  sprintf(temp, "%04d", (int)d_euler_hpr.h);
 80022c6:	4b2d      	ldr	r3, [pc, #180]	@ (800237c <main+0x2a0>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	0010      	movs	r0, r2
 80022ce:	0019      	movs	r1, r3
 80022d0:	f7fe fac8 	bl	8000864 <__aeabi_d2iz>
 80022d4:	0002      	movs	r2, r0
 80022d6:	492a      	ldr	r1, [pc, #168]	@ (8002380 <main+0x2a4>)
 80022d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002384 <main+0x2a8>)
 80022da:	0018      	movs	r0, r3
 80022dc:	f004 fc74 	bl	8006bc8 <siprintf>
	  memcpy(&Global_Receive_Buff[14], temp, 4);
 80022e0:	4928      	ldr	r1, [pc, #160]	@ (8002384 <main+0x2a8>)
 80022e2:	4b2a      	ldr	r3, [pc, #168]	@ (800238c <main+0x2b0>)
 80022e4:	2204      	movs	r2, #4
 80022e6:	0018      	movs	r0, r3
 80022e8:	f004 fcc4 	bl	8006c74 <memcpy>

	  memset(&Global_Receive_Buff[21], '-', 3);
 80022ec:	4b28      	ldr	r3, [pc, #160]	@ (8002390 <main+0x2b4>)
 80022ee:	2203      	movs	r2, #3
 80022f0:	212d      	movs	r1, #45	@ 0x2d
 80022f2:	0018      	movs	r0, r3
 80022f4:	f004 fc8a 	bl	8006c0c <memset>
	  memset(&Global_Receive_Buff[25], '-', 3);
 80022f8:	4b26      	ldr	r3, [pc, #152]	@ (8002394 <main+0x2b8>)
 80022fa:	2203      	movs	r2, #3
 80022fc:	212d      	movs	r1, #45	@ 0x2d
 80022fe:	0018      	movs	r0, r3
 8002300:	f004 fc84 	bl	8006c0c <memset>
	  HAL_UART_Transmit(&huart1, (uint8_t*)&Global_Receive_Buff, 31, 100);
 8002304:	490d      	ldr	r1, [pc, #52]	@ (800233c <main+0x260>)
 8002306:	4824      	ldr	r0, [pc, #144]	@ (8002398 <main+0x2bc>)
 8002308:	2364      	movs	r3, #100	@ 0x64
 800230a:	221f      	movs	r2, #31
 800230c:	f003 fa3a 	bl	8005784 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8002310:	2064      	movs	r0, #100	@ 0x64
 8002312:	f000 fc97 	bl	8002c44 <HAL_Delay>
	  comres += bno055_read_accel_xyz(&accel_xyz);
 8002316:	46c0      	nop			@ (mov r8, r8)
 8002318:	e743      	b.n	80021a2 <main+0xc6>
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	200001f1 	.word	0x200001f1
 8002320:	2000015c 	.word	0x2000015c
 8002324:	2000021c 	.word	0x2000021c
 8002328:	08000a35 	.word	0x08000a35
 800232c:	080009d1 	.word	0x080009d1
 8002330:	08000975 	.word	0x08000975
 8002334:	20000234 	.word	0x20000234
 8002338:	20000000 	.word	0x20000000
 800233c:	200001f4 	.word	0x200001f4
 8002340:	200001f5 	.word	0x200001f5
 8002344:	0800751c 	.word	0x0800751c
 8002348:	20000206 	.word	0x20000206
 800234c:	08007520 	.word	0x08007520
 8002350:	20000210 	.word	0x20000210
 8002354:	08007524 	.word	0x08007524
 8002358:	20000238 	.word	0x20000238
 800235c:	20000240 	.word	0x20000240
 8002360:	20000248 	.word	0x20000248
 8002364:	20000258 	.word	0x20000258
 8002368:	20000250 	.word	0x20000250
 800236c:	20000260 	.word	0x20000260
 8002370:	20000278 	.word	0x20000278
 8002374:	20000290 	.word	0x20000290
 8002378:	200002c0 	.word	0x200002c0
 800237c:	200002a8 	.word	0x200002a8
 8002380:	08007528 	.word	0x08007528
 8002384:	20000214 	.word	0x20000214
 8002388:	200001fd 	.word	0x200001fd
 800238c:	20000202 	.word	0x20000202
 8002390:	20000209 	.word	0x20000209
 8002394:	2000020d 	.word	0x2000020d
 8002398:	200000d4 	.word	0x200000d4

0800239c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b095      	sub	sp, #84	@ 0x54
 80023a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023a2:	2420      	movs	r4, #32
 80023a4:	193b      	adds	r3, r7, r4
 80023a6:	0018      	movs	r0, r3
 80023a8:	2330      	movs	r3, #48	@ 0x30
 80023aa:	001a      	movs	r2, r3
 80023ac:	2100      	movs	r1, #0
 80023ae:	f004 fc2d 	bl	8006c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023b2:	2310      	movs	r3, #16
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	0018      	movs	r0, r3
 80023b8:	2310      	movs	r3, #16
 80023ba:	001a      	movs	r2, r3
 80023bc:	2100      	movs	r1, #0
 80023be:	f004 fc25 	bl	8006c0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023c2:	003b      	movs	r3, r7
 80023c4:	0018      	movs	r0, r3
 80023c6:	2310      	movs	r3, #16
 80023c8:	001a      	movs	r2, r3
 80023ca:	2100      	movs	r1, #0
 80023cc:	f004 fc1e 	bl	8006c0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023d0:	0021      	movs	r1, r4
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	2202      	movs	r2, #2
 80023d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	2201      	movs	r2, #1
 80023dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	2210      	movs	r2, #16
 80023e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	2202      	movs	r2, #2
 80023e8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023ea:	187b      	adds	r3, r7, r1
 80023ec:	2200      	movs	r2, #0
 80023ee:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80023f0:	187b      	adds	r3, r7, r1
 80023f2:	22a0      	movs	r2, #160	@ 0xa0
 80023f4:	0392      	lsls	r2, r2, #14
 80023f6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80023f8:	187b      	adds	r3, r7, r1
 80023fa:	2200      	movs	r2, #0
 80023fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	0018      	movs	r0, r3
 8002402:	f002 fc3f 	bl	8004c84 <HAL_RCC_OscConfig>
 8002406:	1e03      	subs	r3, r0, #0
 8002408:	d001      	beq.n	800240e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800240a:	f000 fa03 	bl	8002814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800240e:	2110      	movs	r1, #16
 8002410:	187b      	adds	r3, r7, r1
 8002412:	2207      	movs	r2, #7
 8002414:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002416:	187b      	adds	r3, r7, r1
 8002418:	2202      	movs	r2, #2
 800241a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800241c:	187b      	adds	r3, r7, r1
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002422:	187b      	adds	r3, r7, r1
 8002424:	2200      	movs	r2, #0
 8002426:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002428:	187b      	adds	r3, r7, r1
 800242a:	2101      	movs	r1, #1
 800242c:	0018      	movs	r0, r3
 800242e:	f002 ff43 	bl	80052b8 <HAL_RCC_ClockConfig>
 8002432:	1e03      	subs	r3, r0, #0
 8002434:	d001      	beq.n	800243a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002436:	f000 f9ed 	bl	8002814 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800243a:	003b      	movs	r3, r7
 800243c:	2221      	movs	r2, #33	@ 0x21
 800243e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002440:	003b      	movs	r3, r7
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002446:	003b      	movs	r3, r7
 8002448:	2200      	movs	r2, #0
 800244a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800244c:	003b      	movs	r3, r7
 800244e:	0018      	movs	r0, r3
 8002450:	f003 f876 	bl	8005540 <HAL_RCCEx_PeriphCLKConfig>
 8002454:	1e03      	subs	r3, r0, #0
 8002456:	d001      	beq.n	800245c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002458:	f000 f9dc 	bl	8002814 <Error_Handler>
  }
}
 800245c:	46c0      	nop			@ (mov r8, r8)
 800245e:	46bd      	mov	sp, r7
 8002460:	b015      	add	sp, #84	@ 0x54
 8002462:	bd90      	pop	{r4, r7, pc}

08002464 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002468:	4b1b      	ldr	r3, [pc, #108]	@ (80024d8 <MX_I2C1_Init+0x74>)
 800246a:	4a1c      	ldr	r2, [pc, #112]	@ (80024dc <MX_I2C1_Init+0x78>)
 800246c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800246e:	4b1a      	ldr	r3, [pc, #104]	@ (80024d8 <MX_I2C1_Init+0x74>)
 8002470:	4a1b      	ldr	r2, [pc, #108]	@ (80024e0 <MX_I2C1_Init+0x7c>)
 8002472:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002474:	4b18      	ldr	r3, [pc, #96]	@ (80024d8 <MX_I2C1_Init+0x74>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800247a:	4b17      	ldr	r3, [pc, #92]	@ (80024d8 <MX_I2C1_Init+0x74>)
 800247c:	2201      	movs	r2, #1
 800247e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002480:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <MX_I2C1_Init+0x74>)
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002486:	4b14      	ldr	r3, [pc, #80]	@ (80024d8 <MX_I2C1_Init+0x74>)
 8002488:	2200      	movs	r2, #0
 800248a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800248c:	4b12      	ldr	r3, [pc, #72]	@ (80024d8 <MX_I2C1_Init+0x74>)
 800248e:	2200      	movs	r2, #0
 8002490:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002492:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <MX_I2C1_Init+0x74>)
 8002494:	2200      	movs	r2, #0
 8002496:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002498:	4b0f      	ldr	r3, [pc, #60]	@ (80024d8 <MX_I2C1_Init+0x74>)
 800249a:	2200      	movs	r2, #0
 800249c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800249e:	4b0e      	ldr	r3, [pc, #56]	@ (80024d8 <MX_I2C1_Init+0x74>)
 80024a0:	0018      	movs	r0, r3
 80024a2:	f000 fee9 	bl	8003278 <HAL_I2C_Init>
 80024a6:	1e03      	subs	r3, r0, #0
 80024a8:	d001      	beq.n	80024ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80024aa:	f000 f9b3 	bl	8002814 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024ae:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <MX_I2C1_Init+0x74>)
 80024b0:	2100      	movs	r1, #0
 80024b2:	0018      	movs	r0, r3
 80024b4:	f002 fb4e 	bl	8004b54 <HAL_I2CEx_ConfigAnalogFilter>
 80024b8:	1e03      	subs	r3, r0, #0
 80024ba:	d001      	beq.n	80024c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80024bc:	f000 f9aa 	bl	8002814 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80024c0:	4b05      	ldr	r3, [pc, #20]	@ (80024d8 <MX_I2C1_Init+0x74>)
 80024c2:	2100      	movs	r1, #0
 80024c4:	0018      	movs	r0, r3
 80024c6:	f002 fb91 	bl	8004bec <HAL_I2CEx_ConfigDigitalFilter>
 80024ca:	1e03      	subs	r3, r0, #0
 80024cc:	d001      	beq.n	80024d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80024ce:	f000 f9a1 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000080 	.word	0x20000080
 80024dc:	40005400 	.word	0x40005400
 80024e0:	00201d2b 	.word	0x00201d2b

080024e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024e8:	4b14      	ldr	r3, [pc, #80]	@ (800253c <MX_USART1_UART_Init+0x58>)
 80024ea:	4a15      	ldr	r2, [pc, #84]	@ (8002540 <MX_USART1_UART_Init+0x5c>)
 80024ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024ee:	4b13      	ldr	r3, [pc, #76]	@ (800253c <MX_USART1_UART_Init+0x58>)
 80024f0:	22e1      	movs	r2, #225	@ 0xe1
 80024f2:	0252      	lsls	r2, r2, #9
 80024f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024f6:	4b11      	ldr	r3, [pc, #68]	@ (800253c <MX_USART1_UART_Init+0x58>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	@ (800253c <MX_USART1_UART_Init+0x58>)
 80024fe:	2200      	movs	r2, #0
 8002500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002502:	4b0e      	ldr	r3, [pc, #56]	@ (800253c <MX_USART1_UART_Init+0x58>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002508:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <MX_USART1_UART_Init+0x58>)
 800250a:	220c      	movs	r2, #12
 800250c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800250e:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <MX_USART1_UART_Init+0x58>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002514:	4b09      	ldr	r3, [pc, #36]	@ (800253c <MX_USART1_UART_Init+0x58>)
 8002516:	2200      	movs	r2, #0
 8002518:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800251a:	4b08      	ldr	r3, [pc, #32]	@ (800253c <MX_USART1_UART_Init+0x58>)
 800251c:	2200      	movs	r2, #0
 800251e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002520:	4b06      	ldr	r3, [pc, #24]	@ (800253c <MX_USART1_UART_Init+0x58>)
 8002522:	2200      	movs	r2, #0
 8002524:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002526:	4b05      	ldr	r3, [pc, #20]	@ (800253c <MX_USART1_UART_Init+0x58>)
 8002528:	0018      	movs	r0, r3
 800252a:	f003 f8d7 	bl	80056dc <HAL_UART_Init>
 800252e:	1e03      	subs	r3, r0, #0
 8002530:	d001      	beq.n	8002536 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002532:	f000 f96f 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200000d4 	.word	0x200000d4
 8002540:	40013800 	.word	0x40013800

08002544 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002548:	4b14      	ldr	r3, [pc, #80]	@ (800259c <MX_USART2_UART_Init+0x58>)
 800254a:	4a15      	ldr	r2, [pc, #84]	@ (80025a0 <MX_USART2_UART_Init+0x5c>)
 800254c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800254e:	4b13      	ldr	r3, [pc, #76]	@ (800259c <MX_USART2_UART_Init+0x58>)
 8002550:	22e1      	movs	r2, #225	@ 0xe1
 8002552:	0252      	lsls	r2, r2, #9
 8002554:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002556:	4b11      	ldr	r3, [pc, #68]	@ (800259c <MX_USART2_UART_Init+0x58>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800255c:	4b0f      	ldr	r3, [pc, #60]	@ (800259c <MX_USART2_UART_Init+0x58>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002562:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <MX_USART2_UART_Init+0x58>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002568:	4b0c      	ldr	r3, [pc, #48]	@ (800259c <MX_USART2_UART_Init+0x58>)
 800256a:	220c      	movs	r2, #12
 800256c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800256e:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <MX_USART2_UART_Init+0x58>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002574:	4b09      	ldr	r3, [pc, #36]	@ (800259c <MX_USART2_UART_Init+0x58>)
 8002576:	2200      	movs	r2, #0
 8002578:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800257a:	4b08      	ldr	r3, [pc, #32]	@ (800259c <MX_USART2_UART_Init+0x58>)
 800257c:	2200      	movs	r2, #0
 800257e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002580:	4b06      	ldr	r3, [pc, #24]	@ (800259c <MX_USART2_UART_Init+0x58>)
 8002582:	2200      	movs	r2, #0
 8002584:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002586:	4b05      	ldr	r3, [pc, #20]	@ (800259c <MX_USART2_UART_Init+0x58>)
 8002588:	0018      	movs	r0, r3
 800258a:	f003 f8a7 	bl	80056dc <HAL_UART_Init>
 800258e:	1e03      	subs	r3, r0, #0
 8002590:	d001      	beq.n	8002596 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002592:	f000 f93f 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	2000015c 	.word	0x2000015c
 80025a0:	40004400 	.word	0x40004400

080025a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b08b      	sub	sp, #44	@ 0x2c
 80025a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025aa:	2414      	movs	r4, #20
 80025ac:	193b      	adds	r3, r7, r4
 80025ae:	0018      	movs	r0, r3
 80025b0:	2314      	movs	r3, #20
 80025b2:	001a      	movs	r2, r3
 80025b4:	2100      	movs	r1, #0
 80025b6:	f004 fb29 	bl	8006c0c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ba:	4b39      	ldr	r3, [pc, #228]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	4b38      	ldr	r3, [pc, #224]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 80025c0:	2180      	movs	r1, #128	@ 0x80
 80025c2:	0309      	lsls	r1, r1, #12
 80025c4:	430a      	orrs	r2, r1
 80025c6:	615a      	str	r2, [r3, #20]
 80025c8:	4b35      	ldr	r3, [pc, #212]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	2380      	movs	r3, #128	@ 0x80
 80025ce:	031b      	lsls	r3, r3, #12
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025d6:	4b32      	ldr	r3, [pc, #200]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	4b31      	ldr	r3, [pc, #196]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 80025dc:	2180      	movs	r1, #128	@ 0x80
 80025de:	03c9      	lsls	r1, r1, #15
 80025e0:	430a      	orrs	r2, r1
 80025e2:	615a      	str	r2, [r3, #20]
 80025e4:	4b2e      	ldr	r3, [pc, #184]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	2380      	movs	r3, #128	@ 0x80
 80025ea:	03db      	lsls	r3, r3, #15
 80025ec:	4013      	ands	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	4b2b      	ldr	r3, [pc, #172]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	4b2a      	ldr	r3, [pc, #168]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 80025f8:	2180      	movs	r1, #128	@ 0x80
 80025fa:	0289      	lsls	r1, r1, #10
 80025fc:	430a      	orrs	r2, r1
 80025fe:	615a      	str	r2, [r3, #20]
 8002600:	4b27      	ldr	r3, [pc, #156]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	2380      	movs	r3, #128	@ 0x80
 8002606:	029b      	lsls	r3, r3, #10
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800260e:	4b24      	ldr	r3, [pc, #144]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	4b23      	ldr	r3, [pc, #140]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 8002614:	2180      	movs	r1, #128	@ 0x80
 8002616:	02c9      	lsls	r1, r1, #11
 8002618:	430a      	orrs	r2, r1
 800261a:	615a      	str	r2, [r3, #20]
 800261c:	4b20      	ldr	r3, [pc, #128]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	2380      	movs	r3, #128	@ 0x80
 8002622:	02db      	lsls	r3, r3, #11
 8002624:	4013      	ands	r3, r2
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800262a:	2380      	movs	r3, #128	@ 0x80
 800262c:	019b      	lsls	r3, r3, #6
 800262e:	481d      	ldr	r0, [pc, #116]	@ (80026a4 <MX_GPIO_Init+0x100>)
 8002630:	2200      	movs	r2, #0
 8002632:	0019      	movs	r1, r3
 8002634:	f000 fe02 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_485_GPIO_GPIO_Port, RS_485_GPIO_Pin, GPIO_PIN_RESET);
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	0119      	lsls	r1, r3, #4
 800263c:	2390      	movs	r3, #144	@ 0x90
 800263e:	05db      	lsls	r3, r3, #23
 8002640:	2200      	movs	r2, #0
 8002642:	0018      	movs	r0, r3
 8002644:	f000 fdfa 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002648:	193b      	adds	r3, r7, r4
 800264a:	2280      	movs	r2, #128	@ 0x80
 800264c:	0192      	lsls	r2, r2, #6
 800264e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002650:	193b      	adds	r3, r7, r4
 8002652:	2201      	movs	r2, #1
 8002654:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	193b      	adds	r3, r7, r4
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265c:	193b      	adds	r3, r7, r4
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002662:	193b      	adds	r3, r7, r4
 8002664:	4a0f      	ldr	r2, [pc, #60]	@ (80026a4 <MX_GPIO_Init+0x100>)
 8002666:	0019      	movs	r1, r3
 8002668:	0010      	movs	r0, r2
 800266a:	f000 fc77 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS_485_GPIO_Pin */
  GPIO_InitStruct.Pin = RS_485_GPIO_Pin;
 800266e:	0021      	movs	r1, r4
 8002670:	187b      	adds	r3, r7, r1
 8002672:	2280      	movs	r2, #128	@ 0x80
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002678:	187b      	adds	r3, r7, r1
 800267a:	2201      	movs	r2, #1
 800267c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	187b      	adds	r3, r7, r1
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	187b      	adds	r3, r7, r1
 8002686:	2200      	movs	r2, #0
 8002688:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RS_485_GPIO_GPIO_Port, &GPIO_InitStruct);
 800268a:	187a      	adds	r2, r7, r1
 800268c:	2390      	movs	r3, #144	@ 0x90
 800268e:	05db      	lsls	r3, r3, #23
 8002690:	0011      	movs	r1, r2
 8002692:	0018      	movs	r0, r3
 8002694:	f000 fc62 	bl	8002f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002698:	46c0      	nop			@ (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b00b      	add	sp, #44	@ 0x2c
 800269e:	bd90      	pop	{r4, r7, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	48000800 	.word	0x48000800

080026a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

	//İndex değerinin buffer boyutundan küçük olup olmadığı kontrol edilir
	if(indeks <= 13)
 80026b0:	4b41      	ldr	r3, [pc, #260]	@ (80027b8 <HAL_UART_RxCpltCallback+0x110>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b0d      	cmp	r3, #13
 80026b6:	d900      	bls.n	80026ba <HAL_UART_RxCpltCallback+0x12>
 80026b8:	e075      	b.n	80027a6 <HAL_UART_RxCpltCallback+0xfe>
	{
		RxBuff[indeks++] = RxChar;
 80026ba:	4b3f      	ldr	r3, [pc, #252]	@ (80027b8 <HAL_UART_RxCpltCallback+0x110>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	b2d1      	uxtb	r1, r2
 80026c2:	4a3d      	ldr	r2, [pc, #244]	@ (80027b8 <HAL_UART_RxCpltCallback+0x110>)
 80026c4:	7011      	strb	r1, [r2, #0]
 80026c6:	001a      	movs	r2, r3
 80026c8:	4b3c      	ldr	r3, [pc, #240]	@ (80027bc <HAL_UART_RxCpltCallback+0x114>)
 80026ca:	7819      	ldrb	r1, [r3, #0]
 80026cc:	4b3c      	ldr	r3, [pc, #240]	@ (80027c0 <HAL_UART_RxCpltCallback+0x118>)
 80026ce:	5499      	strb	r1, [r3, r2]

		if((RxChar == '!') && (RxBuff[0] == '$'))
 80026d0:	4b3a      	ldr	r3, [pc, #232]	@ (80027bc <HAL_UART_RxCpltCallback+0x114>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b21      	cmp	r3, #33	@ 0x21
 80026d6:	d137      	bne.n	8002748 <HAL_UART_RxCpltCallback+0xa0>
 80026d8:	4b39      	ldr	r3, [pc, #228]	@ (80027c0 <HAL_UART_RxCpltCallback+0x118>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b24      	cmp	r3, #36	@ 0x24
 80026de:	d133      	bne.n	8002748 <HAL_UART_RxCpltCallback+0xa0>
		{
			//Buffer'a gelen Servo-2 verilerini gönderilecek genel buffer'a kaydet
			for(uint8_t i=0; i<3; i++)
 80026e0:	230f      	movs	r3, #15
 80026e2:	18fb      	adds	r3, r7, r3
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e00f      	b.n	800270a <HAL_UART_RxCpltCallback+0x62>
			{
				Global_Receive_Buff[21+i] = RxBuff[2+i];
 80026ea:	200f      	movs	r0, #15
 80026ec:	183b      	adds	r3, r7, r0
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	1c9a      	adds	r2, r3, #2
 80026f2:	183b      	adds	r3, r7, r0
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	3315      	adds	r3, #21
 80026f8:	4931      	ldr	r1, [pc, #196]	@ (80027c0 <HAL_UART_RxCpltCallback+0x118>)
 80026fa:	5c89      	ldrb	r1, [r1, r2]
 80026fc:	4a31      	ldr	r2, [pc, #196]	@ (80027c4 <HAL_UART_RxCpltCallback+0x11c>)
 80026fe:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i=0; i<3; i++)
 8002700:	183b      	adds	r3, r7, r0
 8002702:	781a      	ldrb	r2, [r3, #0]
 8002704:	183b      	adds	r3, r7, r0
 8002706:	3201      	adds	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
 800270a:	230f      	movs	r3, #15
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d9ea      	bls.n	80026ea <HAL_UART_RxCpltCallback+0x42>
			}

			//Buffer'a gelen Servo-1 verilerini gönderilecek genel buffer'a kaydet
			for(uint8_t i=0; i<3; i++)
 8002714:	230e      	movs	r3, #14
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e00f      	b.n	800273e <HAL_UART_RxCpltCallback+0x96>
			{
				Global_Receive_Buff[25+i] = RxBuff[6+i];
 800271e:	200e      	movs	r0, #14
 8002720:	183b      	adds	r3, r7, r0
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	1d9a      	adds	r2, r3, #6
 8002726:	183b      	adds	r3, r7, r0
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	3319      	adds	r3, #25
 800272c:	4924      	ldr	r1, [pc, #144]	@ (80027c0 <HAL_UART_RxCpltCallback+0x118>)
 800272e:	5c89      	ldrb	r1, [r1, r2]
 8002730:	4a24      	ldr	r2, [pc, #144]	@ (80027c4 <HAL_UART_RxCpltCallback+0x11c>)
 8002732:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i=0; i<3; i++)
 8002734:	183b      	adds	r3, r7, r0
 8002736:	781a      	ldrb	r2, [r3, #0]
 8002738:	183b      	adds	r3, r7, r0
 800273a:	3201      	adds	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	230e      	movs	r3, #14
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d9ea      	bls.n	800271e <HAL_UART_RxCpltCallback+0x76>
			}
		}

		//Bitiş karakteri geldiğinde bu bloğa gir
		if(RxChar == '!')
 8002748:	4b1c      	ldr	r3, [pc, #112]	@ (80027bc <HAL_UART_RxCpltCallback+0x114>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b21      	cmp	r3, #33	@ 0x21
 800274e:	d118      	bne.n	8002782 <HAL_UART_RxCpltCallback+0xda>
		{
			//Buffer'da toplanan paketi ayrıştır, format yanlışsa Error_Handler'a gir
			if(ParsePacket(RxBuff) != HAL_OK)
 8002750:	4b1b      	ldr	r3, [pc, #108]	@ (80027c0 <HAL_UART_RxCpltCallback+0x118>)
 8002752:	0018      	movs	r0, r3
 8002754:	f004 fa10 	bl	8006b78 <ParsePacket>
 8002758:	1e03      	subs	r3, r0, #0
 800275a:	d007      	beq.n	800276c <HAL_UART_RxCpltCallback+0xc4>
			{
				memset(&RxBuff, 0, 13);
 800275c:	4b18      	ldr	r3, [pc, #96]	@ (80027c0 <HAL_UART_RxCpltCallback+0x118>)
 800275e:	220d      	movs	r2, #13
 8002760:	2100      	movs	r1, #0
 8002762:	0018      	movs	r0, r3
 8002764:	f004 fa52 	bl	8006c0c <memset>
				Error_Handler();
 8002768:	f000 f854 	bl	8002814 <Error_Handler>
			}

			//Toplanan paketi gönder
			RS485_TransmitData(Global_Receive_Buff);
 800276c:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <HAL_UART_RxCpltCallback+0x11c>)
 800276e:	0018      	movs	r0, r3
 8002770:	f000 f82c 	bl	80027cc <RS485_TransmitData>

			//Buffer'ı sıfırla
			memset(&RxBuff, 0, 13);
 8002774:	4b12      	ldr	r3, [pc, #72]	@ (80027c0 <HAL_UART_RxCpltCallback+0x118>)
 8002776:	220d      	movs	r2, #13
 8002778:	2100      	movs	r1, #0
 800277a:	0018      	movs	r0, r3
 800277c:	f004 fa46 	bl	8006c0c <memset>
 8002780:	e011      	b.n	80027a6 <HAL_UART_RxCpltCallback+0xfe>
		}
		//'\r' veya '\n' karakterleri gelmişse bu bloğa gir. İndeksi sıfırla ve tekrar kesme bekle
		else if(RxChar == '\r' || RxChar == '\n')
 8002782:	4b0e      	ldr	r3, [pc, #56]	@ (80027bc <HAL_UART_RxCpltCallback+0x114>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b0d      	cmp	r3, #13
 8002788:	d003      	beq.n	8002792 <HAL_UART_RxCpltCallback+0xea>
 800278a:	4b0c      	ldr	r3, [pc, #48]	@ (80027bc <HAL_UART_RxCpltCallback+0x114>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b0a      	cmp	r3, #10
 8002790:	d109      	bne.n	80027a6 <HAL_UART_RxCpltCallback+0xfe>
		{
			indeks = 0;
 8002792:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_UART_RxCpltCallback+0x110>)
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &RxChar, 1);
 8002798:	4908      	ldr	r1, [pc, #32]	@ (80027bc <HAL_UART_RxCpltCallback+0x114>)
 800279a:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <HAL_UART_RxCpltCallback+0x120>)
 800279c:	2201      	movs	r2, #1
 800279e:	0018      	movs	r0, r3
 80027a0:	f003 f88f 	bl	80058c2 <HAL_UART_Receive_IT>
			return;
 80027a4:	e005      	b.n	80027b2 <HAL_UART_RxCpltCallback+0x10a>
		}
	}
	HAL_UART_Receive_IT(&huart2, &RxChar, 1);
 80027a6:	4905      	ldr	r1, [pc, #20]	@ (80027bc <HAL_UART_RxCpltCallback+0x114>)
 80027a8:	4b07      	ldr	r3, [pc, #28]	@ (80027c8 <HAL_UART_RxCpltCallback+0x120>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	0018      	movs	r0, r3
 80027ae:	f003 f888 	bl	80058c2 <HAL_UART_Receive_IT>
}
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b004      	add	sp, #16
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000213 	.word	0x20000213
 80027bc:	200001f1 	.word	0x200001f1
 80027c0:	200001e4 	.word	0x200001e4
 80027c4:	200001f4 	.word	0x200001f4
 80027c8:	2000015c 	.word	0x2000015c

080027cc <RS485_TransmitData>:

void RS485_TransmitData(char* buffer)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RS_485_GPIO_GPIO_Port, RS_485_GPIO_Pin, GPIO_PIN_SET);
 80027d4:	2380      	movs	r3, #128	@ 0x80
 80027d6:	0119      	lsls	r1, r3, #4
 80027d8:	2390      	movs	r3, #144	@ 0x90
 80027da:	05db      	lsls	r3, r3, #23
 80027dc:	2201      	movs	r2, #1
 80027de:	0018      	movs	r0, r3
 80027e0:	f000 fd2c 	bl	800323c <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, (uint8_t*)&Global_Receive_Buff, 31, 1000);
 80027e4:	23fa      	movs	r3, #250	@ 0xfa
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4908      	ldr	r1, [pc, #32]	@ (800280c <RS485_TransmitData+0x40>)
 80027ea:	4809      	ldr	r0, [pc, #36]	@ (8002810 <RS485_TransmitData+0x44>)
 80027ec:	221f      	movs	r2, #31
 80027ee:	f002 ffc9 	bl	8005784 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(RS_485_GPIO_GPIO_Port, RS_485_GPIO_Pin, GPIO_PIN_RESET);
 80027f2:	2380      	movs	r3, #128	@ 0x80
 80027f4:	0119      	lsls	r1, r3, #4
 80027f6:	2390      	movs	r3, #144	@ 0x90
 80027f8:	05db      	lsls	r3, r3, #23
 80027fa:	2200      	movs	r2, #0
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 fd1d 	bl	800323c <HAL_GPIO_WritePin>
}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	46bd      	mov	sp, r7
 8002806:	b002      	add	sp, #8
 8002808:	bd80      	pop	{r7, pc}
 800280a:	46c0      	nop			@ (mov r8, r8)
 800280c:	200001f4 	.word	0x200001f4
 8002810:	200000d4 	.word	0x200000d4

08002814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002818:	b672      	cpsid	i
}
 800281a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800281c:	46c0      	nop			@ (mov r8, r8)
 800281e:	e7fd      	b.n	800281c <Error_Handler+0x8>

08002820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002826:	4b0f      	ldr	r3, [pc, #60]	@ (8002864 <HAL_MspInit+0x44>)
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	4b0e      	ldr	r3, [pc, #56]	@ (8002864 <HAL_MspInit+0x44>)
 800282c:	2101      	movs	r1, #1
 800282e:	430a      	orrs	r2, r1
 8002830:	619a      	str	r2, [r3, #24]
 8002832:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <HAL_MspInit+0x44>)
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	2201      	movs	r2, #1
 8002838:	4013      	ands	r3, r2
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <HAL_MspInit+0x44>)
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	4b08      	ldr	r3, [pc, #32]	@ (8002864 <HAL_MspInit+0x44>)
 8002844:	2180      	movs	r1, #128	@ 0x80
 8002846:	0549      	lsls	r1, r1, #21
 8002848:	430a      	orrs	r2, r1
 800284a:	61da      	str	r2, [r3, #28]
 800284c:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <HAL_MspInit+0x44>)
 800284e:	69da      	ldr	r2, [r3, #28]
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	055b      	lsls	r3, r3, #21
 8002854:	4013      	ands	r3, r2
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800285a:	46c0      	nop			@ (mov r8, r8)
 800285c:	46bd      	mov	sp, r7
 800285e:	b002      	add	sp, #8
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			@ (mov r8, r8)
 8002864:	40021000 	.word	0x40021000

08002868 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002868:	b590      	push	{r4, r7, lr}
 800286a:	b08b      	sub	sp, #44	@ 0x2c
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	2414      	movs	r4, #20
 8002872:	193b      	adds	r3, r7, r4
 8002874:	0018      	movs	r0, r3
 8002876:	2314      	movs	r3, #20
 8002878:	001a      	movs	r2, r3
 800287a:	2100      	movs	r1, #0
 800287c:	f004 f9c6 	bl	8006c0c <memset>
  if(hi2c->Instance==I2C1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a20      	ldr	r2, [pc, #128]	@ (8002908 <HAL_I2C_MspInit+0xa0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d139      	bne.n	80028fe <HAL_I2C_MspInit+0x96>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288a:	4b20      	ldr	r3, [pc, #128]	@ (800290c <HAL_I2C_MspInit+0xa4>)
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	4b1f      	ldr	r3, [pc, #124]	@ (800290c <HAL_I2C_MspInit+0xa4>)
 8002890:	2180      	movs	r1, #128	@ 0x80
 8002892:	02c9      	lsls	r1, r1, #11
 8002894:	430a      	orrs	r2, r1
 8002896:	615a      	str	r2, [r3, #20]
 8002898:	4b1c      	ldr	r3, [pc, #112]	@ (800290c <HAL_I2C_MspInit+0xa4>)
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	02db      	lsls	r3, r3, #11
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028a6:	0021      	movs	r1, r4
 80028a8:	187b      	adds	r3, r7, r1
 80028aa:	22c0      	movs	r2, #192	@ 0xc0
 80028ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ae:	187b      	adds	r3, r7, r1
 80028b0:	2212      	movs	r2, #18
 80028b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	187b      	adds	r3, r7, r1
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028ba:	187b      	adds	r3, r7, r1
 80028bc:	2203      	movs	r2, #3
 80028be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80028c0:	187b      	adds	r3, r7, r1
 80028c2:	2201      	movs	r2, #1
 80028c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	4a11      	ldr	r2, [pc, #68]	@ (8002910 <HAL_I2C_MspInit+0xa8>)
 80028ca:	0019      	movs	r1, r3
 80028cc:	0010      	movs	r0, r2
 80028ce:	f000 fb45 	bl	8002f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028d2:	4b0e      	ldr	r3, [pc, #56]	@ (800290c <HAL_I2C_MspInit+0xa4>)
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	4b0d      	ldr	r3, [pc, #52]	@ (800290c <HAL_I2C_MspInit+0xa4>)
 80028d8:	2180      	movs	r1, #128	@ 0x80
 80028da:	0389      	lsls	r1, r1, #14
 80028dc:	430a      	orrs	r2, r1
 80028de:	61da      	str	r2, [r3, #28]
 80028e0:	4b0a      	ldr	r3, [pc, #40]	@ (800290c <HAL_I2C_MspInit+0xa4>)
 80028e2:	69da      	ldr	r2, [r3, #28]
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	039b      	lsls	r3, r3, #14
 80028e8:	4013      	ands	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2100      	movs	r1, #0
 80028f2:	2017      	movs	r0, #23
 80028f4:	f000 fa76 	bl	8002de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80028f8:	2017      	movs	r0, #23
 80028fa:	f000 fa88 	bl	8002e0e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	46bd      	mov	sp, r7
 8002902:	b00b      	add	sp, #44	@ 0x2c
 8002904:	bd90      	pop	{r4, r7, pc}
 8002906:	46c0      	nop			@ (mov r8, r8)
 8002908:	40005400 	.word	0x40005400
 800290c:	40021000 	.word	0x40021000
 8002910:	48000400 	.word	0x48000400

08002914 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b08d      	sub	sp, #52	@ 0x34
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	241c      	movs	r4, #28
 800291e:	193b      	adds	r3, r7, r4
 8002920:	0018      	movs	r0, r3
 8002922:	2314      	movs	r3, #20
 8002924:	001a      	movs	r2, r3
 8002926:	2100      	movs	r1, #0
 8002928:	f004 f970 	bl	8006c0c <memset>
  if(huart->Instance==USART1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a3d      	ldr	r2, [pc, #244]	@ (8002a28 <HAL_UART_MspInit+0x114>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d134      	bne.n	80029a0 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002936:	4b3d      	ldr	r3, [pc, #244]	@ (8002a2c <HAL_UART_MspInit+0x118>)
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a2c <HAL_UART_MspInit+0x118>)
 800293c:	2180      	movs	r1, #128	@ 0x80
 800293e:	01c9      	lsls	r1, r1, #7
 8002940:	430a      	orrs	r2, r1
 8002942:	619a      	str	r2, [r3, #24]
 8002944:	4b39      	ldr	r3, [pc, #228]	@ (8002a2c <HAL_UART_MspInit+0x118>)
 8002946:	699a      	ldr	r2, [r3, #24]
 8002948:	2380      	movs	r3, #128	@ 0x80
 800294a:	01db      	lsls	r3, r3, #7
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002952:	4b36      	ldr	r3, [pc, #216]	@ (8002a2c <HAL_UART_MspInit+0x118>)
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	4b35      	ldr	r3, [pc, #212]	@ (8002a2c <HAL_UART_MspInit+0x118>)
 8002958:	2180      	movs	r1, #128	@ 0x80
 800295a:	0289      	lsls	r1, r1, #10
 800295c:	430a      	orrs	r2, r1
 800295e:	615a      	str	r2, [r3, #20]
 8002960:	4b32      	ldr	r3, [pc, #200]	@ (8002a2c <HAL_UART_MspInit+0x118>)
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	2380      	movs	r3, #128	@ 0x80
 8002966:	029b      	lsls	r3, r3, #10
 8002968:	4013      	ands	r3, r2
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800296e:	193b      	adds	r3, r7, r4
 8002970:	22c0      	movs	r2, #192	@ 0xc0
 8002972:	00d2      	lsls	r2, r2, #3
 8002974:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002976:	0021      	movs	r1, r4
 8002978:	187b      	adds	r3, r7, r1
 800297a:	2202      	movs	r2, #2
 800297c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	187b      	adds	r3, r7, r1
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002984:	187b      	adds	r3, r7, r1
 8002986:	2203      	movs	r2, #3
 8002988:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800298a:	187b      	adds	r3, r7, r1
 800298c:	2201      	movs	r2, #1
 800298e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002990:	187a      	adds	r2, r7, r1
 8002992:	2390      	movs	r3, #144	@ 0x90
 8002994:	05db      	lsls	r3, r3, #23
 8002996:	0011      	movs	r1, r2
 8002998:	0018      	movs	r0, r3
 800299a:	f000 fadf 	bl	8002f5c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800299e:	e03f      	b.n	8002a20 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a22      	ldr	r2, [pc, #136]	@ (8002a30 <HAL_UART_MspInit+0x11c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d13a      	bne.n	8002a20 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029aa:	4b20      	ldr	r3, [pc, #128]	@ (8002a2c <HAL_UART_MspInit+0x118>)
 80029ac:	69da      	ldr	r2, [r3, #28]
 80029ae:	4b1f      	ldr	r3, [pc, #124]	@ (8002a2c <HAL_UART_MspInit+0x118>)
 80029b0:	2180      	movs	r1, #128	@ 0x80
 80029b2:	0289      	lsls	r1, r1, #10
 80029b4:	430a      	orrs	r2, r1
 80029b6:	61da      	str	r2, [r3, #28]
 80029b8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a2c <HAL_UART_MspInit+0x118>)
 80029ba:	69da      	ldr	r2, [r3, #28]
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	029b      	lsls	r3, r3, #10
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <HAL_UART_MspInit+0x118>)
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	4b18      	ldr	r3, [pc, #96]	@ (8002a2c <HAL_UART_MspInit+0x118>)
 80029cc:	2180      	movs	r1, #128	@ 0x80
 80029ce:	0289      	lsls	r1, r1, #10
 80029d0:	430a      	orrs	r2, r1
 80029d2:	615a      	str	r2, [r3, #20]
 80029d4:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <HAL_UART_MspInit+0x118>)
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	2380      	movs	r3, #128	@ 0x80
 80029da:	029b      	lsls	r3, r3, #10
 80029dc:	4013      	ands	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029e2:	211c      	movs	r1, #28
 80029e4:	187b      	adds	r3, r7, r1
 80029e6:	220c      	movs	r2, #12
 80029e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ea:	187b      	adds	r3, r7, r1
 80029ec:	2202      	movs	r2, #2
 80029ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	187b      	adds	r3, r7, r1
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029f6:	187b      	adds	r3, r7, r1
 80029f8:	2203      	movs	r2, #3
 80029fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	2201      	movs	r2, #1
 8002a00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a02:	187a      	adds	r2, r7, r1
 8002a04:	2390      	movs	r3, #144	@ 0x90
 8002a06:	05db      	lsls	r3, r3, #23
 8002a08:	0011      	movs	r1, r2
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f000 faa6 	bl	8002f5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2100      	movs	r1, #0
 8002a14:	201c      	movs	r0, #28
 8002a16:	f000 f9e5 	bl	8002de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a1a:	201c      	movs	r0, #28
 8002a1c:	f000 f9f7 	bl	8002e0e <HAL_NVIC_EnableIRQ>
}
 8002a20:	46c0      	nop			@ (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b00d      	add	sp, #52	@ 0x34
 8002a26:	bd90      	pop	{r4, r7, pc}
 8002a28:	40013800 	.word	0x40013800
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40004400 	.word	0x40004400

08002a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a38:	46c0      	nop			@ (mov r8, r8)
 8002a3a:	e7fd      	b.n	8002a38 <NMI_Handler+0x4>

08002a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a40:	46c0      	nop			@ (mov r8, r8)
 8002a42:	e7fd      	b.n	8002a40 <HardFault_Handler+0x4>

08002a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a48:	46c0      	nop			@ (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a5c:	f000 f8d6 	bl	8002c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a60:	46c0      	nop			@ (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 global interrupt.
  */
void I2C1_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8002a6c:	4b09      	ldr	r3, [pc, #36]	@ (8002a94 <I2C1_IRQHandler+0x2c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	23e0      	movs	r3, #224	@ 0xe0
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4013      	ands	r3, r2
 8002a78:	d004      	beq.n	8002a84 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002a7a:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <I2C1_IRQHandler+0x2c>)
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 ff1d 	bl	80038bc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002a82:	e003      	b.n	8002a8c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002a84:	4b03      	ldr	r3, [pc, #12]	@ (8002a94 <I2C1_IRQHandler+0x2c>)
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 fefe 	bl	8003888 <HAL_I2C_EV_IRQHandler>
}
 8002a8c:	46c0      	nop			@ (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	20000080 	.word	0x20000080

08002a98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a9c:	4b03      	ldr	r3, [pc, #12]	@ (8002aac <USART2_IRQHandler+0x14>)
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f002 ff66 	bl	8005970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002aa4:	46c0      	nop			@ (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	2000015c 	.word	0x2000015c

08002ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ab8:	4a14      	ldr	r2, [pc, #80]	@ (8002b0c <_sbrk+0x5c>)
 8002aba:	4b15      	ldr	r3, [pc, #84]	@ (8002b10 <_sbrk+0x60>)
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ac4:	4b13      	ldr	r3, [pc, #76]	@ (8002b14 <_sbrk+0x64>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002acc:	4b11      	ldr	r3, [pc, #68]	@ (8002b14 <_sbrk+0x64>)
 8002ace:	4a12      	ldr	r2, [pc, #72]	@ (8002b18 <_sbrk+0x68>)
 8002ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ad2:	4b10      	ldr	r3, [pc, #64]	@ (8002b14 <_sbrk+0x64>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	18d3      	adds	r3, r2, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d207      	bcs.n	8002af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ae0:	f004 f89c 	bl	8006c1c <__errno>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	220c      	movs	r2, #12
 8002ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aea:	2301      	movs	r3, #1
 8002aec:	425b      	negs	r3, r3
 8002aee:	e009      	b.n	8002b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002af0:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <_sbrk+0x64>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002af6:	4b07      	ldr	r3, [pc, #28]	@ (8002b14 <_sbrk+0x64>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	18d2      	adds	r2, r2, r3
 8002afe:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <_sbrk+0x64>)
 8002b00:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002b02:	68fb      	ldr	r3, [r7, #12]
}
 8002b04:	0018      	movs	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b006      	add	sp, #24
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20002000 	.word	0x20002000
 8002b10:	00000400 	.word	0x00000400
 8002b14:	200002d8 	.word	0x200002d8
 8002b18:	20000428 	.word	0x20000428

08002b1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002b20:	46c0      	nop			@ (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b28:	480d      	ldr	r0, [pc, #52]	@ (8002b60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b2c:	f7ff fff6 	bl	8002b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b30:	480c      	ldr	r0, [pc, #48]	@ (8002b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b32:	490d      	ldr	r1, [pc, #52]	@ (8002b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b34:	4a0d      	ldr	r2, [pc, #52]	@ (8002b6c <LoopForever+0xe>)
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b38:	e002      	b.n	8002b40 <LoopCopyDataInit>

08002b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b3e:	3304      	adds	r3, #4

08002b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b44:	d3f9      	bcc.n	8002b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b46:	4a0a      	ldr	r2, [pc, #40]	@ (8002b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b48:	4c0a      	ldr	r4, [pc, #40]	@ (8002b74 <LoopForever+0x16>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b4c:	e001      	b.n	8002b52 <LoopFillZerobss>

08002b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b50:	3204      	adds	r2, #4

08002b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b54:	d3fb      	bcc.n	8002b4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b56:	f004 f867 	bl	8006c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b5a:	f7ff fabf 	bl	80020dc <main>

08002b5e <LoopForever>:

LoopForever:
    b LoopForever
 8002b5e:	e7fe      	b.n	8002b5e <LoopForever>
  ldr   r0, =_estack
 8002b60:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b68:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002b6c:	080075e4 	.word	0x080075e4
  ldr r2, =_sbss
 8002b70:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002b74:	20000428 	.word	0x20000428

08002b78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b78:	e7fe      	b.n	8002b78 <ADC1_IRQHandler>
	...

08002b7c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b80:	4b07      	ldr	r3, [pc, #28]	@ (8002ba0 <HAL_Init+0x24>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <HAL_Init+0x24>)
 8002b86:	2110      	movs	r1, #16
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002b8c:	2003      	movs	r0, #3
 8002b8e:	f000 f809 	bl	8002ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b92:	f7ff fe45 	bl	8002820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	0018      	movs	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			@ (mov r8, r8)
 8002ba0:	40022000 	.word	0x40022000

08002ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba4:	b590      	push	{r4, r7, lr}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bac:	4b14      	ldr	r3, [pc, #80]	@ (8002c00 <HAL_InitTick+0x5c>)
 8002bae:	681c      	ldr	r4, [r3, #0]
 8002bb0:	4b14      	ldr	r3, [pc, #80]	@ (8002c04 <HAL_InitTick+0x60>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	23fa      	movs	r3, #250	@ 0xfa
 8002bb8:	0098      	lsls	r0, r3, #2
 8002bba:	f7fd faaf 	bl	800011c <__udivsi3>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	0020      	movs	r0, r4
 8002bc4:	f7fd faaa 	bl	800011c <__udivsi3>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f000 f92f 	bl	8002e2e <HAL_SYSTICK_Config>
 8002bd0:	1e03      	subs	r3, r0, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e00f      	b.n	8002bf8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d80b      	bhi.n	8002bf6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	2301      	movs	r3, #1
 8002be2:	425b      	negs	r3, r3
 8002be4:	2200      	movs	r2, #0
 8002be6:	0018      	movs	r0, r3
 8002be8:	f000 f8fc 	bl	8002de4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bec:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <HAL_InitTick+0x64>)
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e000      	b.n	8002bf8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b003      	add	sp, #12
 8002bfe:	bd90      	pop	{r4, r7, pc}
 8002c00:	20000004 	.word	0x20000004
 8002c04:	2000000c 	.word	0x2000000c
 8002c08:	20000008 	.word	0x20000008

08002c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c10:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <HAL_IncTick+0x1c>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	001a      	movs	r2, r3
 8002c16:	4b05      	ldr	r3, [pc, #20]	@ (8002c2c <HAL_IncTick+0x20>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	18d2      	adds	r2, r2, r3
 8002c1c:	4b03      	ldr	r3, [pc, #12]	@ (8002c2c <HAL_IncTick+0x20>)
 8002c1e:	601a      	str	r2, [r3, #0]
}
 8002c20:	46c0      	nop			@ (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			@ (mov r8, r8)
 8002c28:	2000000c 	.word	0x2000000c
 8002c2c:	200002dc 	.word	0x200002dc

08002c30 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  return uwTick;
 8002c34:	4b02      	ldr	r3, [pc, #8]	@ (8002c40 <HAL_GetTick+0x10>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	0018      	movs	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	46c0      	nop			@ (mov r8, r8)
 8002c40:	200002dc 	.word	0x200002dc

08002c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c4c:	f7ff fff0 	bl	8002c30 <HAL_GetTick>
 8002c50:	0003      	movs	r3, r0
 8002c52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	d005      	beq.n	8002c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <HAL_Delay+0x44>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	001a      	movs	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	189b      	adds	r3, r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	f7ff ffe0 	bl	8002c30 <HAL_GetTick>
 8002c70:	0002      	movs	r2, r0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d8f7      	bhi.n	8002c6c <HAL_Delay+0x28>
  {
  }
}
 8002c7c:	46c0      	nop			@ (mov r8, r8)
 8002c7e:	46c0      	nop			@ (mov r8, r8)
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b004      	add	sp, #16
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	2000000c 	.word	0x2000000c

08002c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	0002      	movs	r2, r0
 8002c94:	1dfb      	adds	r3, r7, #7
 8002c96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c98:	1dfb      	adds	r3, r7, #7
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c9e:	d809      	bhi.n	8002cb4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca0:	1dfb      	adds	r3, r7, #7
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	001a      	movs	r2, r3
 8002ca6:	231f      	movs	r3, #31
 8002ca8:	401a      	ands	r2, r3
 8002caa:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <__NVIC_EnableIRQ+0x30>)
 8002cac:	2101      	movs	r1, #1
 8002cae:	4091      	lsls	r1, r2
 8002cb0:	000a      	movs	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]
  }
}
 8002cb4:	46c0      	nop			@ (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b002      	add	sp, #8
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	e000e100 	.word	0xe000e100

08002cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	0002      	movs	r2, r0
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	1dfb      	adds	r3, r7, #7
 8002ccc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002cce:	1dfb      	adds	r3, r7, #7
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8002cd4:	d828      	bhi.n	8002d28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cd6:	4a2f      	ldr	r2, [pc, #188]	@ (8002d94 <__NVIC_SetPriority+0xd4>)
 8002cd8:	1dfb      	adds	r3, r7, #7
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	b25b      	sxtb	r3, r3
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	33c0      	adds	r3, #192	@ 0xc0
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	589b      	ldr	r3, [r3, r2]
 8002ce6:	1dfa      	adds	r2, r7, #7
 8002ce8:	7812      	ldrb	r2, [r2, #0]
 8002cea:	0011      	movs	r1, r2
 8002cec:	2203      	movs	r2, #3
 8002cee:	400a      	ands	r2, r1
 8002cf0:	00d2      	lsls	r2, r2, #3
 8002cf2:	21ff      	movs	r1, #255	@ 0xff
 8002cf4:	4091      	lsls	r1, r2
 8002cf6:	000a      	movs	r2, r1
 8002cf8:	43d2      	mvns	r2, r2
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	22ff      	movs	r2, #255	@ 0xff
 8002d04:	401a      	ands	r2, r3
 8002d06:	1dfb      	adds	r3, r7, #7
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	4003      	ands	r3, r0
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d14:	481f      	ldr	r0, [pc, #124]	@ (8002d94 <__NVIC_SetPriority+0xd4>)
 8002d16:	1dfb      	adds	r3, r7, #7
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	b25b      	sxtb	r3, r3
 8002d1c:	089b      	lsrs	r3, r3, #2
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	33c0      	adds	r3, #192	@ 0xc0
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d26:	e031      	b.n	8002d8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d28:	4a1b      	ldr	r2, [pc, #108]	@ (8002d98 <__NVIC_SetPriority+0xd8>)
 8002d2a:	1dfb      	adds	r3, r7, #7
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	0019      	movs	r1, r3
 8002d30:	230f      	movs	r3, #15
 8002d32:	400b      	ands	r3, r1
 8002d34:	3b08      	subs	r3, #8
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3306      	adds	r3, #6
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	18d3      	adds	r3, r2, r3
 8002d3e:	3304      	adds	r3, #4
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	1dfa      	adds	r2, r7, #7
 8002d44:	7812      	ldrb	r2, [r2, #0]
 8002d46:	0011      	movs	r1, r2
 8002d48:	2203      	movs	r2, #3
 8002d4a:	400a      	ands	r2, r1
 8002d4c:	00d2      	lsls	r2, r2, #3
 8002d4e:	21ff      	movs	r1, #255	@ 0xff
 8002d50:	4091      	lsls	r1, r2
 8002d52:	000a      	movs	r2, r1
 8002d54:	43d2      	mvns	r2, r2
 8002d56:	401a      	ands	r2, r3
 8002d58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	019b      	lsls	r3, r3, #6
 8002d5e:	22ff      	movs	r2, #255	@ 0xff
 8002d60:	401a      	ands	r2, r3
 8002d62:	1dfb      	adds	r3, r7, #7
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	0018      	movs	r0, r3
 8002d68:	2303      	movs	r3, #3
 8002d6a:	4003      	ands	r3, r0
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d70:	4809      	ldr	r0, [pc, #36]	@ (8002d98 <__NVIC_SetPriority+0xd8>)
 8002d72:	1dfb      	adds	r3, r7, #7
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	001c      	movs	r4, r3
 8002d78:	230f      	movs	r3, #15
 8002d7a:	4023      	ands	r3, r4
 8002d7c:	3b08      	subs	r3, #8
 8002d7e:	089b      	lsrs	r3, r3, #2
 8002d80:	430a      	orrs	r2, r1
 8002d82:	3306      	adds	r3, #6
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	18c3      	adds	r3, r0, r3
 8002d88:	3304      	adds	r3, #4
 8002d8a:	601a      	str	r2, [r3, #0]
}
 8002d8c:	46c0      	nop			@ (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b003      	add	sp, #12
 8002d92:	bd90      	pop	{r4, r7, pc}
 8002d94:	e000e100 	.word	0xe000e100
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	1e5a      	subs	r2, r3, #1
 8002da8:	2380      	movs	r3, #128	@ 0x80
 8002daa:	045b      	lsls	r3, r3, #17
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d301      	bcc.n	8002db4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002db0:	2301      	movs	r3, #1
 8002db2:	e010      	b.n	8002dd6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002db4:	4b0a      	ldr	r3, [pc, #40]	@ (8002de0 <SysTick_Config+0x44>)
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	3a01      	subs	r2, #1
 8002dba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	425b      	negs	r3, r3
 8002dc0:	2103      	movs	r1, #3
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f7ff ff7c 	bl	8002cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc8:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <SysTick_Config+0x44>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dce:	4b04      	ldr	r3, [pc, #16]	@ (8002de0 <SysTick_Config+0x44>)
 8002dd0:	2207      	movs	r2, #7
 8002dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b002      	add	sp, #8
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			@ (mov r8, r8)
 8002de0:	e000e010 	.word	0xe000e010

08002de4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	210f      	movs	r1, #15
 8002df0:	187b      	adds	r3, r7, r1
 8002df2:	1c02      	adds	r2, r0, #0
 8002df4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	b25b      	sxtb	r3, r3
 8002dfe:	0011      	movs	r1, r2
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7ff ff5d 	bl	8002cc0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002e06:	46c0      	nop			@ (mov r8, r8)
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b004      	add	sp, #16
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	0002      	movs	r2, r0
 8002e16:	1dfb      	adds	r3, r7, #7
 8002e18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e1a:	1dfb      	adds	r3, r7, #7
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	b25b      	sxtb	r3, r3
 8002e20:	0018      	movs	r0, r3
 8002e22:	f7ff ff33 	bl	8002c8c <__NVIC_EnableIRQ>
}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b002      	add	sp, #8
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7ff ffaf 	bl	8002d9c <SysTick_Config>
 8002e3e:	0003      	movs	r3, r0
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b002      	add	sp, #8
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2221      	movs	r2, #33	@ 0x21
 8002e54:	5c9b      	ldrb	r3, [r3, r2]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d008      	beq.n	8002e6e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2204      	movs	r2, #4
 8002e60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	2100      	movs	r1, #0
 8002e68:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e020      	b.n	8002eb0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	210e      	movs	r1, #14
 8002e7a:	438a      	bics	r2, r1
 8002e7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2101      	movs	r1, #1
 8002e8a:	438a      	bics	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e96:	2101      	movs	r1, #1
 8002e98:	4091      	lsls	r1, r2
 8002e9a:	000a      	movs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2221      	movs	r2, #33	@ 0x21
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	2100      	movs	r1, #0
 8002eac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b002      	add	sp, #8
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec0:	210f      	movs	r1, #15
 8002ec2:	187b      	adds	r3, r7, r1
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2221      	movs	r2, #33	@ 0x21
 8002ecc:	5c9b      	ldrb	r3, [r3, r2]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d006      	beq.n	8002ee2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002eda:	187b      	adds	r3, r7, r1
 8002edc:	2201      	movs	r2, #1
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e028      	b.n	8002f34 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	210e      	movs	r1, #14
 8002eee:	438a      	bics	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2101      	movs	r1, #1
 8002efe:	438a      	bics	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	4091      	lsls	r1, r2
 8002f0e:	000a      	movs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2221      	movs	r2, #33	@ 0x21
 8002f16:	2101      	movs	r1, #1
 8002f18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	2100      	movs	r1, #0
 8002f20:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d004      	beq.n	8002f34 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	0010      	movs	r0, r2
 8002f32:	4798      	blx	r3
    }
  }
  return status;
 8002f34:	230f      	movs	r3, #15
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	781b      	ldrb	r3, [r3, #0]
}
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	b004      	add	sp, #16
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2221      	movs	r2, #33	@ 0x21
 8002f4e:	5c9b      	ldrb	r3, [r3, r2]
 8002f50:	b2db      	uxtb	r3, r3
}
 8002f52:	0018      	movs	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b002      	add	sp, #8
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f6a:	e14f      	b.n	800320c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2101      	movs	r1, #1
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4091      	lsls	r1, r2
 8002f76:	000a      	movs	r2, r1
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d100      	bne.n	8002f84 <HAL_GPIO_Init+0x28>
 8002f82:	e140      	b.n	8003206 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2203      	movs	r2, #3
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d005      	beq.n	8002f9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2203      	movs	r2, #3
 8002f96:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d130      	bne.n	8002ffe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	0013      	movs	r3, r2
 8002fac:	43da      	mvns	r2, r3
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	0013      	movs	r3, r2
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	0013      	movs	r3, r2
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	2201      	movs	r2, #1
 8002fea:	401a      	ands	r2, r3
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	0013      	movs	r3, r2
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2203      	movs	r2, #3
 8003004:	4013      	ands	r3, r2
 8003006:	2b03      	cmp	r3, #3
 8003008:	d017      	beq.n	800303a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	2203      	movs	r2, #3
 8003016:	409a      	lsls	r2, r3
 8003018:	0013      	movs	r3, r2
 800301a:	43da      	mvns	r2, r3
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4013      	ands	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	409a      	lsls	r2, r3
 800302c:	0013      	movs	r3, r2
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2203      	movs	r2, #3
 8003040:	4013      	ands	r3, r2
 8003042:	2b02      	cmp	r3, #2
 8003044:	d123      	bne.n	800308e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	08da      	lsrs	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3208      	adds	r2, #8
 800304e:	0092      	lsls	r2, r2, #2
 8003050:	58d3      	ldr	r3, [r2, r3]
 8003052:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2207      	movs	r2, #7
 8003058:	4013      	ands	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	220f      	movs	r2, #15
 800305e:	409a      	lsls	r2, r3
 8003060:	0013      	movs	r3, r2
 8003062:	43da      	mvns	r2, r3
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4013      	ands	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2107      	movs	r1, #7
 8003072:	400b      	ands	r3, r1
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	409a      	lsls	r2, r3
 8003078:	0013      	movs	r3, r2
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	08da      	lsrs	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3208      	adds	r2, #8
 8003088:	0092      	lsls	r2, r2, #2
 800308a:	6939      	ldr	r1, [r7, #16]
 800308c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	2203      	movs	r2, #3
 800309a:	409a      	lsls	r2, r3
 800309c:	0013      	movs	r3, r2
 800309e:	43da      	mvns	r2, r3
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2203      	movs	r2, #3
 80030ac:	401a      	ands	r2, r3
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	409a      	lsls	r2, r3
 80030b4:	0013      	movs	r3, r2
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	23c0      	movs	r3, #192	@ 0xc0
 80030c8:	029b      	lsls	r3, r3, #10
 80030ca:	4013      	ands	r3, r2
 80030cc:	d100      	bne.n	80030d0 <HAL_GPIO_Init+0x174>
 80030ce:	e09a      	b.n	8003206 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d0:	4b54      	ldr	r3, [pc, #336]	@ (8003224 <HAL_GPIO_Init+0x2c8>)
 80030d2:	699a      	ldr	r2, [r3, #24]
 80030d4:	4b53      	ldr	r3, [pc, #332]	@ (8003224 <HAL_GPIO_Init+0x2c8>)
 80030d6:	2101      	movs	r1, #1
 80030d8:	430a      	orrs	r2, r1
 80030da:	619a      	str	r2, [r3, #24]
 80030dc:	4b51      	ldr	r3, [pc, #324]	@ (8003224 <HAL_GPIO_Init+0x2c8>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2201      	movs	r2, #1
 80030e2:	4013      	ands	r3, r2
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030e8:	4a4f      	ldr	r2, [pc, #316]	@ (8003228 <HAL_GPIO_Init+0x2cc>)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	089b      	lsrs	r3, r3, #2
 80030ee:	3302      	adds	r3, #2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	589b      	ldr	r3, [r3, r2]
 80030f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2203      	movs	r2, #3
 80030fa:	4013      	ands	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	220f      	movs	r2, #15
 8003100:	409a      	lsls	r2, r3
 8003102:	0013      	movs	r3, r2
 8003104:	43da      	mvns	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	2390      	movs	r3, #144	@ 0x90
 8003110:	05db      	lsls	r3, r3, #23
 8003112:	429a      	cmp	r2, r3
 8003114:	d013      	beq.n	800313e <HAL_GPIO_Init+0x1e2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a44      	ldr	r2, [pc, #272]	@ (800322c <HAL_GPIO_Init+0x2d0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00d      	beq.n	800313a <HAL_GPIO_Init+0x1de>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a43      	ldr	r2, [pc, #268]	@ (8003230 <HAL_GPIO_Init+0x2d4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d007      	beq.n	8003136 <HAL_GPIO_Init+0x1da>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a42      	ldr	r2, [pc, #264]	@ (8003234 <HAL_GPIO_Init+0x2d8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d101      	bne.n	8003132 <HAL_GPIO_Init+0x1d6>
 800312e:	2303      	movs	r3, #3
 8003130:	e006      	b.n	8003140 <HAL_GPIO_Init+0x1e4>
 8003132:	2305      	movs	r3, #5
 8003134:	e004      	b.n	8003140 <HAL_GPIO_Init+0x1e4>
 8003136:	2302      	movs	r3, #2
 8003138:	e002      	b.n	8003140 <HAL_GPIO_Init+0x1e4>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_GPIO_Init+0x1e4>
 800313e:	2300      	movs	r3, #0
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	2103      	movs	r1, #3
 8003144:	400a      	ands	r2, r1
 8003146:	0092      	lsls	r2, r2, #2
 8003148:	4093      	lsls	r3, r2
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003150:	4935      	ldr	r1, [pc, #212]	@ (8003228 <HAL_GPIO_Init+0x2cc>)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	089b      	lsrs	r3, r3, #2
 8003156:	3302      	adds	r3, #2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315e:	4b36      	ldr	r3, [pc, #216]	@ (8003238 <HAL_GPIO_Init+0x2dc>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	43da      	mvns	r2, r3
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	2380      	movs	r3, #128	@ 0x80
 8003174:	035b      	lsls	r3, r3, #13
 8003176:	4013      	ands	r3, r2
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003182:	4b2d      	ldr	r3, [pc, #180]	@ (8003238 <HAL_GPIO_Init+0x2dc>)
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003188:	4b2b      	ldr	r3, [pc, #172]	@ (8003238 <HAL_GPIO_Init+0x2dc>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	43da      	mvns	r2, r3
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4013      	ands	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	2380      	movs	r3, #128	@ 0x80
 800319e:	039b      	lsls	r3, r3, #14
 80031a0:	4013      	ands	r3, r2
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80031ac:	4b22      	ldr	r3, [pc, #136]	@ (8003238 <HAL_GPIO_Init+0x2dc>)
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80031b2:	4b21      	ldr	r3, [pc, #132]	@ (8003238 <HAL_GPIO_Init+0x2dc>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	43da      	mvns	r2, r3
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4013      	ands	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	2380      	movs	r3, #128	@ 0x80
 80031c8:	029b      	lsls	r3, r3, #10
 80031ca:	4013      	ands	r3, r2
 80031cc:	d003      	beq.n	80031d6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031d6:	4b18      	ldr	r3, [pc, #96]	@ (8003238 <HAL_GPIO_Init+0x2dc>)
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80031dc:	4b16      	ldr	r3, [pc, #88]	@ (8003238 <HAL_GPIO_Init+0x2dc>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	43da      	mvns	r2, r3
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4013      	ands	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	2380      	movs	r3, #128	@ 0x80
 80031f2:	025b      	lsls	r3, r3, #9
 80031f4:	4013      	ands	r3, r2
 80031f6:	d003      	beq.n	8003200 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003200:	4b0d      	ldr	r3, [pc, #52]	@ (8003238 <HAL_GPIO_Init+0x2dc>)
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	3301      	adds	r3, #1
 800320a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	40da      	lsrs	r2, r3
 8003214:	1e13      	subs	r3, r2, #0
 8003216:	d000      	beq.n	800321a <HAL_GPIO_Init+0x2be>
 8003218:	e6a8      	b.n	8002f6c <HAL_GPIO_Init+0x10>
  } 
}
 800321a:	46c0      	nop			@ (mov r8, r8)
 800321c:	46c0      	nop			@ (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	b006      	add	sp, #24
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000
 8003228:	40010000 	.word	0x40010000
 800322c:	48000400 	.word	0x48000400
 8003230:	48000800 	.word	0x48000800
 8003234:	48000c00 	.word	0x48000c00
 8003238:	40010400 	.word	0x40010400

0800323c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	0008      	movs	r0, r1
 8003246:	0011      	movs	r1, r2
 8003248:	1cbb      	adds	r3, r7, #2
 800324a:	1c02      	adds	r2, r0, #0
 800324c:	801a      	strh	r2, [r3, #0]
 800324e:	1c7b      	adds	r3, r7, #1
 8003250:	1c0a      	adds	r2, r1, #0
 8003252:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003254:	1c7b      	adds	r3, r7, #1
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d004      	beq.n	8003266 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800325c:	1cbb      	adds	r3, r7, #2
 800325e:	881a      	ldrh	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003264:	e003      	b.n	800326e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003266:	1cbb      	adds	r3, r7, #2
 8003268:	881a      	ldrh	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800326e:	46c0      	nop			@ (mov r8, r8)
 8003270:	46bd      	mov	sp, r7
 8003272:	b002      	add	sp, #8
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e08f      	b.n	80033aa <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2241      	movs	r2, #65	@ 0x41
 800328e:	5c9b      	ldrb	r3, [r3, r2]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d107      	bne.n	80032a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2240      	movs	r2, #64	@ 0x40
 800329a:	2100      	movs	r1, #0
 800329c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f7ff fae1 	bl	8002868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2241      	movs	r2, #65	@ 0x41
 80032aa:	2124      	movs	r1, #36	@ 0x24
 80032ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2101      	movs	r1, #1
 80032ba:	438a      	bics	r2, r1
 80032bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	493b      	ldr	r1, [pc, #236]	@ (80033b4 <HAL_I2C_Init+0x13c>)
 80032c8:	400a      	ands	r2, r1
 80032ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4938      	ldr	r1, [pc, #224]	@ (80033b8 <HAL_I2C_Init+0x140>)
 80032d8:	400a      	ands	r2, r1
 80032da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d108      	bne.n	80032f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2180      	movs	r1, #128	@ 0x80
 80032ee:	0209      	lsls	r1, r1, #8
 80032f0:	430a      	orrs	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	e007      	b.n	8003306 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2184      	movs	r1, #132	@ 0x84
 8003300:	0209      	lsls	r1, r1, #8
 8003302:	430a      	orrs	r2, r1
 8003304:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d109      	bne.n	8003322 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2180      	movs	r1, #128	@ 0x80
 800331a:	0109      	lsls	r1, r1, #4
 800331c:	430a      	orrs	r2, r1
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	e007      	b.n	8003332 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4923      	ldr	r1, [pc, #140]	@ (80033bc <HAL_I2C_Init+0x144>)
 800332e:	400a      	ands	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4920      	ldr	r1, [pc, #128]	@ (80033c0 <HAL_I2C_Init+0x148>)
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	491a      	ldr	r1, [pc, #104]	@ (80033b8 <HAL_I2C_Init+0x140>)
 800334e:	400a      	ands	r2, r1
 8003350:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	431a      	orrs	r2, r3
 800335c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69d9      	ldr	r1, [r3, #28]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1a      	ldr	r2, [r3, #32]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2101      	movs	r1, #1
 8003388:	430a      	orrs	r2, r1
 800338a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2241      	movs	r2, #65	@ 0x41
 8003396:	2120      	movs	r1, #32
 8003398:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2242      	movs	r2, #66	@ 0x42
 80033a4:	2100      	movs	r1, #0
 80033a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	0018      	movs	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b002      	add	sp, #8
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	46c0      	nop			@ (mov r8, r8)
 80033b4:	f0ffffff 	.word	0xf0ffffff
 80033b8:	ffff7fff 	.word	0xffff7fff
 80033bc:	fffff7ff 	.word	0xfffff7ff
 80033c0:	02008000 	.word	0x02008000

080033c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b089      	sub	sp, #36	@ 0x24
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	000c      	movs	r4, r1
 80033ce:	0010      	movs	r0, r2
 80033d0:	0019      	movs	r1, r3
 80033d2:	230a      	movs	r3, #10
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	1c22      	adds	r2, r4, #0
 80033d8:	801a      	strh	r2, [r3, #0]
 80033da:	2308      	movs	r3, #8
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	1c02      	adds	r2, r0, #0
 80033e0:	801a      	strh	r2, [r3, #0]
 80033e2:	1dbb      	adds	r3, r7, #6
 80033e4:	1c0a      	adds	r2, r1, #0
 80033e6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2241      	movs	r2, #65	@ 0x41
 80033ec:	5c9b      	ldrb	r3, [r3, r2]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d000      	beq.n	80033f6 <HAL_I2C_Mem_Write+0x32>
 80033f4:	e10c      	b.n	8003610 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d004      	beq.n	8003406 <HAL_I2C_Mem_Write+0x42>
 80033fc:	232c      	movs	r3, #44	@ 0x2c
 80033fe:	18fb      	adds	r3, r7, r3
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d105      	bne.n	8003412 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2280      	movs	r2, #128	@ 0x80
 800340a:	0092      	lsls	r2, r2, #2
 800340c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e0ff      	b.n	8003612 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2240      	movs	r2, #64	@ 0x40
 8003416:	5c9b      	ldrb	r3, [r3, r2]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_I2C_Mem_Write+0x5c>
 800341c:	2302      	movs	r3, #2
 800341e:	e0f8      	b.n	8003612 <HAL_I2C_Mem_Write+0x24e>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2240      	movs	r2, #64	@ 0x40
 8003424:	2101      	movs	r1, #1
 8003426:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003428:	f7ff fc02 	bl	8002c30 <HAL_GetTick>
 800342c:	0003      	movs	r3, r0
 800342e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003430:	2380      	movs	r3, #128	@ 0x80
 8003432:	0219      	lsls	r1, r3, #8
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	2319      	movs	r3, #25
 800343c:	2201      	movs	r2, #1
 800343e:	f001 f911 	bl	8004664 <I2C_WaitOnFlagUntilTimeout>
 8003442:	1e03      	subs	r3, r0, #0
 8003444:	d001      	beq.n	800344a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e0e3      	b.n	8003612 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2241      	movs	r2, #65	@ 0x41
 800344e:	2121      	movs	r1, #33	@ 0x21
 8003450:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2242      	movs	r2, #66	@ 0x42
 8003456:	2140      	movs	r1, #64	@ 0x40
 8003458:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003464:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	222c      	movs	r2, #44	@ 0x2c
 800346a:	18ba      	adds	r2, r7, r2
 800346c:	8812      	ldrh	r2, [r2, #0]
 800346e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003476:	1dbb      	adds	r3, r7, #6
 8003478:	881c      	ldrh	r4, [r3, #0]
 800347a:	2308      	movs	r3, #8
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	881a      	ldrh	r2, [r3, #0]
 8003480:	230a      	movs	r3, #10
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	8819      	ldrh	r1, [r3, #0]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	9301      	str	r3, [sp, #4]
 800348c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	0023      	movs	r3, r4
 8003492:	f000 fbc1 	bl	8003c18 <I2C_RequestMemoryWrite>
 8003496:	1e03      	subs	r3, r0, #0
 8003498:	d005      	beq.n	80034a6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2240      	movs	r2, #64	@ 0x40
 800349e:	2100      	movs	r1, #0
 80034a0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e0b5      	b.n	8003612 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2bff      	cmp	r3, #255	@ 0xff
 80034ae:	d911      	bls.n	80034d4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	22ff      	movs	r2, #255	@ 0xff
 80034b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	2380      	movs	r3, #128	@ 0x80
 80034be:	045c      	lsls	r4, r3, #17
 80034c0:	230a      	movs	r3, #10
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	8819      	ldrh	r1, [r3, #0]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	2300      	movs	r3, #0
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	0023      	movs	r3, r4
 80034ce:	f001 faa3 	bl	8004a18 <I2C_TransferConfig>
 80034d2:	e012      	b.n	80034fa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	2380      	movs	r3, #128	@ 0x80
 80034e6:	049c      	lsls	r4, r3, #18
 80034e8:	230a      	movs	r3, #10
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	8819      	ldrh	r1, [r3, #0]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	2300      	movs	r3, #0
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	0023      	movs	r3, r4
 80034f6:	f001 fa8f 	bl	8004a18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	0018      	movs	r0, r3
 8003502:	f001 f907 	bl	8004714 <I2C_WaitOnTXISFlagUntilTimeout>
 8003506:	1e03      	subs	r3, r0, #0
 8003508:	d001      	beq.n	800350e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e081      	b.n	8003612 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003512:	781a      	ldrb	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d03a      	beq.n	80035be <HAL_I2C_Mem_Write+0x1fa>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354c:	2b00      	cmp	r3, #0
 800354e:	d136      	bne.n	80035be <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	0013      	movs	r3, r2
 800355a:	2200      	movs	r2, #0
 800355c:	2180      	movs	r1, #128	@ 0x80
 800355e:	f001 f881 	bl	8004664 <I2C_WaitOnFlagUntilTimeout>
 8003562:	1e03      	subs	r3, r0, #0
 8003564:	d001      	beq.n	800356a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e053      	b.n	8003612 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	2bff      	cmp	r3, #255	@ 0xff
 8003572:	d911      	bls.n	8003598 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	22ff      	movs	r2, #255	@ 0xff
 8003578:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357e:	b2da      	uxtb	r2, r3
 8003580:	2380      	movs	r3, #128	@ 0x80
 8003582:	045c      	lsls	r4, r3, #17
 8003584:	230a      	movs	r3, #10
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	8819      	ldrh	r1, [r3, #0]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	2300      	movs	r3, #0
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	0023      	movs	r3, r4
 8003592:	f001 fa41 	bl	8004a18 <I2C_TransferConfig>
 8003596:	e012      	b.n	80035be <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	2380      	movs	r3, #128	@ 0x80
 80035aa:	049c      	lsls	r4, r3, #18
 80035ac:	230a      	movs	r3, #10
 80035ae:	18fb      	adds	r3, r7, r3
 80035b0:	8819      	ldrh	r1, [r3, #0]
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	2300      	movs	r3, #0
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	0023      	movs	r3, r4
 80035ba:	f001 fa2d 	bl	8004a18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d198      	bne.n	80034fa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	0018      	movs	r0, r3
 80035d0:	f001 f8e6 	bl	80047a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035d4:	1e03      	subs	r3, r0, #0
 80035d6:	d001      	beq.n	80035dc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e01a      	b.n	8003612 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2220      	movs	r2, #32
 80035e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	490b      	ldr	r1, [pc, #44]	@ (800361c <HAL_I2C_Mem_Write+0x258>)
 80035f0:	400a      	ands	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2241      	movs	r2, #65	@ 0x41
 80035f8:	2120      	movs	r1, #32
 80035fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2242      	movs	r2, #66	@ 0x42
 8003600:	2100      	movs	r1, #0
 8003602:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2240      	movs	r2, #64	@ 0x40
 8003608:	2100      	movs	r1, #0
 800360a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	e000      	b.n	8003612 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003610:	2302      	movs	r3, #2
  }
}
 8003612:	0018      	movs	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	b007      	add	sp, #28
 8003618:	bd90      	pop	{r4, r7, pc}
 800361a:	46c0      	nop			@ (mov r8, r8)
 800361c:	fe00e800 	.word	0xfe00e800

08003620 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003620:	b590      	push	{r4, r7, lr}
 8003622:	b089      	sub	sp, #36	@ 0x24
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	000c      	movs	r4, r1
 800362a:	0010      	movs	r0, r2
 800362c:	0019      	movs	r1, r3
 800362e:	230a      	movs	r3, #10
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	1c22      	adds	r2, r4, #0
 8003634:	801a      	strh	r2, [r3, #0]
 8003636:	2308      	movs	r3, #8
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	1c02      	adds	r2, r0, #0
 800363c:	801a      	strh	r2, [r3, #0]
 800363e:	1dbb      	adds	r3, r7, #6
 8003640:	1c0a      	adds	r2, r1, #0
 8003642:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2241      	movs	r2, #65	@ 0x41
 8003648:	5c9b      	ldrb	r3, [r3, r2]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b20      	cmp	r3, #32
 800364e:	d000      	beq.n	8003652 <HAL_I2C_Mem_Read+0x32>
 8003650:	e110      	b.n	8003874 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	d004      	beq.n	8003662 <HAL_I2C_Mem_Read+0x42>
 8003658:	232c      	movs	r3, #44	@ 0x2c
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d105      	bne.n	800366e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2280      	movs	r2, #128	@ 0x80
 8003666:	0092      	lsls	r2, r2, #2
 8003668:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e103      	b.n	8003876 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2240      	movs	r2, #64	@ 0x40
 8003672:	5c9b      	ldrb	r3, [r3, r2]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_I2C_Mem_Read+0x5c>
 8003678:	2302      	movs	r3, #2
 800367a:	e0fc      	b.n	8003876 <HAL_I2C_Mem_Read+0x256>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2240      	movs	r2, #64	@ 0x40
 8003680:	2101      	movs	r1, #1
 8003682:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003684:	f7ff fad4 	bl	8002c30 <HAL_GetTick>
 8003688:	0003      	movs	r3, r0
 800368a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800368c:	2380      	movs	r3, #128	@ 0x80
 800368e:	0219      	lsls	r1, r3, #8
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	2319      	movs	r3, #25
 8003698:	2201      	movs	r2, #1
 800369a:	f000 ffe3 	bl	8004664 <I2C_WaitOnFlagUntilTimeout>
 800369e:	1e03      	subs	r3, r0, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e0e7      	b.n	8003876 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2241      	movs	r2, #65	@ 0x41
 80036aa:	2122      	movs	r1, #34	@ 0x22
 80036ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2242      	movs	r2, #66	@ 0x42
 80036b2:	2140      	movs	r1, #64	@ 0x40
 80036b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	222c      	movs	r2, #44	@ 0x2c
 80036c6:	18ba      	adds	r2, r7, r2
 80036c8:	8812      	ldrh	r2, [r2, #0]
 80036ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036d2:	1dbb      	adds	r3, r7, #6
 80036d4:	881c      	ldrh	r4, [r3, #0]
 80036d6:	2308      	movs	r3, #8
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	881a      	ldrh	r2, [r3, #0]
 80036dc:	230a      	movs	r3, #10
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	8819      	ldrh	r1, [r3, #0]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	0023      	movs	r3, r4
 80036ee:	f000 faf7 	bl	8003ce0 <I2C_RequestMemoryRead>
 80036f2:	1e03      	subs	r3, r0, #0
 80036f4:	d005      	beq.n	8003702 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2240      	movs	r2, #64	@ 0x40
 80036fa:	2100      	movs	r1, #0
 80036fc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e0b9      	b.n	8003876 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	2bff      	cmp	r3, #255	@ 0xff
 800370a:	d911      	bls.n	8003730 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003716:	b2da      	uxtb	r2, r3
 8003718:	2380      	movs	r3, #128	@ 0x80
 800371a:	045c      	lsls	r4, r3, #17
 800371c:	230a      	movs	r3, #10
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	8819      	ldrh	r1, [r3, #0]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	4b56      	ldr	r3, [pc, #344]	@ (8003880 <HAL_I2C_Mem_Read+0x260>)
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	0023      	movs	r3, r4
 800372a:	f001 f975 	bl	8004a18 <I2C_TransferConfig>
 800372e:	e012      	b.n	8003756 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373e:	b2da      	uxtb	r2, r3
 8003740:	2380      	movs	r3, #128	@ 0x80
 8003742:	049c      	lsls	r4, r3, #18
 8003744:	230a      	movs	r3, #10
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	8819      	ldrh	r1, [r3, #0]
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	4b4c      	ldr	r3, [pc, #304]	@ (8003880 <HAL_I2C_Mem_Read+0x260>)
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	0023      	movs	r3, r4
 8003752:	f001 f961 	bl	8004a18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	0013      	movs	r3, r2
 8003760:	2200      	movs	r2, #0
 8003762:	2104      	movs	r1, #4
 8003764:	f000 ff7e 	bl	8004664 <I2C_WaitOnFlagUntilTimeout>
 8003768:	1e03      	subs	r3, r0, #0
 800376a:	d001      	beq.n	8003770 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e082      	b.n	8003876 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d03a      	beq.n	8003822 <HAL_I2C_Mem_Read+0x202>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d136      	bne.n	8003822 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	0013      	movs	r3, r2
 80037be:	2200      	movs	r2, #0
 80037c0:	2180      	movs	r1, #128	@ 0x80
 80037c2:	f000 ff4f 	bl	8004664 <I2C_WaitOnFlagUntilTimeout>
 80037c6:	1e03      	subs	r3, r0, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e053      	b.n	8003876 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2bff      	cmp	r3, #255	@ 0xff
 80037d6:	d911      	bls.n	80037fc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	2380      	movs	r3, #128	@ 0x80
 80037e6:	045c      	lsls	r4, r3, #17
 80037e8:	230a      	movs	r3, #10
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	8819      	ldrh	r1, [r3, #0]
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	2300      	movs	r3, #0
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	0023      	movs	r3, r4
 80037f6:	f001 f90f 	bl	8004a18 <I2C_TransferConfig>
 80037fa:	e012      	b.n	8003822 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380a:	b2da      	uxtb	r2, r3
 800380c:	2380      	movs	r3, #128	@ 0x80
 800380e:	049c      	lsls	r4, r3, #18
 8003810:	230a      	movs	r3, #10
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	8819      	ldrh	r1, [r3, #0]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	2300      	movs	r3, #0
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	0023      	movs	r3, r4
 800381e:	f001 f8fb 	bl	8004a18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d194      	bne.n	8003756 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	0018      	movs	r0, r3
 8003834:	f000 ffb4 	bl	80047a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003838:	1e03      	subs	r3, r0, #0
 800383a:	d001      	beq.n	8003840 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e01a      	b.n	8003876 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2220      	movs	r2, #32
 8003846:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	490c      	ldr	r1, [pc, #48]	@ (8003884 <HAL_I2C_Mem_Read+0x264>)
 8003854:	400a      	ands	r2, r1
 8003856:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2241      	movs	r2, #65	@ 0x41
 800385c:	2120      	movs	r1, #32
 800385e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2242      	movs	r2, #66	@ 0x42
 8003864:	2100      	movs	r1, #0
 8003866:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2240      	movs	r2, #64	@ 0x40
 800386c:	2100      	movs	r1, #0
 800386e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	e000      	b.n	8003876 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003874:	2302      	movs	r3, #2
  }
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	b007      	add	sp, #28
 800387c:	bd90      	pop	{r4, r7, pc}
 800387e:	46c0      	nop			@ (mov r8, r8)
 8003880:	80002400 	.word	0x80002400
 8003884:	fe00e800 	.word	0xfe00e800

08003888 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	68f9      	ldr	r1, [r7, #12]
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
  }
}
 80038b4:	46c0      	nop			@ (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b004      	add	sp, #16
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	001a      	movs	r2, r3
 80038da:	2301      	movs	r3, #1
 80038dc:	4013      	ands	r3, r2
 80038de:	d010      	beq.n	8003902 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	09db      	lsrs	r3, r3, #7
 80038e4:	001a      	movs	r2, r3
 80038e6:	2301      	movs	r3, #1
 80038e8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80038ea:	d00a      	beq.n	8003902 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f0:	2201      	movs	r2, #1
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2280      	movs	r2, #128	@ 0x80
 80038fe:	0052      	lsls	r2, r2, #1
 8003900:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	0a9b      	lsrs	r3, r3, #10
 8003906:	001a      	movs	r2, r3
 8003908:	2301      	movs	r3, #1
 800390a:	4013      	ands	r3, r2
 800390c:	d010      	beq.n	8003930 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	09db      	lsrs	r3, r3, #7
 8003912:	001a      	movs	r2, r3
 8003914:	2301      	movs	r3, #1
 8003916:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003918:	d00a      	beq.n	8003930 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391e:	2208      	movs	r2, #8
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2280      	movs	r2, #128	@ 0x80
 800392c:	00d2      	lsls	r2, r2, #3
 800392e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	0a5b      	lsrs	r3, r3, #9
 8003934:	001a      	movs	r2, r3
 8003936:	2301      	movs	r3, #1
 8003938:	4013      	ands	r3, r2
 800393a:	d010      	beq.n	800395e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	09db      	lsrs	r3, r3, #7
 8003940:	001a      	movs	r2, r3
 8003942:	2301      	movs	r3, #1
 8003944:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003946:	d00a      	beq.n	800395e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394c:	2202      	movs	r2, #2
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2280      	movs	r2, #128	@ 0x80
 800395a:	0092      	lsls	r2, r2, #2
 800395c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	220b      	movs	r2, #11
 8003968:	4013      	ands	r3, r2
 800396a:	d005      	beq.n	8003978 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	0011      	movs	r1, r2
 8003972:	0018      	movs	r0, r3
 8003974:	f000 fd0a 	bl	800438c <I2C_ITError>
  }
}
 8003978:	46c0      	nop			@ (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b006      	add	sp, #24
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003988:	46c0      	nop			@ (mov r8, r8)
 800398a:	46bd      	mov	sp, r7
 800398c:	b002      	add	sp, #8
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003998:	46c0      	nop			@ (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	b002      	add	sp, #8
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	0008      	movs	r0, r1
 80039aa:	0011      	movs	r1, r2
 80039ac:	1cfb      	adds	r3, r7, #3
 80039ae:	1c02      	adds	r2, r0, #0
 80039b0:	701a      	strb	r2, [r3, #0]
 80039b2:	003b      	movs	r3, r7
 80039b4:	1c0a      	adds	r2, r1, #0
 80039b6:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80039b8:	46c0      	nop			@ (mov r8, r8)
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b002      	add	sp, #8
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80039c8:	46c0      	nop			@ (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80039d8:	46c0      	nop			@ (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a00:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2240      	movs	r2, #64	@ 0x40
 8003a0a:	5c9b      	ldrb	r3, [r3, r2]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <I2C_Slave_ISR_IT+0x24>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e0fb      	b.n	8003c0c <I2C_Slave_ISR_IT+0x21c>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2240      	movs	r2, #64	@ 0x40
 8003a18:	2101      	movs	r1, #1
 8003a1a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	001a      	movs	r2, r3
 8003a22:	2301      	movs	r3, #1
 8003a24:	4013      	ands	r3, r2
 8003a26:	d00c      	beq.n	8003a42 <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	001a      	movs	r2, r3
 8003a2e:	2301      	movs	r3, #1
 8003a30:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a32:	d006      	beq.n	8003a42 <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	0011      	movs	r1, r2
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f000 fabc 	bl	8003fb8 <I2C_ITSlaveCplt>
 8003a40:	e0df      	b.n	8003c02 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	001a      	movs	r2, r3
 8003a48:	2301      	movs	r3, #1
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d054      	beq.n	8003af8 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	001a      	movs	r2, r3
 8003a54:	2301      	movs	r3, #1
 8003a56:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a58:	d04e      	beq.n	8003af8 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d12d      	bne.n	8003ac0 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2241      	movs	r2, #65	@ 0x41
 8003a68:	5c9b      	ldrb	r3, [r3, r2]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b28      	cmp	r3, #40	@ 0x28
 8003a6e:	d10b      	bne.n	8003a88 <I2C_Slave_ISR_IT+0x98>
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	2380      	movs	r3, #128	@ 0x80
 8003a74:	049b      	lsls	r3, r3, #18
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d106      	bne.n	8003a88 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	0011      	movs	r1, r2
 8003a80:	0018      	movs	r0, r3
 8003a82:	f000 fc29 	bl	80042d8 <I2C_ITListenCplt>
 8003a86:	e036      	b.n	8003af6 <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2241      	movs	r2, #65	@ 0x41
 8003a8c:	5c9b      	ldrb	r3, [r3, r2]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b29      	cmp	r3, #41	@ 0x29
 8003a92:	d110      	bne.n	8003ab6 <I2C_Slave_ISR_IT+0xc6>
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	4a5f      	ldr	r2, [pc, #380]	@ (8003c14 <I2C_Slave_ISR_IT+0x224>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00c      	beq.n	8003ab6 <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2210      	movs	r2, #16
 8003aa2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f000 fd9b 	bl	80045e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f000 fa1c 	bl	8003eec <I2C_ITSlaveSeqCplt>
 8003ab4:	e01f      	b.n	8003af6 <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2210      	movs	r2, #16
 8003abc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003abe:	e09d      	b.n	8003bfc <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003acc:	2204      	movs	r2, #4
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <I2C_Slave_ISR_IT+0xf6>
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	2380      	movs	r3, #128	@ 0x80
 8003ade:	045b      	lsls	r3, r3, #17
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d000      	beq.n	8003ae6 <I2C_Slave_ISR_IT+0xf6>
 8003ae4:	e08a      	b.n	8003bfc <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	0011      	movs	r1, r2
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 fc4c 	bl	800438c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003af4:	e082      	b.n	8003bfc <I2C_Slave_ISR_IT+0x20c>
 8003af6:	e081      	b.n	8003bfc <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	001a      	movs	r2, r3
 8003afe:	2301      	movs	r3, #1
 8003b00:	4013      	ands	r3, r2
 8003b02:	d031      	beq.n	8003b68 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	089b      	lsrs	r3, r3, #2
 8003b08:	001a      	movs	r2, r3
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003b0e:	d02b      	beq.n	8003b68 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d018      	beq.n	8003b4c <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d154      	bne.n	8003c00 <I2C_Slave_ISR_IT+0x210>
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	4a2e      	ldr	r2, [pc, #184]	@ (8003c14 <I2C_Slave_ISR_IT+0x224>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d050      	beq.n	8003c00 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 f9c3 	bl	8003eec <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003b66:	e04b      	b.n	8003c00 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	08db      	lsrs	r3, r3, #3
 8003b6c:	001a      	movs	r2, r3
 8003b6e:	2301      	movs	r3, #1
 8003b70:	4013      	ands	r3, r2
 8003b72:	d00c      	beq.n	8003b8e <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	08db      	lsrs	r3, r3, #3
 8003b78:	001a      	movs	r2, r3
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b7e:	d006      	beq.n	8003b8e <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	0011      	movs	r1, r2
 8003b86:	0018      	movs	r0, r3
 8003b88:	f000 f90c 	bl	8003da4 <I2C_ITAddrCplt>
 8003b8c:	e039      	b.n	8003c02 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	001a      	movs	r2, r3
 8003b94:	2301      	movs	r3, #1
 8003b96:	4013      	ands	r3, r2
 8003b98:	d033      	beq.n	8003c02 <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	001a      	movs	r2, r3
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003ba4:	d02d      	beq.n	8003c02 <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d018      	beq.n	8003be2 <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	781a      	ldrb	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003be0:	e00f      	b.n	8003c02 <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	2380      	movs	r3, #128	@ 0x80
 8003be6:	045b      	lsls	r3, r3, #17
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d002      	beq.n	8003bf2 <I2C_Slave_ISR_IT+0x202>
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d107      	bne.n	8003c02 <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 f979 	bl	8003eec <I2C_ITSlaveSeqCplt>
 8003bfa:	e002      	b.n	8003c02 <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 8003bfc:	46c0      	nop			@ (mov r8, r8)
 8003bfe:	e000      	b.n	8003c02 <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 8003c00:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2240      	movs	r2, #64	@ 0x40
 8003c06:	2100      	movs	r1, #0
 8003c08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b006      	add	sp, #24
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	ffff0000 	.word	0xffff0000

08003c18 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c18:	b5b0      	push	{r4, r5, r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	000c      	movs	r4, r1
 8003c22:	0010      	movs	r0, r2
 8003c24:	0019      	movs	r1, r3
 8003c26:	250a      	movs	r5, #10
 8003c28:	197b      	adds	r3, r7, r5
 8003c2a:	1c22      	adds	r2, r4, #0
 8003c2c:	801a      	strh	r2, [r3, #0]
 8003c2e:	2308      	movs	r3, #8
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	1c02      	adds	r2, r0, #0
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	1dbb      	adds	r3, r7, #6
 8003c38:	1c0a      	adds	r2, r1, #0
 8003c3a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c3c:	1dbb      	adds	r3, r7, #6
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	2380      	movs	r3, #128	@ 0x80
 8003c44:	045c      	lsls	r4, r3, #17
 8003c46:	197b      	adds	r3, r7, r5
 8003c48:	8819      	ldrh	r1, [r3, #0]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	4b23      	ldr	r3, [pc, #140]	@ (8003cdc <I2C_RequestMemoryWrite+0xc4>)
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	0023      	movs	r3, r4
 8003c52:	f000 fee1 	bl	8004a18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c58:	6a39      	ldr	r1, [r7, #32]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f000 fd59 	bl	8004714 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c62:	1e03      	subs	r3, r0, #0
 8003c64:	d001      	beq.n	8003c6a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e033      	b.n	8003cd2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c6a:	1dbb      	adds	r3, r7, #6
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d107      	bne.n	8003c82 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c72:	2308      	movs	r3, #8
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c80:	e019      	b.n	8003cb6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c82:	2308      	movs	r3, #8
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	0a1b      	lsrs	r3, r3, #8
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c96:	6a39      	ldr	r1, [r7, #32]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f000 fd3a 	bl	8004714 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ca0:	1e03      	subs	r3, r0, #0
 8003ca2:	d001      	beq.n	8003ca8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e014      	b.n	8003cd2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ca8:	2308      	movs	r3, #8
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb6:	6a3a      	ldr	r2, [r7, #32]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	0013      	movs	r3, r2
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2180      	movs	r1, #128	@ 0x80
 8003cc4:	f000 fcce 	bl	8004664 <I2C_WaitOnFlagUntilTimeout>
 8003cc8:	1e03      	subs	r3, r0, #0
 8003cca:	d001      	beq.n	8003cd0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b004      	add	sp, #16
 8003cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	80002000 	.word	0x80002000

08003ce0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003ce0:	b5b0      	push	{r4, r5, r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	000c      	movs	r4, r1
 8003cea:	0010      	movs	r0, r2
 8003cec:	0019      	movs	r1, r3
 8003cee:	250a      	movs	r5, #10
 8003cf0:	197b      	adds	r3, r7, r5
 8003cf2:	1c22      	adds	r2, r4, #0
 8003cf4:	801a      	strh	r2, [r3, #0]
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	1c02      	adds	r2, r0, #0
 8003cfc:	801a      	strh	r2, [r3, #0]
 8003cfe:	1dbb      	adds	r3, r7, #6
 8003d00:	1c0a      	adds	r2, r1, #0
 8003d02:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d04:	1dbb      	adds	r3, r7, #6
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	197b      	adds	r3, r7, r5
 8003d0c:	8819      	ldrh	r1, [r3, #0]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	4b23      	ldr	r3, [pc, #140]	@ (8003da0 <I2C_RequestMemoryRead+0xc0>)
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	2300      	movs	r3, #0
 8003d16:	f000 fe7f 	bl	8004a18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d1c:	6a39      	ldr	r1, [r7, #32]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	0018      	movs	r0, r3
 8003d22:	f000 fcf7 	bl	8004714 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d26:	1e03      	subs	r3, r0, #0
 8003d28:	d001      	beq.n	8003d2e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e033      	b.n	8003d96 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d2e:	1dbb      	adds	r3, r7, #6
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d107      	bne.n	8003d46 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d36:	2308      	movs	r3, #8
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d44:	e019      	b.n	8003d7a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d46:	2308      	movs	r3, #8
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	0a1b      	lsrs	r3, r3, #8
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d5a:	6a39      	ldr	r1, [r7, #32]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f000 fcd8 	bl	8004714 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d64:	1e03      	subs	r3, r0, #0
 8003d66:	d001      	beq.n	8003d6c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e014      	b.n	8003d96 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d6c:	2308      	movs	r3, #8
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d7a:	6a3a      	ldr	r2, [r7, #32]
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	0013      	movs	r3, r2
 8003d84:	2200      	movs	r2, #0
 8003d86:	2140      	movs	r1, #64	@ 0x40
 8003d88:	f000 fc6c 	bl	8004664 <I2C_WaitOnFlagUntilTimeout>
 8003d8c:	1e03      	subs	r3, r0, #0
 8003d8e:	d001      	beq.n	8003d94 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	0018      	movs	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b004      	add	sp, #16
 8003d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	80002000 	.word	0x80002000

08003da4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003da4:	b5b0      	push	{r4, r5, r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2241      	movs	r2, #65	@ 0x41
 8003db2:	5c9b      	ldrb	r3, [r3, r2]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	001a      	movs	r2, r3
 8003db8:	2328      	movs	r3, #40	@ 0x28
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b28      	cmp	r3, #40	@ 0x28
 8003dbe:	d000      	beq.n	8003dc2 <I2C_ITAddrCplt+0x1e>
 8003dc0:	e088      	b.n	8003ed4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	0c1b      	lsrs	r3, r3, #16
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	250f      	movs	r5, #15
 8003dce:	197b      	adds	r3, r7, r5
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	400a      	ands	r2, r1
 8003dd4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	200c      	movs	r0, #12
 8003de2:	183b      	adds	r3, r7, r0
 8003de4:	21fe      	movs	r1, #254	@ 0xfe
 8003de6:	400a      	ands	r2, r1
 8003de8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	240a      	movs	r4, #10
 8003df4:	193b      	adds	r3, r7, r4
 8003df6:	0592      	lsls	r2, r2, #22
 8003df8:	0d92      	lsrs	r2, r2, #22
 8003dfa:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	2308      	movs	r3, #8
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	21fe      	movs	r1, #254	@ 0xfe
 8003e0a:	400a      	ands	r2, r1
 8003e0c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d148      	bne.n	8003ea8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003e16:	0021      	movs	r1, r4
 8003e18:	187b      	adds	r3, r7, r1
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	09db      	lsrs	r3, r3, #7
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	183b      	adds	r3, r7, r0
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	4053      	eors	r3, r2
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	001a      	movs	r2, r3
 8003e2a:	2306      	movs	r3, #6
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d120      	bne.n	8003e72 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003e30:	183b      	adds	r3, r7, r0
 8003e32:	187a      	adds	r2, r7, r1
 8003e34:	8812      	ldrh	r2, [r2, #0]
 8003e36:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d14c      	bne.n	8003ee4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2208      	movs	r2, #8
 8003e56:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2240      	movs	r2, #64	@ 0x40
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e60:	183b      	adds	r3, r7, r0
 8003e62:	881a      	ldrh	r2, [r3, #0]
 8003e64:	197b      	adds	r3, r7, r5
 8003e66:	7819      	ldrb	r1, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f7ff fd98 	bl	80039a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003e70:	e038      	b.n	8003ee4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8003e72:	240c      	movs	r4, #12
 8003e74:	193b      	adds	r3, r7, r4
 8003e76:	2208      	movs	r2, #8
 8003e78:	18ba      	adds	r2, r7, r2
 8003e7a:	8812      	ldrh	r2, [r2, #0]
 8003e7c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003e7e:	2380      	movs	r3, #128	@ 0x80
 8003e80:	021a      	lsls	r2, r3, #8
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	0011      	movs	r1, r2
 8003e86:	0018      	movs	r0, r3
 8003e88:	f000 fe00 	bl	8004a8c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2240      	movs	r2, #64	@ 0x40
 8003e90:	2100      	movs	r1, #0
 8003e92:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e94:	193b      	adds	r3, r7, r4
 8003e96:	881a      	ldrh	r2, [r3, #0]
 8003e98:	230f      	movs	r3, #15
 8003e9a:	18fb      	adds	r3, r7, r3
 8003e9c:	7819      	ldrb	r1, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f7ff fd7d 	bl	80039a0 <HAL_I2C_AddrCallback>
}
 8003ea6:	e01d      	b.n	8003ee4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003ea8:	2380      	movs	r3, #128	@ 0x80
 8003eaa:	021a      	lsls	r2, r3, #8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	0011      	movs	r1, r2
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f000 fdeb 	bl	8004a8c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2240      	movs	r2, #64	@ 0x40
 8003eba:	2100      	movs	r1, #0
 8003ebc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003ebe:	230c      	movs	r3, #12
 8003ec0:	18fb      	adds	r3, r7, r3
 8003ec2:	881a      	ldrh	r2, [r3, #0]
 8003ec4:	230f      	movs	r3, #15
 8003ec6:	18fb      	adds	r3, r7, r3
 8003ec8:	7819      	ldrb	r1, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f7ff fd67 	bl	80039a0 <HAL_I2C_AddrCallback>
}
 8003ed2:	e007      	b.n	8003ee4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2208      	movs	r2, #8
 8003eda:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2240      	movs	r2, #64	@ 0x40
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	5499      	strb	r1, [r3, r2]
}
 8003ee4:	46c0      	nop			@ (mov r8, r8)
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b004      	add	sp, #16
 8003eea:	bdb0      	pop	{r4, r5, r7, pc}

08003eec <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2242      	movs	r2, #66	@ 0x42
 8003f00:	2100      	movs	r1, #0
 8003f02:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	0b9b      	lsrs	r3, r3, #14
 8003f08:	001a      	movs	r2, r3
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d008      	beq.n	8003f22 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4925      	ldr	r1, [pc, #148]	@ (8003fb0 <I2C_ITSlaveSeqCplt+0xc4>)
 8003f1c:	400a      	ands	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	e00d      	b.n	8003f3e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	0bdb      	lsrs	r3, r3, #15
 8003f26:	001a      	movs	r2, r3
 8003f28:	2301      	movs	r3, #1
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d007      	beq.n	8003f3e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	491e      	ldr	r1, [pc, #120]	@ (8003fb4 <I2C_ITSlaveSeqCplt+0xc8>)
 8003f3a:	400a      	ands	r2, r1
 8003f3c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2241      	movs	r2, #65	@ 0x41
 8003f42:	5c9b      	ldrb	r3, [r3, r2]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b29      	cmp	r3, #41	@ 0x29
 8003f48:	d114      	bne.n	8003f74 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2241      	movs	r2, #65	@ 0x41
 8003f4e:	2128      	movs	r1, #40	@ 0x28
 8003f50:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2221      	movs	r2, #33	@ 0x21
 8003f56:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f000 fd95 	bl	8004a8c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2240      	movs	r2, #64	@ 0x40
 8003f66:	2100      	movs	r1, #0
 8003f68:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f7ff fd07 	bl	8003980 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f72:	e019      	b.n	8003fa8 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2241      	movs	r2, #65	@ 0x41
 8003f78:	5c9b      	ldrb	r3, [r3, r2]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f7e:	d113      	bne.n	8003fa8 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2241      	movs	r2, #65	@ 0x41
 8003f84:	2128      	movs	r1, #40	@ 0x28
 8003f86:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2222      	movs	r2, #34	@ 0x22
 8003f8c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2102      	movs	r1, #2
 8003f92:	0018      	movs	r0, r3
 8003f94:	f000 fd7a 	bl	8004a8c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2240      	movs	r2, #64	@ 0x40
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f7ff fcf4 	bl	8003990 <HAL_I2C_SlaveRxCpltCallback>
}
 8003fa8:	46c0      	nop			@ (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b004      	add	sp, #16
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	ffffbfff 	.word	0xffffbfff
 8003fb4:	ffff7fff 	.word	0xffff7fff

08003fb8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003fd4:	200b      	movs	r0, #11
 8003fd6:	183b      	adds	r3, r7, r0
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	2141      	movs	r1, #65	@ 0x41
 8003fdc:	5c52      	ldrb	r2, [r2, r1]
 8003fde:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fe8:	183b      	adds	r3, r7, r0
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b21      	cmp	r3, #33	@ 0x21
 8003fee:	d003      	beq.n	8003ff8 <I2C_ITSlaveCplt+0x40>
 8003ff0:	183b      	adds	r3, r7, r0
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b29      	cmp	r3, #41	@ 0x29
 8003ff6:	d109      	bne.n	800400c <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003ff8:	4ab0      	ldr	r2, [pc, #704]	@ (80042bc <I2C_ITSlaveCplt+0x304>)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	0011      	movs	r1, r2
 8003ffe:	0018      	movs	r0, r3
 8004000:	f000 fd44 	bl	8004a8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2221      	movs	r2, #33	@ 0x21
 8004008:	631a      	str	r2, [r3, #48]	@ 0x30
 800400a:	e020      	b.n	800404e <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800400c:	220b      	movs	r2, #11
 800400e:	18bb      	adds	r3, r7, r2
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b22      	cmp	r3, #34	@ 0x22
 8004014:	d003      	beq.n	800401e <I2C_ITSlaveCplt+0x66>
 8004016:	18bb      	adds	r3, r7, r2
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b2a      	cmp	r3, #42	@ 0x2a
 800401c:	d109      	bne.n	8004032 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800401e:	4aa8      	ldr	r2, [pc, #672]	@ (80042c0 <I2C_ITSlaveCplt+0x308>)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	0011      	movs	r1, r2
 8004024:	0018      	movs	r0, r3
 8004026:	f000 fd31 	bl	8004a8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2222      	movs	r2, #34	@ 0x22
 800402e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004030:	e00d      	b.n	800404e <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004032:	230b      	movs	r3, #11
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b28      	cmp	r3, #40	@ 0x28
 800403a:	d108      	bne.n	800404e <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800403c:	4aa1      	ldr	r2, [pc, #644]	@ (80042c4 <I2C_ITSlaveCplt+0x30c>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	0011      	movs	r1, r2
 8004042:	0018      	movs	r0, r3
 8004044:	f000 fd22 	bl	8004a8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2180      	movs	r1, #128	@ 0x80
 800405a:	0209      	lsls	r1, r1, #8
 800405c:	430a      	orrs	r2, r1
 800405e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4997      	ldr	r1, [pc, #604]	@ (80042c8 <I2C_ITSlaveCplt+0x310>)
 800406c:	400a      	ands	r2, r1
 800406e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	0018      	movs	r0, r3
 8004074:	f000 fab5 	bl	80045e2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	0b9b      	lsrs	r3, r3, #14
 800407c:	001a      	movs	r2, r3
 800407e:	2301      	movs	r3, #1
 8004080:	4013      	ands	r3, r2
 8004082:	d013      	beq.n	80040ac <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	498f      	ldr	r1, [pc, #572]	@ (80042cc <I2C_ITSlaveCplt+0x314>)
 8004090:	400a      	ands	r2, r1
 8004092:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004098:	2b00      	cmp	r3, #0
 800409a:	d020      	beq.n	80040de <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040aa:	e018      	b.n	80040de <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	0bdb      	lsrs	r3, r3, #15
 80040b0:	001a      	movs	r2, r3
 80040b2:	2301      	movs	r3, #1
 80040b4:	4013      	ands	r3, r2
 80040b6:	d012      	beq.n	80040de <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4983      	ldr	r1, [pc, #524]	@ (80042d0 <I2C_ITSlaveCplt+0x318>)
 80040c4:	400a      	ands	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d006      	beq.n	80040de <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	b29a      	uxth	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	001a      	movs	r2, r3
 80040e4:	2301      	movs	r3, #1
 80040e6:	4013      	ands	r3, r2
 80040e8:	d020      	beq.n	800412c <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2204      	movs	r2, #4
 80040ee:	4393      	bics	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00c      	beq.n	800412c <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413a:	2204      	movs	r2, #4
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	001a      	movs	r2, r3
 8004148:	2301      	movs	r3, #1
 800414a:	4013      	ands	r3, r2
 800414c:	d051      	beq.n	80041f2 <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	001a      	movs	r2, r3
 8004154:	2301      	movs	r3, #1
 8004156:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004158:	d04b      	beq.n	80041f2 <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d12d      	bne.n	80041c0 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2241      	movs	r2, #65	@ 0x41
 8004168:	5c9b      	ldrb	r3, [r3, r2]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b28      	cmp	r3, #40	@ 0x28
 800416e:	d10b      	bne.n	8004188 <I2C_ITSlaveCplt+0x1d0>
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	2380      	movs	r3, #128	@ 0x80
 8004174:	049b      	lsls	r3, r3, #18
 8004176:	429a      	cmp	r2, r3
 8004178:	d106      	bne.n	8004188 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	0011      	movs	r1, r2
 8004180:	0018      	movs	r0, r3
 8004182:	f000 f8a9 	bl	80042d8 <I2C_ITListenCplt>
 8004186:	e034      	b.n	80041f2 <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2241      	movs	r2, #65	@ 0x41
 800418c:	5c9b      	ldrb	r3, [r3, r2]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b29      	cmp	r3, #41	@ 0x29
 8004192:	d110      	bne.n	80041b6 <I2C_ITSlaveCplt+0x1fe>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4a4f      	ldr	r2, [pc, #316]	@ (80042d4 <I2C_ITSlaveCplt+0x31c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00c      	beq.n	80041b6 <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2210      	movs	r2, #16
 80041a2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	0018      	movs	r0, r3
 80041a8:	f000 fa1b 	bl	80045e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	0018      	movs	r0, r3
 80041b0:	f7ff fe9c 	bl	8003eec <I2C_ITSlaveSeqCplt>
 80041b4:	e01d      	b.n	80041f2 <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2210      	movs	r2, #16
 80041bc:	61da      	str	r2, [r3, #28]
 80041be:	e018      	b.n	80041f2 <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2210      	movs	r2, #16
 80041c6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041cc:	2204      	movs	r2, #4
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <I2C_ITSlaveCplt+0x22c>
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	2380      	movs	r3, #128	@ 0x80
 80041de:	045b      	lsls	r3, r3, #17
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d106      	bne.n	80041f2 <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	0011      	movs	r1, r2
 80041ec:	0018      	movs	r0, r3
 80041ee:	f000 f8cd 	bl	800438c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2242      	movs	r2, #66	@ 0x42
 80041f6:	2100      	movs	r1, #0
 80041f8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004204:	2b00      	cmp	r3, #0
 8004206:	d013      	beq.n	8004230 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	0011      	movs	r1, r2
 8004210:	0018      	movs	r0, r3
 8004212:	f000 f8bb 	bl	800438c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2241      	movs	r2, #65	@ 0x41
 800421a:	5c9b      	ldrb	r3, [r3, r2]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b28      	cmp	r3, #40	@ 0x28
 8004220:	d147      	bne.n	80042b2 <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	0011      	movs	r1, r2
 8004228:	0018      	movs	r0, r3
 800422a:	f000 f855 	bl	80042d8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800422e:	e040      	b.n	80042b2 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004234:	4a27      	ldr	r2, [pc, #156]	@ (80042d4 <I2C_ITSlaveCplt+0x31c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d016      	beq.n	8004268 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	0018      	movs	r0, r3
 800423e:	f7ff fe55 	bl	8003eec <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a23      	ldr	r2, [pc, #140]	@ (80042d4 <I2C_ITSlaveCplt+0x31c>)
 8004246:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2241      	movs	r2, #65	@ 0x41
 800424c:	2120      	movs	r1, #32
 800424e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2240      	movs	r2, #64	@ 0x40
 800425a:	2100      	movs	r1, #0
 800425c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	0018      	movs	r0, r3
 8004262:	f7ff fbad 	bl	80039c0 <HAL_I2C_ListenCpltCallback>
}
 8004266:	e024      	b.n	80042b2 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2241      	movs	r2, #65	@ 0x41
 800426c:	5c9b      	ldrb	r3, [r3, r2]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b22      	cmp	r3, #34	@ 0x22
 8004272:	d10f      	bne.n	8004294 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2241      	movs	r2, #65	@ 0x41
 8004278:	2120      	movs	r1, #32
 800427a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2240      	movs	r2, #64	@ 0x40
 8004286:	2100      	movs	r1, #0
 8004288:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	0018      	movs	r0, r3
 800428e:	f7ff fb7f 	bl	8003990 <HAL_I2C_SlaveRxCpltCallback>
}
 8004292:	e00e      	b.n	80042b2 <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2241      	movs	r2, #65	@ 0x41
 8004298:	2120      	movs	r1, #32
 800429a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2240      	movs	r2, #64	@ 0x40
 80042a6:	2100      	movs	r1, #0
 80042a8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f7ff fb67 	bl	8003980 <HAL_I2C_SlaveTxCpltCallback>
}
 80042b2:	46c0      	nop			@ (mov r8, r8)
 80042b4:	46bd      	mov	sp, r7
 80042b6:	b006      	add	sp, #24
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	46c0      	nop			@ (mov r8, r8)
 80042bc:	00008001 	.word	0x00008001
 80042c0:	00008002 	.word	0x00008002
 80042c4:	00008003 	.word	0x00008003
 80042c8:	fe00e800 	.word	0xfe00e800
 80042cc:	ffffbfff 	.word	0xffffbfff
 80042d0:	ffff7fff 	.word	0xffff7fff
 80042d4:	ffff0000 	.word	0xffff0000

080042d8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a27      	ldr	r2, [pc, #156]	@ (8004384 <I2C_ITListenCplt+0xac>)
 80042e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2241      	movs	r2, #65	@ 0x41
 80042f2:	2120      	movs	r1, #32
 80042f4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2242      	movs	r2, #66	@ 0x42
 80042fa:	2100      	movs	r1, #0
 80042fc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	089b      	lsrs	r3, r3, #2
 8004308:	001a      	movs	r2, r3
 800430a:	2301      	movs	r3, #1
 800430c:	4013      	ands	r3, r2
 800430e:	d022      	beq.n	8004356 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800432c:	2b00      	cmp	r3, #0
 800432e:	d012      	beq.n	8004356 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434e:	2204      	movs	r2, #4
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004356:	4a0c      	ldr	r2, [pc, #48]	@ (8004388 <I2C_ITListenCplt+0xb0>)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	0011      	movs	r1, r2
 800435c:	0018      	movs	r0, r3
 800435e:	f000 fb95 	bl	8004a8c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2210      	movs	r2, #16
 8004368:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2240      	movs	r2, #64	@ 0x40
 800436e:	2100      	movs	r1, #0
 8004370:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	0018      	movs	r0, r3
 8004376:	f7ff fb23 	bl	80039c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800437a:	46c0      	nop			@ (mov r8, r8)
 800437c:	46bd      	mov	sp, r7
 800437e:	b002      	add	sp, #8
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			@ (mov r8, r8)
 8004384:	ffff0000 	.word	0xffff0000
 8004388:	00008003 	.word	0x00008003

0800438c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004396:	200f      	movs	r0, #15
 8004398:	183b      	adds	r3, r7, r0
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	2141      	movs	r1, #65	@ 0x41
 800439e:	5c52      	ldrb	r2, [r2, r1]
 80043a0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2242      	movs	r2, #66	@ 0x42
 80043a6:	2100      	movs	r1, #0
 80043a8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a72      	ldr	r2, [pc, #456]	@ (8004578 <I2C_ITError+0x1ec>)
 80043ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	431a      	orrs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80043c2:	183b      	adds	r3, r7, r0
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b28      	cmp	r3, #40	@ 0x28
 80043c8:	d007      	beq.n	80043da <I2C_ITError+0x4e>
 80043ca:	183b      	adds	r3, r7, r0
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b29      	cmp	r3, #41	@ 0x29
 80043d0:	d003      	beq.n	80043da <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80043d2:	183b      	adds	r3, r7, r0
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80043d8:	d10c      	bne.n	80043f4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2103      	movs	r1, #3
 80043de:	0018      	movs	r0, r3
 80043e0:	f000 fb54 	bl	8004a8c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2241      	movs	r2, #65	@ 0x41
 80043e8:	2128      	movs	r1, #40	@ 0x28
 80043ea:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a63      	ldr	r2, [pc, #396]	@ (800457c <I2C_ITError+0x1f0>)
 80043f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80043f2:	e032      	b.n	800445a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80043f4:	4a62      	ldr	r2, [pc, #392]	@ (8004580 <I2C_ITError+0x1f4>)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	0011      	movs	r1, r2
 80043fa:	0018      	movs	r0, r3
 80043fc:	f000 fb46 	bl	8004a8c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	0018      	movs	r0, r3
 8004404:	f000 f8ed 	bl	80045e2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2241      	movs	r2, #65	@ 0x41
 800440c:	5c9b      	ldrb	r3, [r3, r2]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b60      	cmp	r3, #96	@ 0x60
 8004412:	d01f      	beq.n	8004454 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2241      	movs	r2, #65	@ 0x41
 8004418:	2120      	movs	r1, #32
 800441a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	2220      	movs	r2, #32
 8004424:	4013      	ands	r3, r2
 8004426:	2b20      	cmp	r3, #32
 8004428:	d114      	bne.n	8004454 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	2210      	movs	r2, #16
 8004432:	4013      	ands	r3, r2
 8004434:	2b10      	cmp	r3, #16
 8004436:	d109      	bne.n	800444c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2210      	movs	r2, #16
 800443e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004444:	2204      	movs	r2, #4
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2220      	movs	r2, #32
 8004452:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004464:	2b00      	cmp	r3, #0
 8004466:	d03b      	beq.n	80044e0 <I2C_ITError+0x154>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b11      	cmp	r3, #17
 800446c:	d002      	beq.n	8004474 <I2C_ITError+0xe8>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b21      	cmp	r3, #33	@ 0x21
 8004472:	d135      	bne.n	80044e0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	2380      	movs	r3, #128	@ 0x80
 800447c:	01db      	lsls	r3, r3, #7
 800447e:	401a      	ands	r2, r3
 8004480:	2380      	movs	r3, #128	@ 0x80
 8004482:	01db      	lsls	r3, r3, #7
 8004484:	429a      	cmp	r2, r3
 8004486:	d107      	bne.n	8004498 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	493c      	ldr	r1, [pc, #240]	@ (8004584 <I2C_ITError+0x1f8>)
 8004494:	400a      	ands	r2, r1
 8004496:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449c:	0018      	movs	r0, r3
 800449e:	f7fe fd50 	bl	8002f42 <HAL_DMA_GetState>
 80044a2:	0003      	movs	r3, r0
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d016      	beq.n	80044d6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ac:	4a36      	ldr	r2, [pc, #216]	@ (8004588 <I2C_ITError+0x1fc>)
 80044ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2240      	movs	r2, #64	@ 0x40
 80044b4:	2100      	movs	r1, #0
 80044b6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044bc:	0018      	movs	r0, r3
 80044be:	f7fe fcfb 	bl	8002eb8 <HAL_DMA_Abort_IT>
 80044c2:	1e03      	subs	r3, r0, #0
 80044c4:	d051      	beq.n	800456a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d0:	0018      	movs	r0, r3
 80044d2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044d4:	e049      	b.n	800456a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	0018      	movs	r0, r3
 80044da:	f000 f859 	bl	8004590 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044de:	e044      	b.n	800456a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d03b      	beq.n	8004560 <I2C_ITError+0x1d4>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b12      	cmp	r3, #18
 80044ec:	d002      	beq.n	80044f4 <I2C_ITError+0x168>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b22      	cmp	r3, #34	@ 0x22
 80044f2:	d135      	bne.n	8004560 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	2380      	movs	r3, #128	@ 0x80
 80044fc:	021b      	lsls	r3, r3, #8
 80044fe:	401a      	ands	r2, r3
 8004500:	2380      	movs	r3, #128	@ 0x80
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	429a      	cmp	r2, r3
 8004506:	d107      	bne.n	8004518 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	491e      	ldr	r1, [pc, #120]	@ (800458c <I2C_ITError+0x200>)
 8004514:	400a      	ands	r2, r1
 8004516:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451c:	0018      	movs	r0, r3
 800451e:	f7fe fd10 	bl	8002f42 <HAL_DMA_GetState>
 8004522:	0003      	movs	r3, r0
 8004524:	2b01      	cmp	r3, #1
 8004526:	d016      	beq.n	8004556 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452c:	4a16      	ldr	r2, [pc, #88]	@ (8004588 <I2C_ITError+0x1fc>)
 800452e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2240      	movs	r2, #64	@ 0x40
 8004534:	2100      	movs	r1, #0
 8004536:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453c:	0018      	movs	r0, r3
 800453e:	f7fe fcbb 	bl	8002eb8 <HAL_DMA_Abort_IT>
 8004542:	1e03      	subs	r3, r0, #0
 8004544:	d013      	beq.n	800456e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004550:	0018      	movs	r0, r3
 8004552:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004554:	e00b      	b.n	800456e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	0018      	movs	r0, r3
 800455a:	f000 f819 	bl	8004590 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800455e:	e006      	b.n	800456e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	0018      	movs	r0, r3
 8004564:	f000 f814 	bl	8004590 <I2C_TreatErrorCallback>
  }
}
 8004568:	e002      	b.n	8004570 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800456a:	46c0      	nop			@ (mov r8, r8)
 800456c:	e000      	b.n	8004570 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800456e:	46c0      	nop			@ (mov r8, r8)
}
 8004570:	46c0      	nop			@ (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	b004      	add	sp, #16
 8004576:	bd80      	pop	{r7, pc}
 8004578:	ffff0000 	.word	0xffff0000
 800457c:	080039f1 	.word	0x080039f1
 8004580:	00008003 	.word	0x00008003
 8004584:	ffffbfff 	.word	0xffffbfff
 8004588:	08004627 	.word	0x08004627
 800458c:	ffff7fff 	.word	0xffff7fff

08004590 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2241      	movs	r2, #65	@ 0x41
 800459c:	5c9b      	ldrb	r3, [r3, r2]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b60      	cmp	r3, #96	@ 0x60
 80045a2:	d10f      	bne.n	80045c4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2241      	movs	r2, #65	@ 0x41
 80045a8:	2120      	movs	r1, #32
 80045aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2240      	movs	r2, #64	@ 0x40
 80045b6:	2100      	movs	r1, #0
 80045b8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0018      	movs	r0, r3
 80045be:	f7ff fa0f 	bl	80039e0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045c2:	e00a      	b.n	80045da <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2240      	movs	r2, #64	@ 0x40
 80045ce:	2100      	movs	r1, #0
 80045d0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f7ff f9fb 	bl	80039d0 <HAL_I2C_ErrorCallback>
}
 80045da:	46c0      	nop			@ (mov r8, r8)
 80045dc:	46bd      	mov	sp, r7
 80045de:	b002      	add	sp, #8
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	2202      	movs	r2, #2
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d103      	bne.n	8004600 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2200      	movs	r2, #0
 80045fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	2201      	movs	r2, #1
 8004608:	4013      	ands	r3, r2
 800460a:	2b01      	cmp	r3, #1
 800460c:	d007      	beq.n	800461e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699a      	ldr	r2, [r3, #24]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2101      	movs	r1, #1
 800461a:	430a      	orrs	r2, r1
 800461c:	619a      	str	r2, [r3, #24]
  }
}
 800461e:	46c0      	nop			@ (mov r8, r8)
 8004620:	46bd      	mov	sp, r7
 8004622:	b002      	add	sp, #8
 8004624:	bd80      	pop	{r7, pc}

08004626 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b084      	sub	sp, #16
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004640:	2200      	movs	r2, #0
 8004642:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004650:	2200      	movs	r2, #0
 8004652:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	0018      	movs	r0, r3
 8004658:	f7ff ff9a 	bl	8004590 <I2C_TreatErrorCallback>
}
 800465c:	46c0      	nop			@ (mov r8, r8)
 800465e:	46bd      	mov	sp, r7
 8004660:	b004      	add	sp, #16
 8004662:	bd80      	pop	{r7, pc}

08004664 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	1dfb      	adds	r3, r7, #7
 8004672:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004674:	e03a      	b.n	80046ec <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	6839      	ldr	r1, [r7, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	0018      	movs	r0, r3
 800467e:	f000 f8d3 	bl	8004828 <I2C_IsErrorOccurred>
 8004682:	1e03      	subs	r3, r0, #0
 8004684:	d001      	beq.n	800468a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e040      	b.n	800470c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	3301      	adds	r3, #1
 800468e:	d02d      	beq.n	80046ec <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004690:	f7fe face 	bl	8002c30 <HAL_GetTick>
 8004694:	0002      	movs	r2, r0
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d302      	bcc.n	80046a6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d122      	bne.n	80046ec <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	4013      	ands	r3, r2
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	425a      	negs	r2, r3
 80046b6:	4153      	adcs	r3, r2
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	001a      	movs	r2, r3
 80046bc:	1dfb      	adds	r3, r7, #7
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d113      	bne.n	80046ec <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c8:	2220      	movs	r2, #32
 80046ca:	431a      	orrs	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2241      	movs	r2, #65	@ 0x41
 80046d4:	2120      	movs	r1, #32
 80046d6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2242      	movs	r2, #66	@ 0x42
 80046dc:	2100      	movs	r1, #0
 80046de:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2240      	movs	r2, #64	@ 0x40
 80046e4:	2100      	movs	r1, #0
 80046e6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e00f      	b.n	800470c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	4013      	ands	r3, r2
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	425a      	negs	r2, r3
 80046fc:	4153      	adcs	r3, r2
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	001a      	movs	r2, r3
 8004702:	1dfb      	adds	r3, r7, #7
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d0b5      	beq.n	8004676 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	0018      	movs	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	b004      	add	sp, #16
 8004712:	bd80      	pop	{r7, pc}

08004714 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004720:	e032      	b.n	8004788 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	0018      	movs	r0, r3
 800472a:	f000 f87d 	bl	8004828 <I2C_IsErrorOccurred>
 800472e:	1e03      	subs	r3, r0, #0
 8004730:	d001      	beq.n	8004736 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e030      	b.n	8004798 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	3301      	adds	r3, #1
 800473a:	d025      	beq.n	8004788 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473c:	f7fe fa78 	bl	8002c30 <HAL_GetTick>
 8004740:	0002      	movs	r2, r0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d11a      	bne.n	8004788 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	2202      	movs	r2, #2
 800475a:	4013      	ands	r3, r2
 800475c:	2b02      	cmp	r3, #2
 800475e:	d013      	beq.n	8004788 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004764:	2220      	movs	r2, #32
 8004766:	431a      	orrs	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2241      	movs	r2, #65	@ 0x41
 8004770:	2120      	movs	r1, #32
 8004772:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2242      	movs	r2, #66	@ 0x42
 8004778:	2100      	movs	r1, #0
 800477a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2240      	movs	r2, #64	@ 0x40
 8004780:	2100      	movs	r1, #0
 8004782:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e007      	b.n	8004798 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2202      	movs	r2, #2
 8004790:	4013      	ands	r3, r2
 8004792:	2b02      	cmp	r3, #2
 8004794:	d1c5      	bne.n	8004722 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	0018      	movs	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	b004      	add	sp, #16
 800479e:	bd80      	pop	{r7, pc}

080047a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047ac:	e02f      	b.n	800480e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	0018      	movs	r0, r3
 80047b6:	f000 f837 	bl	8004828 <I2C_IsErrorOccurred>
 80047ba:	1e03      	subs	r3, r0, #0
 80047bc:	d001      	beq.n	80047c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e02d      	b.n	800481e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c2:	f7fe fa35 	bl	8002c30 <HAL_GetTick>
 80047c6:	0002      	movs	r2, r0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d302      	bcc.n	80047d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d11a      	bne.n	800480e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	2220      	movs	r2, #32
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	d013      	beq.n	800480e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ea:	2220      	movs	r2, #32
 80047ec:	431a      	orrs	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2241      	movs	r2, #65	@ 0x41
 80047f6:	2120      	movs	r1, #32
 80047f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2242      	movs	r2, #66	@ 0x42
 80047fe:	2100      	movs	r1, #0
 8004800:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2240      	movs	r2, #64	@ 0x40
 8004806:	2100      	movs	r1, #0
 8004808:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e007      	b.n	800481e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	2220      	movs	r2, #32
 8004816:	4013      	ands	r3, r2
 8004818:	2b20      	cmp	r3, #32
 800481a:	d1c8      	bne.n	80047ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b004      	add	sp, #16
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	@ 0x28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004834:	2327      	movs	r3, #39	@ 0x27
 8004836:	18fb      	adds	r3, r7, r3
 8004838:	2200      	movs	r2, #0
 800483a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2210      	movs	r2, #16
 8004850:	4013      	ands	r3, r2
 8004852:	d100      	bne.n	8004856 <I2C_IsErrorOccurred+0x2e>
 8004854:	e079      	b.n	800494a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2210      	movs	r2, #16
 800485c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800485e:	e057      	b.n	8004910 <I2C_IsErrorOccurred+0xe8>
 8004860:	2227      	movs	r2, #39	@ 0x27
 8004862:	18bb      	adds	r3, r7, r2
 8004864:	18ba      	adds	r2, r7, r2
 8004866:	7812      	ldrb	r2, [r2, #0]
 8004868:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	3301      	adds	r3, #1
 800486e:	d04f      	beq.n	8004910 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004870:	f7fe f9de 	bl	8002c30 <HAL_GetTick>
 8004874:	0002      	movs	r2, r0
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	429a      	cmp	r2, r3
 800487e:	d302      	bcc.n	8004886 <I2C_IsErrorOccurred+0x5e>
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d144      	bne.n	8004910 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	2380      	movs	r3, #128	@ 0x80
 800488e:	01db      	lsls	r3, r3, #7
 8004890:	4013      	ands	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004894:	2013      	movs	r0, #19
 8004896:	183b      	adds	r3, r7, r0
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	2142      	movs	r1, #66	@ 0x42
 800489c:	5c52      	ldrb	r2, [r2, r1]
 800489e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	2380      	movs	r3, #128	@ 0x80
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	401a      	ands	r2, r3
 80048ac:	2380      	movs	r3, #128	@ 0x80
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d126      	bne.n	8004902 <I2C_IsErrorOccurred+0xda>
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	2380      	movs	r3, #128	@ 0x80
 80048b8:	01db      	lsls	r3, r3, #7
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d021      	beq.n	8004902 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80048be:	183b      	adds	r3, r7, r0
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d01d      	beq.n	8004902 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2180      	movs	r1, #128	@ 0x80
 80048d2:	01c9      	lsls	r1, r1, #7
 80048d4:	430a      	orrs	r2, r1
 80048d6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048d8:	f7fe f9aa 	bl	8002c30 <HAL_GetTick>
 80048dc:	0003      	movs	r3, r0
 80048de:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048e0:	e00f      	b.n	8004902 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048e2:	f7fe f9a5 	bl	8002c30 <HAL_GetTick>
 80048e6:	0002      	movs	r2, r0
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b19      	cmp	r3, #25
 80048ee:	d908      	bls.n	8004902 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	2220      	movs	r2, #32
 80048f4:	4313      	orrs	r3, r2
 80048f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048f8:	2327      	movs	r3, #39	@ 0x27
 80048fa:	18fb      	adds	r3, r7, r3
 80048fc:	2201      	movs	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]

              break;
 8004900:	e006      	b.n	8004910 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	2220      	movs	r2, #32
 800490a:	4013      	ands	r3, r2
 800490c:	2b20      	cmp	r3, #32
 800490e:	d1e8      	bne.n	80048e2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	2220      	movs	r2, #32
 8004918:	4013      	ands	r3, r2
 800491a:	2b20      	cmp	r3, #32
 800491c:	d004      	beq.n	8004928 <I2C_IsErrorOccurred+0x100>
 800491e:	2327      	movs	r3, #39	@ 0x27
 8004920:	18fb      	adds	r3, r7, r3
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d09b      	beq.n	8004860 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004928:	2327      	movs	r3, #39	@ 0x27
 800492a:	18fb      	adds	r3, r7, r3
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d103      	bne.n	800493a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2220      	movs	r2, #32
 8004938:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	2204      	movs	r2, #4
 800493e:	4313      	orrs	r3, r2
 8004940:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004942:	2327      	movs	r3, #39	@ 0x27
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	2201      	movs	r2, #1
 8004948:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	2380      	movs	r3, #128	@ 0x80
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	4013      	ands	r3, r2
 800495a:	d00c      	beq.n	8004976 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	2201      	movs	r2, #1
 8004960:	4313      	orrs	r3, r2
 8004962:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2280      	movs	r2, #128	@ 0x80
 800496a:	0052      	lsls	r2, r2, #1
 800496c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800496e:	2327      	movs	r3, #39	@ 0x27
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	2201      	movs	r2, #1
 8004974:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	2380      	movs	r3, #128	@ 0x80
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4013      	ands	r3, r2
 800497e:	d00c      	beq.n	800499a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	2208      	movs	r2, #8
 8004984:	4313      	orrs	r3, r2
 8004986:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2280      	movs	r2, #128	@ 0x80
 800498e:	00d2      	lsls	r2, r2, #3
 8004990:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004992:	2327      	movs	r3, #39	@ 0x27
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	2201      	movs	r2, #1
 8004998:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	2380      	movs	r3, #128	@ 0x80
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4013      	ands	r3, r2
 80049a2:	d00c      	beq.n	80049be <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	2202      	movs	r2, #2
 80049a8:	4313      	orrs	r3, r2
 80049aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2280      	movs	r2, #128	@ 0x80
 80049b2:	0092      	lsls	r2, r2, #2
 80049b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049b6:	2327      	movs	r3, #39	@ 0x27
 80049b8:	18fb      	adds	r3, r7, r3
 80049ba:	2201      	movs	r2, #1
 80049bc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80049be:	2327      	movs	r3, #39	@ 0x27
 80049c0:	18fb      	adds	r3, r7, r3
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01d      	beq.n	8004a04 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	0018      	movs	r0, r3
 80049cc:	f7ff fe09 	bl	80045e2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	490e      	ldr	r1, [pc, #56]	@ (8004a14 <I2C_IsErrorOccurred+0x1ec>)
 80049dc:	400a      	ands	r2, r1
 80049de:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2241      	movs	r2, #65	@ 0x41
 80049f0:	2120      	movs	r1, #32
 80049f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2242      	movs	r2, #66	@ 0x42
 80049f8:	2100      	movs	r1, #0
 80049fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2240      	movs	r2, #64	@ 0x40
 8004a00:	2100      	movs	r1, #0
 8004a02:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004a04:	2327      	movs	r3, #39	@ 0x27
 8004a06:	18fb      	adds	r3, r7, r3
 8004a08:	781b      	ldrb	r3, [r3, #0]
}
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b00a      	add	sp, #40	@ 0x28
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	fe00e800 	.word	0xfe00e800

08004a18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a18:	b590      	push	{r4, r7, lr}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	0008      	movs	r0, r1
 8004a22:	0011      	movs	r1, r2
 8004a24:	607b      	str	r3, [r7, #4]
 8004a26:	240a      	movs	r4, #10
 8004a28:	193b      	adds	r3, r7, r4
 8004a2a:	1c02      	adds	r2, r0, #0
 8004a2c:	801a      	strh	r2, [r3, #0]
 8004a2e:	2009      	movs	r0, #9
 8004a30:	183b      	adds	r3, r7, r0
 8004a32:	1c0a      	adds	r2, r1, #0
 8004a34:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a36:	193b      	adds	r3, r7, r4
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	059b      	lsls	r3, r3, #22
 8004a3c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a3e:	183b      	adds	r3, r7, r0
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	0419      	lsls	r1, r3, #16
 8004a44:	23ff      	movs	r3, #255	@ 0xff
 8004a46:	041b      	lsls	r3, r3, #16
 8004a48:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a4a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a52:	4313      	orrs	r3, r2
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	085b      	lsrs	r3, r3, #1
 8004a58:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a62:	0d51      	lsrs	r1, r2, #21
 8004a64:	2280      	movs	r2, #128	@ 0x80
 8004a66:	00d2      	lsls	r2, r2, #3
 8004a68:	400a      	ands	r2, r1
 8004a6a:	4907      	ldr	r1, [pc, #28]	@ (8004a88 <I2C_TransferConfig+0x70>)
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	43d2      	mvns	r2, r2
 8004a70:	401a      	ands	r2, r3
 8004a72:	0011      	movs	r1, r2
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	46bd      	mov	sp, r7
 8004a82:	b007      	add	sp, #28
 8004a84:	bd90      	pop	{r4, r7, pc}
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	03ff63ff 	.word	0x03ff63ff

08004a8c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	000a      	movs	r2, r1
 8004a96:	1cbb      	adds	r3, r7, #2
 8004a98:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004a9e:	1cbb      	adds	r3, r7, #2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d010      	beq.n	8004aca <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2242      	movs	r2, #66	@ 0x42
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2241      	movs	r2, #65	@ 0x41
 8004ab4:	5c9b      	ldrb	r3, [r3, r2]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	001a      	movs	r2, r3
 8004aba:	2328      	movs	r3, #40	@ 0x28
 8004abc:	4013      	ands	r3, r2
 8004abe:	2b28      	cmp	r3, #40	@ 0x28
 8004ac0:	d003      	beq.n	8004aca <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	22b0      	movs	r2, #176	@ 0xb0
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004aca:	1cbb      	adds	r3, r7, #2
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d010      	beq.n	8004af6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2244      	movs	r2, #68	@ 0x44
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2241      	movs	r2, #65	@ 0x41
 8004ae0:	5c9b      	ldrb	r3, [r3, r2]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	001a      	movs	r2, r3
 8004ae6:	2328      	movs	r3, #40	@ 0x28
 8004ae8:	4013      	ands	r3, r2
 8004aea:	2b28      	cmp	r3, #40	@ 0x28
 8004aec:	d003      	beq.n	8004af6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	22b0      	movs	r2, #176	@ 0xb0
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004af6:	1cbb      	adds	r3, r7, #2
 8004af8:	2200      	movs	r2, #0
 8004afa:	5e9b      	ldrsh	r3, [r3, r2]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	da03      	bge.n	8004b08 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	22b8      	movs	r2, #184	@ 0xb8
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004b08:	1cbb      	adds	r3, r7, #2
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d103      	bne.n	8004b18 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2290      	movs	r2, #144	@ 0x90
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b18:	1cbb      	adds	r3, r7, #2
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d103      	bne.n	8004b28 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2220      	movs	r2, #32
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b28:	1cbb      	adds	r3, r7, #2
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	2b40      	cmp	r3, #64	@ 0x40
 8004b2e:	d103      	bne.n	8004b38 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2240      	movs	r2, #64	@ 0x40
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	43d9      	mvns	r1, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	400a      	ands	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]
}
 8004b4a:	46c0      	nop			@ (mov r8, r8)
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	b004      	add	sp, #16
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2241      	movs	r2, #65	@ 0x41
 8004b62:	5c9b      	ldrb	r3, [r3, r2]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d138      	bne.n	8004bdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2240      	movs	r2, #64	@ 0x40
 8004b6e:	5c9b      	ldrb	r3, [r3, r2]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e032      	b.n	8004bde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2240      	movs	r2, #64	@ 0x40
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2241      	movs	r2, #65	@ 0x41
 8004b84:	2124      	movs	r1, #36	@ 0x24
 8004b86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2101      	movs	r1, #1
 8004b94:	438a      	bics	r2, r1
 8004b96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4911      	ldr	r1, [pc, #68]	@ (8004be8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004ba4:	400a      	ands	r2, r1
 8004ba6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6819      	ldr	r1, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2241      	movs	r2, #65	@ 0x41
 8004bcc:	2120      	movs	r1, #32
 8004bce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2240      	movs	r2, #64	@ 0x40
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	e000      	b.n	8004bde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004bdc:	2302      	movs	r3, #2
  }
}
 8004bde:	0018      	movs	r0, r3
 8004be0:	46bd      	mov	sp, r7
 8004be2:	b002      	add	sp, #8
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	46c0      	nop			@ (mov r8, r8)
 8004be8:	ffffefff 	.word	0xffffefff

08004bec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2241      	movs	r2, #65	@ 0x41
 8004bfa:	5c9b      	ldrb	r3, [r3, r2]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d139      	bne.n	8004c76 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2240      	movs	r2, #64	@ 0x40
 8004c06:	5c9b      	ldrb	r3, [r3, r2]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e033      	b.n	8004c78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2240      	movs	r2, #64	@ 0x40
 8004c14:	2101      	movs	r1, #1
 8004c16:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2241      	movs	r2, #65	@ 0x41
 8004c1c:	2124      	movs	r1, #36	@ 0x24
 8004c1e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	438a      	bics	r2, r1
 8004c2e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4a11      	ldr	r2, [pc, #68]	@ (8004c80 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2241      	movs	r2, #65	@ 0x41
 8004c66:	2120      	movs	r1, #32
 8004c68:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2240      	movs	r2, #64	@ 0x40
 8004c6e:	2100      	movs	r1, #0
 8004c70:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e000      	b.n	8004c78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c76:	2302      	movs	r3, #2
  }
}
 8004c78:	0018      	movs	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	b004      	add	sp, #16
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	fffff0ff 	.word	0xfffff0ff

08004c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e301      	b.n	800529a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d100      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x1e>
 8004ca0:	e08d      	b.n	8004dbe <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004ca2:	4bc3      	ldr	r3, [pc, #780]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	220c      	movs	r2, #12
 8004ca8:	4013      	ands	r3, r2
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d00e      	beq.n	8004ccc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004cae:	4bc0      	ldr	r3, [pc, #768]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	220c      	movs	r2, #12
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d116      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x64>
 8004cba:	4bbd      	ldr	r3, [pc, #756]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	2380      	movs	r3, #128	@ 0x80
 8004cc0:	025b      	lsls	r3, r3, #9
 8004cc2:	401a      	ands	r2, r3
 8004cc4:	2380      	movs	r3, #128	@ 0x80
 8004cc6:	025b      	lsls	r3, r3, #9
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d10d      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ccc:	4bb8      	ldr	r3, [pc, #736]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	2380      	movs	r3, #128	@ 0x80
 8004cd2:	029b      	lsls	r3, r3, #10
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d100      	bne.n	8004cda <HAL_RCC_OscConfig+0x56>
 8004cd8:	e070      	b.n	8004dbc <HAL_RCC_OscConfig+0x138>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d000      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x60>
 8004ce2:	e06b      	b.n	8004dbc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e2d8      	b.n	800529a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d107      	bne.n	8004d00 <HAL_RCC_OscConfig+0x7c>
 8004cf0:	4baf      	ldr	r3, [pc, #700]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4bae      	ldr	r3, [pc, #696]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004cf6:	2180      	movs	r1, #128	@ 0x80
 8004cf8:	0249      	lsls	r1, r1, #9
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	e02f      	b.n	8004d60 <HAL_RCC_OscConfig+0xdc>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10c      	bne.n	8004d22 <HAL_RCC_OscConfig+0x9e>
 8004d08:	4ba9      	ldr	r3, [pc, #676]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	4ba8      	ldr	r3, [pc, #672]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004d0e:	49a9      	ldr	r1, [pc, #676]	@ (8004fb4 <HAL_RCC_OscConfig+0x330>)
 8004d10:	400a      	ands	r2, r1
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	4ba6      	ldr	r3, [pc, #664]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	4ba5      	ldr	r3, [pc, #660]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004d1a:	49a7      	ldr	r1, [pc, #668]	@ (8004fb8 <HAL_RCC_OscConfig+0x334>)
 8004d1c:	400a      	ands	r2, r1
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	e01e      	b.n	8004d60 <HAL_RCC_OscConfig+0xdc>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b05      	cmp	r3, #5
 8004d28:	d10e      	bne.n	8004d48 <HAL_RCC_OscConfig+0xc4>
 8004d2a:	4ba1      	ldr	r3, [pc, #644]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4ba0      	ldr	r3, [pc, #640]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004d30:	2180      	movs	r1, #128	@ 0x80
 8004d32:	02c9      	lsls	r1, r1, #11
 8004d34:	430a      	orrs	r2, r1
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	4b9d      	ldr	r3, [pc, #628]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	4b9c      	ldr	r3, [pc, #624]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004d3e:	2180      	movs	r1, #128	@ 0x80
 8004d40:	0249      	lsls	r1, r1, #9
 8004d42:	430a      	orrs	r2, r1
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	e00b      	b.n	8004d60 <HAL_RCC_OscConfig+0xdc>
 8004d48:	4b99      	ldr	r3, [pc, #612]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	4b98      	ldr	r3, [pc, #608]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004d4e:	4999      	ldr	r1, [pc, #612]	@ (8004fb4 <HAL_RCC_OscConfig+0x330>)
 8004d50:	400a      	ands	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	4b96      	ldr	r3, [pc, #600]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b95      	ldr	r3, [pc, #596]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004d5a:	4997      	ldr	r1, [pc, #604]	@ (8004fb8 <HAL_RCC_OscConfig+0x334>)
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d014      	beq.n	8004d92 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d68:	f7fd ff62 	bl	8002c30 <HAL_GetTick>
 8004d6c:	0003      	movs	r3, r0
 8004d6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d72:	f7fd ff5d 	bl	8002c30 <HAL_GetTick>
 8004d76:	0002      	movs	r2, r0
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b64      	cmp	r3, #100	@ 0x64
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e28a      	b.n	800529a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d84:	4b8a      	ldr	r3, [pc, #552]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	2380      	movs	r3, #128	@ 0x80
 8004d8a:	029b      	lsls	r3, r3, #10
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d0f0      	beq.n	8004d72 <HAL_RCC_OscConfig+0xee>
 8004d90:	e015      	b.n	8004dbe <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d92:	f7fd ff4d 	bl	8002c30 <HAL_GetTick>
 8004d96:	0003      	movs	r3, r0
 8004d98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d9c:	f7fd ff48 	bl	8002c30 <HAL_GetTick>
 8004da0:	0002      	movs	r2, r0
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	@ 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e275      	b.n	800529a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dae:	4b80      	ldr	r3, [pc, #512]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	2380      	movs	r3, #128	@ 0x80
 8004db4:	029b      	lsls	r3, r3, #10
 8004db6:	4013      	ands	r3, r2
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0x118>
 8004dba:	e000      	b.n	8004dbe <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dbc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d100      	bne.n	8004dca <HAL_RCC_OscConfig+0x146>
 8004dc8:	e069      	b.n	8004e9e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004dca:	4b79      	ldr	r3, [pc, #484]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	220c      	movs	r2, #12
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d00b      	beq.n	8004dec <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004dd4:	4b76      	ldr	r3, [pc, #472]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	220c      	movs	r2, #12
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d11c      	bne.n	8004e1a <HAL_RCC_OscConfig+0x196>
 8004de0:	4b73      	ldr	r3, [pc, #460]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	2380      	movs	r3, #128	@ 0x80
 8004de6:	025b      	lsls	r3, r3, #9
 8004de8:	4013      	ands	r3, r2
 8004dea:	d116      	bne.n	8004e1a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dec:	4b70      	ldr	r3, [pc, #448]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2202      	movs	r2, #2
 8004df2:	4013      	ands	r3, r2
 8004df4:	d005      	beq.n	8004e02 <HAL_RCC_OscConfig+0x17e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d001      	beq.n	8004e02 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e24b      	b.n	800529a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e02:	4b6b      	ldr	r3, [pc, #428]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	22f8      	movs	r2, #248	@ 0xf8
 8004e08:	4393      	bics	r3, r2
 8004e0a:	0019      	movs	r1, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	00da      	lsls	r2, r3, #3
 8004e12:	4b67      	ldr	r3, [pc, #412]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004e14:	430a      	orrs	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e18:	e041      	b.n	8004e9e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d024      	beq.n	8004e6c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e22:	4b63      	ldr	r3, [pc, #396]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4b62      	ldr	r3, [pc, #392]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004e28:	2101      	movs	r1, #1
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2e:	f7fd feff 	bl	8002c30 <HAL_GetTick>
 8004e32:	0003      	movs	r3, r0
 8004e34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e38:	f7fd fefa 	bl	8002c30 <HAL_GetTick>
 8004e3c:	0002      	movs	r2, r0
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e227      	b.n	800529a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4a:	4b59      	ldr	r3, [pc, #356]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	4013      	ands	r3, r2
 8004e52:	d0f1      	beq.n	8004e38 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e54:	4b56      	ldr	r3, [pc, #344]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	22f8      	movs	r2, #248	@ 0xf8
 8004e5a:	4393      	bics	r3, r2
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	00da      	lsls	r2, r3, #3
 8004e64:	4b52      	ldr	r3, [pc, #328]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004e66:	430a      	orrs	r2, r1
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	e018      	b.n	8004e9e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e6c:	4b50      	ldr	r3, [pc, #320]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	4b4f      	ldr	r3, [pc, #316]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004e72:	2101      	movs	r1, #1
 8004e74:	438a      	bics	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e78:	f7fd feda 	bl	8002c30 <HAL_GetTick>
 8004e7c:	0003      	movs	r3, r0
 8004e7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e82:	f7fd fed5 	bl	8002c30 <HAL_GetTick>
 8004e86:	0002      	movs	r2, r0
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e202      	b.n	800529a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e94:	4b46      	ldr	r3, [pc, #280]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d1f1      	bne.n	8004e82 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2208      	movs	r2, #8
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d036      	beq.n	8004f16 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d019      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eb0:	4b3f      	ldr	r3, [pc, #252]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004eb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004eb4:	4b3e      	ldr	r3, [pc, #248]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ebc:	f7fd feb8 	bl	8002c30 <HAL_GetTick>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ec6:	f7fd feb3 	bl	8002c30 <HAL_GetTick>
 8004eca:	0002      	movs	r2, r0
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e1e0      	b.n	800529a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ed8:	4b35      	ldr	r3, [pc, #212]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004edc:	2202      	movs	r2, #2
 8004ede:	4013      	ands	r3, r2
 8004ee0:	d0f1      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x242>
 8004ee2:	e018      	b.n	8004f16 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ee4:	4b32      	ldr	r3, [pc, #200]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004ee6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ee8:	4b31      	ldr	r3, [pc, #196]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004eea:	2101      	movs	r1, #1
 8004eec:	438a      	bics	r2, r1
 8004eee:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef0:	f7fd fe9e 	bl	8002c30 <HAL_GetTick>
 8004ef4:	0003      	movs	r3, r0
 8004ef6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004efa:	f7fd fe99 	bl	8002c30 <HAL_GetTick>
 8004efe:	0002      	movs	r2, r0
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e1c6      	b.n	800529a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f0c:	4b28      	ldr	r3, [pc, #160]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	2202      	movs	r2, #2
 8004f12:	4013      	ands	r3, r2
 8004f14:	d1f1      	bne.n	8004efa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	d100      	bne.n	8004f22 <HAL_RCC_OscConfig+0x29e>
 8004f20:	e0b4      	b.n	800508c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f22:	201f      	movs	r0, #31
 8004f24:	183b      	adds	r3, r7, r0
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f2a:	4b21      	ldr	r3, [pc, #132]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004f2c:	69da      	ldr	r2, [r3, #28]
 8004f2e:	2380      	movs	r3, #128	@ 0x80
 8004f30:	055b      	lsls	r3, r3, #21
 8004f32:	4013      	ands	r3, r2
 8004f34:	d110      	bne.n	8004f58 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f36:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004f38:	69da      	ldr	r2, [r3, #28]
 8004f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004f3c:	2180      	movs	r1, #128	@ 0x80
 8004f3e:	0549      	lsls	r1, r1, #21
 8004f40:	430a      	orrs	r2, r1
 8004f42:	61da      	str	r2, [r3, #28]
 8004f44:	4b1a      	ldr	r3, [pc, #104]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004f46:	69da      	ldr	r2, [r3, #28]
 8004f48:	2380      	movs	r3, #128	@ 0x80
 8004f4a:	055b      	lsls	r3, r3, #21
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f52:	183b      	adds	r3, r7, r0
 8004f54:	2201      	movs	r2, #1
 8004f56:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f58:	4b18      	ldr	r3, [pc, #96]	@ (8004fbc <HAL_RCC_OscConfig+0x338>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	2380      	movs	r3, #128	@ 0x80
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4013      	ands	r3, r2
 8004f62:	d11a      	bne.n	8004f9a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f64:	4b15      	ldr	r3, [pc, #84]	@ (8004fbc <HAL_RCC_OscConfig+0x338>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b14      	ldr	r3, [pc, #80]	@ (8004fbc <HAL_RCC_OscConfig+0x338>)
 8004f6a:	2180      	movs	r1, #128	@ 0x80
 8004f6c:	0049      	lsls	r1, r1, #1
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f72:	f7fd fe5d 	bl	8002c30 <HAL_GetTick>
 8004f76:	0003      	movs	r3, r0
 8004f78:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f7c:	f7fd fe58 	bl	8002c30 <HAL_GetTick>
 8004f80:	0002      	movs	r2, r0
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b64      	cmp	r3, #100	@ 0x64
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e185      	b.n	800529a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004fbc <HAL_RCC_OscConfig+0x338>)
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	2380      	movs	r3, #128	@ 0x80
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	4013      	ands	r3, r2
 8004f98:	d0f0      	beq.n	8004f7c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x33c>
 8004fa2:	4b03      	ldr	r3, [pc, #12]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004fa4:	6a1a      	ldr	r2, [r3, #32]
 8004fa6:	4b02      	ldr	r3, [pc, #8]	@ (8004fb0 <HAL_RCC_OscConfig+0x32c>)
 8004fa8:	2101      	movs	r1, #1
 8004faa:	430a      	orrs	r2, r1
 8004fac:	621a      	str	r2, [r3, #32]
 8004fae:	e035      	b.n	800501c <HAL_RCC_OscConfig+0x398>
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	fffeffff 	.word	0xfffeffff
 8004fb8:	fffbffff 	.word	0xfffbffff
 8004fbc:	40007000 	.word	0x40007000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10c      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x35e>
 8004fc8:	4bb6      	ldr	r3, [pc, #728]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8004fca:	6a1a      	ldr	r2, [r3, #32]
 8004fcc:	4bb5      	ldr	r3, [pc, #724]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8004fce:	2101      	movs	r1, #1
 8004fd0:	438a      	bics	r2, r1
 8004fd2:	621a      	str	r2, [r3, #32]
 8004fd4:	4bb3      	ldr	r3, [pc, #716]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8004fd6:	6a1a      	ldr	r2, [r3, #32]
 8004fd8:	4bb2      	ldr	r3, [pc, #712]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8004fda:	2104      	movs	r1, #4
 8004fdc:	438a      	bics	r2, r1
 8004fde:	621a      	str	r2, [r3, #32]
 8004fe0:	e01c      	b.n	800501c <HAL_RCC_OscConfig+0x398>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2b05      	cmp	r3, #5
 8004fe8:	d10c      	bne.n	8005004 <HAL_RCC_OscConfig+0x380>
 8004fea:	4bae      	ldr	r3, [pc, #696]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8004fec:	6a1a      	ldr	r2, [r3, #32]
 8004fee:	4bad      	ldr	r3, [pc, #692]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8004ff0:	2104      	movs	r1, #4
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	621a      	str	r2, [r3, #32]
 8004ff6:	4bab      	ldr	r3, [pc, #684]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8004ff8:	6a1a      	ldr	r2, [r3, #32]
 8004ffa:	4baa      	ldr	r3, [pc, #680]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	430a      	orrs	r2, r1
 8005000:	621a      	str	r2, [r3, #32]
 8005002:	e00b      	b.n	800501c <HAL_RCC_OscConfig+0x398>
 8005004:	4ba7      	ldr	r3, [pc, #668]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8005006:	6a1a      	ldr	r2, [r3, #32]
 8005008:	4ba6      	ldr	r3, [pc, #664]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 800500a:	2101      	movs	r1, #1
 800500c:	438a      	bics	r2, r1
 800500e:	621a      	str	r2, [r3, #32]
 8005010:	4ba4      	ldr	r3, [pc, #656]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8005012:	6a1a      	ldr	r2, [r3, #32]
 8005014:	4ba3      	ldr	r3, [pc, #652]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8005016:	2104      	movs	r1, #4
 8005018:	438a      	bics	r2, r1
 800501a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d014      	beq.n	800504e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005024:	f7fd fe04 	bl	8002c30 <HAL_GetTick>
 8005028:	0003      	movs	r3, r0
 800502a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502c:	e009      	b.n	8005042 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800502e:	f7fd fdff 	bl	8002c30 <HAL_GetTick>
 8005032:	0002      	movs	r2, r0
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	4a9b      	ldr	r2, [pc, #620]	@ (80052a8 <HAL_RCC_OscConfig+0x624>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e12b      	b.n	800529a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005042:	4b98      	ldr	r3, [pc, #608]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	2202      	movs	r2, #2
 8005048:	4013      	ands	r3, r2
 800504a:	d0f0      	beq.n	800502e <HAL_RCC_OscConfig+0x3aa>
 800504c:	e013      	b.n	8005076 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800504e:	f7fd fdef 	bl	8002c30 <HAL_GetTick>
 8005052:	0003      	movs	r3, r0
 8005054:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005056:	e009      	b.n	800506c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005058:	f7fd fdea 	bl	8002c30 <HAL_GetTick>
 800505c:	0002      	movs	r2, r0
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	4a91      	ldr	r2, [pc, #580]	@ (80052a8 <HAL_RCC_OscConfig+0x624>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e116      	b.n	800529a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800506c:	4b8d      	ldr	r3, [pc, #564]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	2202      	movs	r2, #2
 8005072:	4013      	ands	r3, r2
 8005074:	d1f0      	bne.n	8005058 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005076:	231f      	movs	r3, #31
 8005078:	18fb      	adds	r3, r7, r3
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d105      	bne.n	800508c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005080:	4b88      	ldr	r3, [pc, #544]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8005082:	69da      	ldr	r2, [r3, #28]
 8005084:	4b87      	ldr	r3, [pc, #540]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8005086:	4989      	ldr	r1, [pc, #548]	@ (80052ac <HAL_RCC_OscConfig+0x628>)
 8005088:	400a      	ands	r2, r1
 800508a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2210      	movs	r2, #16
 8005092:	4013      	ands	r3, r2
 8005094:	d063      	beq.n	800515e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d12a      	bne.n	80050f4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800509e:	4b81      	ldr	r3, [pc, #516]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 80050a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050a2:	4b80      	ldr	r3, [pc, #512]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 80050a4:	2104      	movs	r1, #4
 80050a6:	430a      	orrs	r2, r1
 80050a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80050aa:	4b7e      	ldr	r3, [pc, #504]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 80050ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050ae:	4b7d      	ldr	r3, [pc, #500]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 80050b0:	2101      	movs	r1, #1
 80050b2:	430a      	orrs	r2, r1
 80050b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b6:	f7fd fdbb 	bl	8002c30 <HAL_GetTick>
 80050ba:	0003      	movs	r3, r0
 80050bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80050c0:	f7fd fdb6 	bl	8002c30 <HAL_GetTick>
 80050c4:	0002      	movs	r2, r0
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e0e3      	b.n	800529a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80050d2:	4b74      	ldr	r3, [pc, #464]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 80050d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d6:	2202      	movs	r2, #2
 80050d8:	4013      	ands	r3, r2
 80050da:	d0f1      	beq.n	80050c0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80050dc:	4b71      	ldr	r3, [pc, #452]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 80050de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e0:	22f8      	movs	r2, #248	@ 0xf8
 80050e2:	4393      	bics	r3, r2
 80050e4:	0019      	movs	r1, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	00da      	lsls	r2, r3, #3
 80050ec:	4b6d      	ldr	r3, [pc, #436]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 80050ee:	430a      	orrs	r2, r1
 80050f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80050f2:	e034      	b.n	800515e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	3305      	adds	r3, #5
 80050fa:	d111      	bne.n	8005120 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80050fc:	4b69      	ldr	r3, [pc, #420]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 80050fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005100:	4b68      	ldr	r3, [pc, #416]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8005102:	2104      	movs	r1, #4
 8005104:	438a      	bics	r2, r1
 8005106:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005108:	4b66      	ldr	r3, [pc, #408]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 800510a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800510c:	22f8      	movs	r2, #248	@ 0xf8
 800510e:	4393      	bics	r3, r2
 8005110:	0019      	movs	r1, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	00da      	lsls	r2, r3, #3
 8005118:	4b62      	ldr	r3, [pc, #392]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 800511a:	430a      	orrs	r2, r1
 800511c:	635a      	str	r2, [r3, #52]	@ 0x34
 800511e:	e01e      	b.n	800515e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005120:	4b60      	ldr	r3, [pc, #384]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8005122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005124:	4b5f      	ldr	r3, [pc, #380]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8005126:	2104      	movs	r1, #4
 8005128:	430a      	orrs	r2, r1
 800512a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800512c:	4b5d      	ldr	r3, [pc, #372]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 800512e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005130:	4b5c      	ldr	r3, [pc, #368]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8005132:	2101      	movs	r1, #1
 8005134:	438a      	bics	r2, r1
 8005136:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005138:	f7fd fd7a 	bl	8002c30 <HAL_GetTick>
 800513c:	0003      	movs	r3, r0
 800513e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005142:	f7fd fd75 	bl	8002c30 <HAL_GetTick>
 8005146:	0002      	movs	r2, r0
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e0a2      	b.n	800529a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005154:	4b53      	ldr	r3, [pc, #332]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8005156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005158:	2202      	movs	r2, #2
 800515a:	4013      	ands	r3, r2
 800515c:	d1f1      	bne.n	8005142 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d100      	bne.n	8005168 <HAL_RCC_OscConfig+0x4e4>
 8005166:	e097      	b.n	8005298 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005168:	4b4e      	ldr	r3, [pc, #312]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	220c      	movs	r2, #12
 800516e:	4013      	ands	r3, r2
 8005170:	2b08      	cmp	r3, #8
 8005172:	d100      	bne.n	8005176 <HAL_RCC_OscConfig+0x4f2>
 8005174:	e06b      	b.n	800524e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d14c      	bne.n	8005218 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517e:	4b49      	ldr	r3, [pc, #292]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b48      	ldr	r3, [pc, #288]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8005184:	494a      	ldr	r1, [pc, #296]	@ (80052b0 <HAL_RCC_OscConfig+0x62c>)
 8005186:	400a      	ands	r2, r1
 8005188:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518a:	f7fd fd51 	bl	8002c30 <HAL_GetTick>
 800518e:	0003      	movs	r3, r0
 8005190:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005194:	f7fd fd4c 	bl	8002c30 <HAL_GetTick>
 8005198:	0002      	movs	r2, r0
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e079      	b.n	800529a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051a6:	4b3f      	ldr	r3, [pc, #252]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	2380      	movs	r3, #128	@ 0x80
 80051ac:	049b      	lsls	r3, r3, #18
 80051ae:	4013      	ands	r3, r2
 80051b0:	d1f0      	bne.n	8005194 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051b2:	4b3c      	ldr	r3, [pc, #240]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 80051b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b6:	220f      	movs	r2, #15
 80051b8:	4393      	bics	r3, r2
 80051ba:	0019      	movs	r1, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051c0:	4b38      	ldr	r3, [pc, #224]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 80051c2:	430a      	orrs	r2, r1
 80051c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051c6:	4b37      	ldr	r3, [pc, #220]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	4a3a      	ldr	r2, [pc, #232]	@ (80052b4 <HAL_RCC_OscConfig+0x630>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	0019      	movs	r1, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	431a      	orrs	r2, r3
 80051da:	4b32      	ldr	r3, [pc, #200]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 80051dc:	430a      	orrs	r2, r1
 80051de:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051e0:	4b30      	ldr	r3, [pc, #192]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	4b2f      	ldr	r3, [pc, #188]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 80051e6:	2180      	movs	r1, #128	@ 0x80
 80051e8:	0449      	lsls	r1, r1, #17
 80051ea:	430a      	orrs	r2, r1
 80051ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ee:	f7fd fd1f 	bl	8002c30 <HAL_GetTick>
 80051f2:	0003      	movs	r3, r0
 80051f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f8:	f7fd fd1a 	bl	8002c30 <HAL_GetTick>
 80051fc:	0002      	movs	r2, r0
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e047      	b.n	800529a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800520a:	4b26      	ldr	r3, [pc, #152]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	2380      	movs	r3, #128	@ 0x80
 8005210:	049b      	lsls	r3, r3, #18
 8005212:	4013      	ands	r3, r2
 8005214:	d0f0      	beq.n	80051f8 <HAL_RCC_OscConfig+0x574>
 8005216:	e03f      	b.n	8005298 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005218:	4b22      	ldr	r3, [pc, #136]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	4b21      	ldr	r3, [pc, #132]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 800521e:	4924      	ldr	r1, [pc, #144]	@ (80052b0 <HAL_RCC_OscConfig+0x62c>)
 8005220:	400a      	ands	r2, r1
 8005222:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005224:	f7fd fd04 	bl	8002c30 <HAL_GetTick>
 8005228:	0003      	movs	r3, r0
 800522a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522e:	f7fd fcff 	bl	8002c30 <HAL_GetTick>
 8005232:	0002      	movs	r2, r0
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e02c      	b.n	800529a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005240:	4b18      	ldr	r3, [pc, #96]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	2380      	movs	r3, #128	@ 0x80
 8005246:	049b      	lsls	r3, r3, #18
 8005248:	4013      	ands	r3, r2
 800524a:	d1f0      	bne.n	800522e <HAL_RCC_OscConfig+0x5aa>
 800524c:	e024      	b.n	8005298 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e01f      	b.n	800529a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800525a:	4b12      	ldr	r3, [pc, #72]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005260:	4b10      	ldr	r3, [pc, #64]	@ (80052a4 <HAL_RCC_OscConfig+0x620>)
 8005262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005264:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	2380      	movs	r3, #128	@ 0x80
 800526a:	025b      	lsls	r3, r3, #9
 800526c:	401a      	ands	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	429a      	cmp	r2, r3
 8005274:	d10e      	bne.n	8005294 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	220f      	movs	r2, #15
 800527a:	401a      	ands	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005280:	429a      	cmp	r2, r3
 8005282:	d107      	bne.n	8005294 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	23f0      	movs	r3, #240	@ 0xf0
 8005288:	039b      	lsls	r3, r3, #14
 800528a:	401a      	ands	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005290:	429a      	cmp	r2, r3
 8005292:	d001      	beq.n	8005298 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	0018      	movs	r0, r3
 800529c:	46bd      	mov	sp, r7
 800529e:	b008      	add	sp, #32
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	46c0      	nop			@ (mov r8, r8)
 80052a4:	40021000 	.word	0x40021000
 80052a8:	00001388 	.word	0x00001388
 80052ac:	efffffff 	.word	0xefffffff
 80052b0:	feffffff 	.word	0xfeffffff
 80052b4:	ffc2ffff 	.word	0xffc2ffff

080052b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0b3      	b.n	8005434 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052cc:	4b5b      	ldr	r3, [pc, #364]	@ (800543c <HAL_RCC_ClockConfig+0x184>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2201      	movs	r2, #1
 80052d2:	4013      	ands	r3, r2
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d911      	bls.n	80052fe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052da:	4b58      	ldr	r3, [pc, #352]	@ (800543c <HAL_RCC_ClockConfig+0x184>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2201      	movs	r2, #1
 80052e0:	4393      	bics	r3, r2
 80052e2:	0019      	movs	r1, r3
 80052e4:	4b55      	ldr	r3, [pc, #340]	@ (800543c <HAL_RCC_ClockConfig+0x184>)
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ec:	4b53      	ldr	r3, [pc, #332]	@ (800543c <HAL_RCC_ClockConfig+0x184>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2201      	movs	r2, #1
 80052f2:	4013      	ands	r3, r2
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d001      	beq.n	80052fe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e09a      	b.n	8005434 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2202      	movs	r2, #2
 8005304:	4013      	ands	r3, r2
 8005306:	d015      	beq.n	8005334 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2204      	movs	r2, #4
 800530e:	4013      	ands	r3, r2
 8005310:	d006      	beq.n	8005320 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005312:	4b4b      	ldr	r3, [pc, #300]	@ (8005440 <HAL_RCC_ClockConfig+0x188>)
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	4b4a      	ldr	r3, [pc, #296]	@ (8005440 <HAL_RCC_ClockConfig+0x188>)
 8005318:	21e0      	movs	r1, #224	@ 0xe0
 800531a:	00c9      	lsls	r1, r1, #3
 800531c:	430a      	orrs	r2, r1
 800531e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005320:	4b47      	ldr	r3, [pc, #284]	@ (8005440 <HAL_RCC_ClockConfig+0x188>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	22f0      	movs	r2, #240	@ 0xf0
 8005326:	4393      	bics	r3, r2
 8005328:	0019      	movs	r1, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	4b44      	ldr	r3, [pc, #272]	@ (8005440 <HAL_RCC_ClockConfig+0x188>)
 8005330:	430a      	orrs	r2, r1
 8005332:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2201      	movs	r2, #1
 800533a:	4013      	ands	r3, r2
 800533c:	d040      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d107      	bne.n	8005356 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005346:	4b3e      	ldr	r3, [pc, #248]	@ (8005440 <HAL_RCC_ClockConfig+0x188>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	2380      	movs	r3, #128	@ 0x80
 800534c:	029b      	lsls	r3, r3, #10
 800534e:	4013      	ands	r3, r2
 8005350:	d114      	bne.n	800537c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e06e      	b.n	8005434 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d107      	bne.n	800536e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535e:	4b38      	ldr	r3, [pc, #224]	@ (8005440 <HAL_RCC_ClockConfig+0x188>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	2380      	movs	r3, #128	@ 0x80
 8005364:	049b      	lsls	r3, r3, #18
 8005366:	4013      	ands	r3, r2
 8005368:	d108      	bne.n	800537c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e062      	b.n	8005434 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800536e:	4b34      	ldr	r3, [pc, #208]	@ (8005440 <HAL_RCC_ClockConfig+0x188>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2202      	movs	r2, #2
 8005374:	4013      	ands	r3, r2
 8005376:	d101      	bne.n	800537c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e05b      	b.n	8005434 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800537c:	4b30      	ldr	r3, [pc, #192]	@ (8005440 <HAL_RCC_ClockConfig+0x188>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2203      	movs	r2, #3
 8005382:	4393      	bics	r3, r2
 8005384:	0019      	movs	r1, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	4b2d      	ldr	r3, [pc, #180]	@ (8005440 <HAL_RCC_ClockConfig+0x188>)
 800538c:	430a      	orrs	r2, r1
 800538e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005390:	f7fd fc4e 	bl	8002c30 <HAL_GetTick>
 8005394:	0003      	movs	r3, r0
 8005396:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005398:	e009      	b.n	80053ae <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800539a:	f7fd fc49 	bl	8002c30 <HAL_GetTick>
 800539e:	0002      	movs	r2, r0
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	4a27      	ldr	r2, [pc, #156]	@ (8005444 <HAL_RCC_ClockConfig+0x18c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e042      	b.n	8005434 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ae:	4b24      	ldr	r3, [pc, #144]	@ (8005440 <HAL_RCC_ClockConfig+0x188>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	220c      	movs	r2, #12
 80053b4:	401a      	ands	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	429a      	cmp	r2, r3
 80053be:	d1ec      	bne.n	800539a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053c0:	4b1e      	ldr	r3, [pc, #120]	@ (800543c <HAL_RCC_ClockConfig+0x184>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2201      	movs	r2, #1
 80053c6:	4013      	ands	r3, r2
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d211      	bcs.n	80053f2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ce:	4b1b      	ldr	r3, [pc, #108]	@ (800543c <HAL_RCC_ClockConfig+0x184>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2201      	movs	r2, #1
 80053d4:	4393      	bics	r3, r2
 80053d6:	0019      	movs	r1, r3
 80053d8:	4b18      	ldr	r3, [pc, #96]	@ (800543c <HAL_RCC_ClockConfig+0x184>)
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e0:	4b16      	ldr	r3, [pc, #88]	@ (800543c <HAL_RCC_ClockConfig+0x184>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2201      	movs	r2, #1
 80053e6:	4013      	ands	r3, r2
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d001      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e020      	b.n	8005434 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2204      	movs	r2, #4
 80053f8:	4013      	ands	r3, r2
 80053fa:	d009      	beq.n	8005410 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80053fc:	4b10      	ldr	r3, [pc, #64]	@ (8005440 <HAL_RCC_ClockConfig+0x188>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	4a11      	ldr	r2, [pc, #68]	@ (8005448 <HAL_RCC_ClockConfig+0x190>)
 8005402:	4013      	ands	r3, r2
 8005404:	0019      	movs	r1, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	4b0d      	ldr	r3, [pc, #52]	@ (8005440 <HAL_RCC_ClockConfig+0x188>)
 800540c:	430a      	orrs	r2, r1
 800540e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005410:	f000 f820 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 8005414:	0001      	movs	r1, r0
 8005416:	4b0a      	ldr	r3, [pc, #40]	@ (8005440 <HAL_RCC_ClockConfig+0x188>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	091b      	lsrs	r3, r3, #4
 800541c:	220f      	movs	r2, #15
 800541e:	4013      	ands	r3, r2
 8005420:	4a0a      	ldr	r2, [pc, #40]	@ (800544c <HAL_RCC_ClockConfig+0x194>)
 8005422:	5cd3      	ldrb	r3, [r2, r3]
 8005424:	000a      	movs	r2, r1
 8005426:	40da      	lsrs	r2, r3
 8005428:	4b09      	ldr	r3, [pc, #36]	@ (8005450 <HAL_RCC_ClockConfig+0x198>)
 800542a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800542c:	2003      	movs	r0, #3
 800542e:	f7fd fbb9 	bl	8002ba4 <HAL_InitTick>
  
  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	0018      	movs	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	b004      	add	sp, #16
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40022000 	.word	0x40022000
 8005440:	40021000 	.word	0x40021000
 8005444:	00001388 	.word	0x00001388
 8005448:	fffff8ff 	.word	0xfffff8ff
 800544c:	08007570 	.word	0x08007570
 8005450:	20000004 	.word	0x20000004

08005454 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
 800545e:	2300      	movs	r3, #0
 8005460:	60bb      	str	r3, [r7, #8]
 8005462:	2300      	movs	r3, #0
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	2300      	movs	r3, #0
 8005468:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800546e:	4b20      	ldr	r3, [pc, #128]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	220c      	movs	r2, #12
 8005478:	4013      	ands	r3, r2
 800547a:	2b04      	cmp	r3, #4
 800547c:	d002      	beq.n	8005484 <HAL_RCC_GetSysClockFreq+0x30>
 800547e:	2b08      	cmp	r3, #8
 8005480:	d003      	beq.n	800548a <HAL_RCC_GetSysClockFreq+0x36>
 8005482:	e02c      	b.n	80054de <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005484:	4b1b      	ldr	r3, [pc, #108]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005486:	613b      	str	r3, [r7, #16]
      break;
 8005488:	e02c      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	0c9b      	lsrs	r3, r3, #18
 800548e:	220f      	movs	r2, #15
 8005490:	4013      	ands	r3, r2
 8005492:	4a19      	ldr	r2, [pc, #100]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005494:	5cd3      	ldrb	r3, [r2, r3]
 8005496:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005498:	4b15      	ldr	r3, [pc, #84]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800549a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549c:	220f      	movs	r2, #15
 800549e:	4013      	ands	r3, r2
 80054a0:	4a16      	ldr	r2, [pc, #88]	@ (80054fc <HAL_RCC_GetSysClockFreq+0xa8>)
 80054a2:	5cd3      	ldrb	r3, [r2, r3]
 80054a4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	2380      	movs	r3, #128	@ 0x80
 80054aa:	025b      	lsls	r3, r3, #9
 80054ac:	4013      	ands	r3, r2
 80054ae:	d009      	beq.n	80054c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054b0:	68b9      	ldr	r1, [r7, #8]
 80054b2:	4810      	ldr	r0, [pc, #64]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80054b4:	f7fa fe32 	bl	800011c <__udivsi3>
 80054b8:	0003      	movs	r3, r0
 80054ba:	001a      	movs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4353      	muls	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	e009      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	000a      	movs	r2, r1
 80054c8:	0152      	lsls	r2, r2, #5
 80054ca:	1a52      	subs	r2, r2, r1
 80054cc:	0193      	lsls	r3, r2, #6
 80054ce:	1a9b      	subs	r3, r3, r2
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	185b      	adds	r3, r3, r1
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	613b      	str	r3, [r7, #16]
      break;
 80054dc:	e002      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054de:	4b05      	ldr	r3, [pc, #20]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80054e0:	613b      	str	r3, [r7, #16]
      break;
 80054e2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80054e4:	693b      	ldr	r3, [r7, #16]
}
 80054e6:	0018      	movs	r0, r3
 80054e8:	46bd      	mov	sp, r7
 80054ea:	b006      	add	sp, #24
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	40021000 	.word	0x40021000
 80054f4:	007a1200 	.word	0x007a1200
 80054f8:	08007588 	.word	0x08007588
 80054fc:	08007598 	.word	0x08007598

08005500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005504:	4b02      	ldr	r3, [pc, #8]	@ (8005510 <HAL_RCC_GetHCLKFreq+0x10>)
 8005506:	681b      	ldr	r3, [r3, #0]
}
 8005508:	0018      	movs	r0, r3
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	46c0      	nop			@ (mov r8, r8)
 8005510:	20000004 	.word	0x20000004

08005514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005518:	f7ff fff2 	bl	8005500 <HAL_RCC_GetHCLKFreq>
 800551c:	0001      	movs	r1, r0
 800551e:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	0a1b      	lsrs	r3, r3, #8
 8005524:	2207      	movs	r2, #7
 8005526:	4013      	ands	r3, r2
 8005528:	4a04      	ldr	r2, [pc, #16]	@ (800553c <HAL_RCC_GetPCLK1Freq+0x28>)
 800552a:	5cd3      	ldrb	r3, [r2, r3]
 800552c:	40d9      	lsrs	r1, r3
 800552e:	000b      	movs	r3, r1
}    
 8005530:	0018      	movs	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	46c0      	nop			@ (mov r8, r8)
 8005538:	40021000 	.word	0x40021000
 800553c:	08007580 	.word	0x08007580

08005540 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	2380      	movs	r3, #128	@ 0x80
 8005556:	025b      	lsls	r3, r3, #9
 8005558:	4013      	ands	r3, r2
 800555a:	d100      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800555c:	e08e      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800555e:	2017      	movs	r0, #23
 8005560:	183b      	adds	r3, r7, r0
 8005562:	2200      	movs	r2, #0
 8005564:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005566:	4b57      	ldr	r3, [pc, #348]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005568:	69da      	ldr	r2, [r3, #28]
 800556a:	2380      	movs	r3, #128	@ 0x80
 800556c:	055b      	lsls	r3, r3, #21
 800556e:	4013      	ands	r3, r2
 8005570:	d110      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005572:	4b54      	ldr	r3, [pc, #336]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005574:	69da      	ldr	r2, [r3, #28]
 8005576:	4b53      	ldr	r3, [pc, #332]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005578:	2180      	movs	r1, #128	@ 0x80
 800557a:	0549      	lsls	r1, r1, #21
 800557c:	430a      	orrs	r2, r1
 800557e:	61da      	str	r2, [r3, #28]
 8005580:	4b50      	ldr	r3, [pc, #320]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	2380      	movs	r3, #128	@ 0x80
 8005586:	055b      	lsls	r3, r3, #21
 8005588:	4013      	ands	r3, r2
 800558a:	60bb      	str	r3, [r7, #8]
 800558c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800558e:	183b      	adds	r3, r7, r0
 8005590:	2201      	movs	r2, #1
 8005592:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005594:	4b4c      	ldr	r3, [pc, #304]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	2380      	movs	r3, #128	@ 0x80
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	4013      	ands	r3, r2
 800559e:	d11a      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055a0:	4b49      	ldr	r3, [pc, #292]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	4b48      	ldr	r3, [pc, #288]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80055a6:	2180      	movs	r1, #128	@ 0x80
 80055a8:	0049      	lsls	r1, r1, #1
 80055aa:	430a      	orrs	r2, r1
 80055ac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ae:	f7fd fb3f 	bl	8002c30 <HAL_GetTick>
 80055b2:	0003      	movs	r3, r0
 80055b4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b6:	e008      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055b8:	f7fd fb3a 	bl	8002c30 <HAL_GetTick>
 80055bc:	0002      	movs	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b64      	cmp	r3, #100	@ 0x64
 80055c4:	d901      	bls.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e077      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ca:	4b3f      	ldr	r3, [pc, #252]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	2380      	movs	r3, #128	@ 0x80
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	4013      	ands	r3, r2
 80055d4:	d0f0      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055d6:	4b3b      	ldr	r3, [pc, #236]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80055d8:	6a1a      	ldr	r2, [r3, #32]
 80055da:	23c0      	movs	r3, #192	@ 0xc0
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4013      	ands	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d034      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	23c0      	movs	r3, #192	@ 0xc0
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4013      	ands	r3, r2
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d02c      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055f8:	4b32      	ldr	r3, [pc, #200]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	4a33      	ldr	r2, [pc, #204]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80055fe:	4013      	ands	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005602:	4b30      	ldr	r3, [pc, #192]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005604:	6a1a      	ldr	r2, [r3, #32]
 8005606:	4b2f      	ldr	r3, [pc, #188]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005608:	2180      	movs	r1, #128	@ 0x80
 800560a:	0249      	lsls	r1, r1, #9
 800560c:	430a      	orrs	r2, r1
 800560e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005610:	4b2c      	ldr	r3, [pc, #176]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005612:	6a1a      	ldr	r2, [r3, #32]
 8005614:	4b2b      	ldr	r3, [pc, #172]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005616:	492e      	ldr	r1, [pc, #184]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005618:	400a      	ands	r2, r1
 800561a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800561c:	4b29      	ldr	r3, [pc, #164]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	4013      	ands	r3, r2
 8005628:	d013      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562a:	f7fd fb01 	bl	8002c30 <HAL_GetTick>
 800562e:	0003      	movs	r3, r0
 8005630:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005632:	e009      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005634:	f7fd fafc 	bl	8002c30 <HAL_GetTick>
 8005638:	0002      	movs	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	4a25      	ldr	r2, [pc, #148]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d901      	bls.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e038      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005648:	4b1e      	ldr	r3, [pc, #120]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	2202      	movs	r2, #2
 800564e:	4013      	ands	r3, r2
 8005650:	d0f0      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005652:	4b1c      	ldr	r3, [pc, #112]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	4a1d      	ldr	r2, [pc, #116]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005658:	4013      	ands	r3, r2
 800565a:	0019      	movs	r1, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	4b18      	ldr	r3, [pc, #96]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005662:	430a      	orrs	r2, r1
 8005664:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005666:	2317      	movs	r3, #23
 8005668:	18fb      	adds	r3, r7, r3
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d105      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005670:	4b14      	ldr	r3, [pc, #80]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	4b13      	ldr	r3, [pc, #76]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005676:	4918      	ldr	r1, [pc, #96]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005678:	400a      	ands	r2, r1
 800567a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2201      	movs	r2, #1
 8005682:	4013      	ands	r3, r2
 8005684:	d009      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005686:	4b0f      	ldr	r3, [pc, #60]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568a:	2203      	movs	r2, #3
 800568c:	4393      	bics	r3, r2
 800568e:	0019      	movs	r1, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005696:	430a      	orrs	r2, r1
 8005698:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2220      	movs	r2, #32
 80056a0:	4013      	ands	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056a4:	4b07      	ldr	r3, [pc, #28]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80056a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a8:	2210      	movs	r2, #16
 80056aa:	4393      	bics	r3, r2
 80056ac:	0019      	movs	r1, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	4b04      	ldr	r3, [pc, #16]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80056b4:	430a      	orrs	r2, r1
 80056b6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	0018      	movs	r0, r3
 80056bc:	46bd      	mov	sp, r7
 80056be:	b006      	add	sp, #24
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	46c0      	nop			@ (mov r8, r8)
 80056c4:	40021000 	.word	0x40021000
 80056c8:	40007000 	.word	0x40007000
 80056cc:	fffffcff 	.word	0xfffffcff
 80056d0:	fffeffff 	.word	0xfffeffff
 80056d4:	00001388 	.word	0x00001388
 80056d8:	efffffff 	.word	0xefffffff

080056dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e044      	b.n	8005778 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d107      	bne.n	8005706 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2278      	movs	r2, #120	@ 0x78
 80056fa:	2100      	movs	r1, #0
 80056fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	0018      	movs	r0, r3
 8005702:	f7fd f907 	bl	8002914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2224      	movs	r2, #36	@ 0x24
 800570a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2101      	movs	r1, #1
 8005718:	438a      	bics	r2, r1
 800571a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	0018      	movs	r0, r3
 8005728:	f000 fd46 	bl	80061b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	0018      	movs	r0, r3
 8005730:	f000 fc02 	bl	8005f38 <UART_SetConfig>
 8005734:	0003      	movs	r3, r0
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e01c      	b.n	8005778 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	490d      	ldr	r1, [pc, #52]	@ (8005780 <HAL_UART_Init+0xa4>)
 800574a:	400a      	ands	r2, r1
 800574c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2108      	movs	r1, #8
 800575a:	438a      	bics	r2, r1
 800575c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2101      	movs	r1, #1
 800576a:	430a      	orrs	r2, r1
 800576c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	0018      	movs	r0, r3
 8005772:	f000 fdd5 	bl	8006320 <UART_CheckIdleState>
 8005776:	0003      	movs	r3, r0
}
 8005778:	0018      	movs	r0, r3
 800577a:	46bd      	mov	sp, r7
 800577c:	b002      	add	sp, #8
 800577e:	bd80      	pop	{r7, pc}
 8005780:	fffff7ff 	.word	0xfffff7ff

08005784 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	@ 0x28
 8005788:	af02      	add	r7, sp, #8
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	1dbb      	adds	r3, r7, #6
 8005792:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005798:	2b20      	cmp	r3, #32
 800579a:	d000      	beq.n	800579e <HAL_UART_Transmit+0x1a>
 800579c:	e08c      	b.n	80058b8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <HAL_UART_Transmit+0x28>
 80057a4:	1dbb      	adds	r3, r7, #6
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e084      	b.n	80058ba <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	2380      	movs	r3, #128	@ 0x80
 80057b6:	015b      	lsls	r3, r3, #5
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d109      	bne.n	80057d0 <HAL_UART_Transmit+0x4c>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2201      	movs	r2, #1
 80057c8:	4013      	ands	r3, r2
 80057ca:	d001      	beq.n	80057d0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e074      	b.n	80058ba <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2284      	movs	r2, #132	@ 0x84
 80057d4:	2100      	movs	r1, #0
 80057d6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2221      	movs	r2, #33	@ 0x21
 80057dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057de:	f7fd fa27 	bl	8002c30 <HAL_GetTick>
 80057e2:	0003      	movs	r3, r0
 80057e4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	1dba      	adds	r2, r7, #6
 80057ea:	2150      	movs	r1, #80	@ 0x50
 80057ec:	8812      	ldrh	r2, [r2, #0]
 80057ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	1dba      	adds	r2, r7, #6
 80057f4:	2152      	movs	r1, #82	@ 0x52
 80057f6:	8812      	ldrh	r2, [r2, #0]
 80057f8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	2380      	movs	r3, #128	@ 0x80
 8005800:	015b      	lsls	r3, r3, #5
 8005802:	429a      	cmp	r2, r3
 8005804:	d108      	bne.n	8005818 <HAL_UART_Transmit+0x94>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d104      	bne.n	8005818 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	61bb      	str	r3, [r7, #24]
 8005816:	e003      	b.n	8005820 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800581c:	2300      	movs	r3, #0
 800581e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005820:	e02f      	b.n	8005882 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	0013      	movs	r3, r2
 800582c:	2200      	movs	r2, #0
 800582e:	2180      	movs	r1, #128	@ 0x80
 8005830:	f000 fe1e 	bl	8006470 <UART_WaitOnFlagUntilTimeout>
 8005834:	1e03      	subs	r3, r0, #0
 8005836:	d004      	beq.n	8005842 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2220      	movs	r2, #32
 800583c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e03b      	b.n	80058ba <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10b      	bne.n	8005860 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	881a      	ldrh	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	05d2      	lsls	r2, r2, #23
 8005852:	0dd2      	lsrs	r2, r2, #23
 8005854:	b292      	uxth	r2, r2
 8005856:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	3302      	adds	r3, #2
 800585c:	61bb      	str	r3, [r7, #24]
 800585e:	e007      	b.n	8005870 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	781a      	ldrb	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	3301      	adds	r3, #1
 800586e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2252      	movs	r2, #82	@ 0x52
 8005874:	5a9b      	ldrh	r3, [r3, r2]
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b299      	uxth	r1, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2252      	movs	r2, #82	@ 0x52
 8005880:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2252      	movs	r2, #82	@ 0x52
 8005886:	5a9b      	ldrh	r3, [r3, r2]
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1c9      	bne.n	8005822 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	0013      	movs	r3, r2
 8005898:	2200      	movs	r2, #0
 800589a:	2140      	movs	r1, #64	@ 0x40
 800589c:	f000 fde8 	bl	8006470 <UART_WaitOnFlagUntilTimeout>
 80058a0:	1e03      	subs	r3, r0, #0
 80058a2:	d004      	beq.n	80058ae <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2220      	movs	r2, #32
 80058a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e005      	b.n	80058ba <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	e000      	b.n	80058ba <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80058b8:	2302      	movs	r3, #2
  }
}
 80058ba:	0018      	movs	r0, r3
 80058bc:	46bd      	mov	sp, r7
 80058be:	b008      	add	sp, #32
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b088      	sub	sp, #32
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	60f8      	str	r0, [r7, #12]
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	1dbb      	adds	r3, r7, #6
 80058ce:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2280      	movs	r2, #128	@ 0x80
 80058d4:	589b      	ldr	r3, [r3, r2]
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d145      	bne.n	8005966 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <HAL_UART_Receive_IT+0x26>
 80058e0:	1dbb      	adds	r3, r7, #6
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e03d      	b.n	8005968 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	2380      	movs	r3, #128	@ 0x80
 80058f2:	015b      	lsls	r3, r3, #5
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d109      	bne.n	800590c <HAL_UART_Receive_IT+0x4a>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d105      	bne.n	800590c <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2201      	movs	r2, #1
 8005904:	4013      	ands	r3, r2
 8005906:	d001      	beq.n	800590c <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e02d      	b.n	8005968 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	2380      	movs	r3, #128	@ 0x80
 800591a:	041b      	lsls	r3, r3, #16
 800591c:	4013      	ands	r3, r2
 800591e:	d019      	beq.n	8005954 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005920:	f3ef 8310 	mrs	r3, PRIMASK
 8005924:	613b      	str	r3, [r7, #16]
  return(result);
 8005926:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005928:	61fb      	str	r3, [r7, #28]
 800592a:	2301      	movs	r3, #1
 800592c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f383 8810 	msr	PRIMASK, r3
}
 8005934:	46c0      	nop			@ (mov r8, r8)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2180      	movs	r1, #128	@ 0x80
 8005942:	04c9      	lsls	r1, r1, #19
 8005944:	430a      	orrs	r2, r1
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f383 8810 	msr	PRIMASK, r3
}
 8005952:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005954:	1dbb      	adds	r3, r7, #6
 8005956:	881a      	ldrh	r2, [r3, #0]
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	0018      	movs	r0, r3
 800595e:	f000 fdf7 	bl	8006550 <UART_Start_Receive_IT>
 8005962:	0003      	movs	r3, r0
 8005964:	e000      	b.n	8005968 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8005966:	2302      	movs	r3, #2
  }
}
 8005968:	0018      	movs	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	b008      	add	sp, #32
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005970:	b590      	push	{r4, r7, lr}
 8005972:	b0ab      	sub	sp, #172	@ 0xac
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	22a4      	movs	r2, #164	@ 0xa4
 8005980:	18b9      	adds	r1, r7, r2
 8005982:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	20a0      	movs	r0, #160	@ 0xa0
 800598c:	1839      	adds	r1, r7, r0
 800598e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	219c      	movs	r1, #156	@ 0x9c
 8005998:	1879      	adds	r1, r7, r1
 800599a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800599c:	0011      	movs	r1, r2
 800599e:	18bb      	adds	r3, r7, r2
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a99      	ldr	r2, [pc, #612]	@ (8005c08 <HAL_UART_IRQHandler+0x298>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	2298      	movs	r2, #152	@ 0x98
 80059a8:	18bc      	adds	r4, r7, r2
 80059aa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80059ac:	18bb      	adds	r3, r7, r2
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d114      	bne.n	80059de <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80059b4:	187b      	adds	r3, r7, r1
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2220      	movs	r2, #32
 80059ba:	4013      	ands	r3, r2
 80059bc:	d00f      	beq.n	80059de <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059be:	183b      	adds	r3, r7, r0
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2220      	movs	r2, #32
 80059c4:	4013      	ands	r3, r2
 80059c6:	d00a      	beq.n	80059de <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d100      	bne.n	80059d2 <HAL_UART_IRQHandler+0x62>
 80059d0:	e286      	b.n	8005ee0 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	0010      	movs	r0, r2
 80059da:	4798      	blx	r3
      }
      return;
 80059dc:	e280      	b.n	8005ee0 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80059de:	2398      	movs	r3, #152	@ 0x98
 80059e0:	18fb      	adds	r3, r7, r3
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d100      	bne.n	80059ea <HAL_UART_IRQHandler+0x7a>
 80059e8:	e114      	b.n	8005c14 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80059ea:	239c      	movs	r3, #156	@ 0x9c
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2201      	movs	r2, #1
 80059f2:	4013      	ands	r3, r2
 80059f4:	d106      	bne.n	8005a04 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80059f6:	23a0      	movs	r3, #160	@ 0xa0
 80059f8:	18fb      	adds	r3, r7, r3
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a83      	ldr	r2, [pc, #524]	@ (8005c0c <HAL_UART_IRQHandler+0x29c>)
 80059fe:	4013      	ands	r3, r2
 8005a00:	d100      	bne.n	8005a04 <HAL_UART_IRQHandler+0x94>
 8005a02:	e107      	b.n	8005c14 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a04:	23a4      	movs	r3, #164	@ 0xa4
 8005a06:	18fb      	adds	r3, r7, r3
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d012      	beq.n	8005a36 <HAL_UART_IRQHandler+0xc6>
 8005a10:	23a0      	movs	r3, #160	@ 0xa0
 8005a12:	18fb      	adds	r3, r7, r3
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	2380      	movs	r3, #128	@ 0x80
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	d00b      	beq.n	8005a36 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2201      	movs	r2, #1
 8005a24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2284      	movs	r2, #132	@ 0x84
 8005a2a:	589b      	ldr	r3, [r3, r2]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2184      	movs	r1, #132	@ 0x84
 8005a34:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a36:	23a4      	movs	r3, #164	@ 0xa4
 8005a38:	18fb      	adds	r3, r7, r3
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	4013      	ands	r3, r2
 8005a40:	d011      	beq.n	8005a66 <HAL_UART_IRQHandler+0xf6>
 8005a42:	239c      	movs	r3, #156	@ 0x9c
 8005a44:	18fb      	adds	r3, r7, r3
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	d00b      	beq.n	8005a66 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2202      	movs	r2, #2
 8005a54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2284      	movs	r2, #132	@ 0x84
 8005a5a:	589b      	ldr	r3, [r3, r2]
 8005a5c:	2204      	movs	r2, #4
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2184      	movs	r1, #132	@ 0x84
 8005a64:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a66:	23a4      	movs	r3, #164	@ 0xa4
 8005a68:	18fb      	adds	r3, r7, r3
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2204      	movs	r2, #4
 8005a6e:	4013      	ands	r3, r2
 8005a70:	d011      	beq.n	8005a96 <HAL_UART_IRQHandler+0x126>
 8005a72:	239c      	movs	r3, #156	@ 0x9c
 8005a74:	18fb      	adds	r3, r7, r3
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d00b      	beq.n	8005a96 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2204      	movs	r2, #4
 8005a84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2284      	movs	r2, #132	@ 0x84
 8005a8a:	589b      	ldr	r3, [r3, r2]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2184      	movs	r1, #132	@ 0x84
 8005a94:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a96:	23a4      	movs	r3, #164	@ 0xa4
 8005a98:	18fb      	adds	r3, r7, r3
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	d017      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005aa2:	23a0      	movs	r3, #160	@ 0xa0
 8005aa4:	18fb      	adds	r3, r7, r3
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	4013      	ands	r3, r2
 8005aac:	d105      	bne.n	8005aba <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005aae:	239c      	movs	r3, #156	@ 0x9c
 8005ab0:	18fb      	adds	r3, r7, r3
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ab8:	d00b      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2208      	movs	r2, #8
 8005ac0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2284      	movs	r2, #132	@ 0x84
 8005ac6:	589b      	ldr	r3, [r3, r2]
 8005ac8:	2208      	movs	r2, #8
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2184      	movs	r1, #132	@ 0x84
 8005ad0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ad2:	23a4      	movs	r3, #164	@ 0xa4
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	2380      	movs	r3, #128	@ 0x80
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	4013      	ands	r3, r2
 8005ade:	d013      	beq.n	8005b08 <HAL_UART_IRQHandler+0x198>
 8005ae0:	23a0      	movs	r3, #160	@ 0xa0
 8005ae2:	18fb      	adds	r3, r7, r3
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	2380      	movs	r3, #128	@ 0x80
 8005ae8:	04db      	lsls	r3, r3, #19
 8005aea:	4013      	ands	r3, r2
 8005aec:	d00c      	beq.n	8005b08 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2280      	movs	r2, #128	@ 0x80
 8005af4:	0112      	lsls	r2, r2, #4
 8005af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2284      	movs	r2, #132	@ 0x84
 8005afc:	589b      	ldr	r3, [r3, r2]
 8005afe:	2220      	movs	r2, #32
 8005b00:	431a      	orrs	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2184      	movs	r1, #132	@ 0x84
 8005b06:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2284      	movs	r2, #132	@ 0x84
 8005b0c:	589b      	ldr	r3, [r3, r2]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d100      	bne.n	8005b14 <HAL_UART_IRQHandler+0x1a4>
 8005b12:	e1e7      	b.n	8005ee4 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b14:	23a4      	movs	r3, #164	@ 0xa4
 8005b16:	18fb      	adds	r3, r7, r3
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	d00e      	beq.n	8005b3e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b20:	23a0      	movs	r3, #160	@ 0xa0
 8005b22:	18fb      	adds	r3, r7, r3
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2220      	movs	r2, #32
 8005b28:	4013      	ands	r3, r2
 8005b2a:	d008      	beq.n	8005b3e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d004      	beq.n	8005b3e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	0010      	movs	r0, r2
 8005b3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2284      	movs	r2, #132	@ 0x84
 8005b42:	589b      	ldr	r3, [r3, r2]
 8005b44:	2194      	movs	r1, #148	@ 0x94
 8005b46:	187a      	adds	r2, r7, r1
 8005b48:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	2240      	movs	r2, #64	@ 0x40
 8005b52:	4013      	ands	r3, r2
 8005b54:	2b40      	cmp	r3, #64	@ 0x40
 8005b56:	d004      	beq.n	8005b62 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b58:	187b      	adds	r3, r7, r1
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2228      	movs	r2, #40	@ 0x28
 8005b5e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b60:	d047      	beq.n	8005bf2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	0018      	movs	r0, r3
 8005b66:	f000 fda9 	bl	80066bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	2240      	movs	r2, #64	@ 0x40
 8005b72:	4013      	ands	r3, r2
 8005b74:	2b40      	cmp	r3, #64	@ 0x40
 8005b76:	d137      	bne.n	8005be8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b78:	f3ef 8310 	mrs	r3, PRIMASK
 8005b7c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8005b7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b80:	2090      	movs	r0, #144	@ 0x90
 8005b82:	183a      	adds	r2, r7, r0
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	2301      	movs	r3, #1
 8005b88:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b8c:	f383 8810 	msr	PRIMASK, r3
}
 8005b90:	46c0      	nop			@ (mov r8, r8)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2140      	movs	r1, #64	@ 0x40
 8005b9e:	438a      	bics	r2, r1
 8005ba0:	609a      	str	r2, [r3, #8]
 8005ba2:	183b      	adds	r3, r7, r0
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005baa:	f383 8810 	msr	PRIMASK, r3
}
 8005bae:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d012      	beq.n	8005bde <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bbc:	4a14      	ldr	r2, [pc, #80]	@ (8005c10 <HAL_UART_IRQHandler+0x2a0>)
 8005bbe:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	f7fd f977 	bl	8002eb8 <HAL_DMA_Abort_IT>
 8005bca:	1e03      	subs	r3, r0, #0
 8005bcc:	d01a      	beq.n	8005c04 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bd8:	0018      	movs	r0, r3
 8005bda:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bdc:	e012      	b.n	8005c04 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	0018      	movs	r0, r3
 8005be2:	f000 f995 	bl	8005f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be6:	e00d      	b.n	8005c04 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	0018      	movs	r0, r3
 8005bec:	f000 f990 	bl	8005f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf0:	e008      	b.n	8005c04 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f000 f98b 	bl	8005f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2284      	movs	r2, #132	@ 0x84
 8005bfe:	2100      	movs	r1, #0
 8005c00:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005c02:	e16f      	b.n	8005ee4 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c04:	46c0      	nop			@ (mov r8, r8)
    return;
 8005c06:	e16d      	b.n	8005ee4 <HAL_UART_IRQHandler+0x574>
 8005c08:	0000080f 	.word	0x0000080f
 8005c0c:	04000120 	.word	0x04000120
 8005c10:	08006785 	.word	0x08006785

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d000      	beq.n	8005c1e <HAL_UART_IRQHandler+0x2ae>
 8005c1c:	e139      	b.n	8005e92 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c1e:	23a4      	movs	r3, #164	@ 0xa4
 8005c20:	18fb      	adds	r3, r7, r3
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2210      	movs	r2, #16
 8005c26:	4013      	ands	r3, r2
 8005c28:	d100      	bne.n	8005c2c <HAL_UART_IRQHandler+0x2bc>
 8005c2a:	e132      	b.n	8005e92 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c2c:	23a0      	movs	r3, #160	@ 0xa0
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2210      	movs	r2, #16
 8005c34:	4013      	ands	r3, r2
 8005c36:	d100      	bne.n	8005c3a <HAL_UART_IRQHandler+0x2ca>
 8005c38:	e12b      	b.n	8005e92 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2210      	movs	r2, #16
 8005c40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	2240      	movs	r2, #64	@ 0x40
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b40      	cmp	r3, #64	@ 0x40
 8005c4e:	d000      	beq.n	8005c52 <HAL_UART_IRQHandler+0x2e2>
 8005c50:	e09f      	b.n	8005d92 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	217e      	movs	r1, #126	@ 0x7e
 8005c5c:	187b      	adds	r3, r7, r1
 8005c5e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005c60:	187b      	adds	r3, r7, r1
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d100      	bne.n	8005c6a <HAL_UART_IRQHandler+0x2fa>
 8005c68:	e13e      	b.n	8005ee8 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2258      	movs	r2, #88	@ 0x58
 8005c6e:	5a9b      	ldrh	r3, [r3, r2]
 8005c70:	187a      	adds	r2, r7, r1
 8005c72:	8812      	ldrh	r2, [r2, #0]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d300      	bcc.n	8005c7a <HAL_UART_IRQHandler+0x30a>
 8005c78:	e136      	b.n	8005ee8 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	187a      	adds	r2, r7, r1
 8005c7e:	215a      	movs	r1, #90	@ 0x5a
 8005c80:	8812      	ldrh	r2, [r2, #0]
 8005c82:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	2b20      	cmp	r3, #32
 8005c8c:	d06f      	beq.n	8005d6e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c92:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c96:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c98:	2301      	movs	r3, #1
 8005c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c9e:	f383 8810 	msr	PRIMASK, r3
}
 8005ca2:	46c0      	nop			@ (mov r8, r8)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4992      	ldr	r1, [pc, #584]	@ (8005ef8 <HAL_UART_IRQHandler+0x588>)
 8005cb0:	400a      	ands	r2, r1
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cba:	f383 8810 	msr	PRIMASK, r3
}
 8005cbe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc8:	677b      	str	r3, [r7, #116]	@ 0x74
 8005cca:	2301      	movs	r3, #1
 8005ccc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cd0:	f383 8810 	msr	PRIMASK, r3
}
 8005cd4:	46c0      	nop			@ (mov r8, r8)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	438a      	bics	r2, r1
 8005ce4:	609a      	str	r2, [r3, #8]
 8005ce6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ce8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cec:	f383 8810 	msr	PRIMASK, r3
}
 8005cf0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8005cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cfa:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d02:	f383 8810 	msr	PRIMASK, r3
}
 8005d06:	46c0      	nop			@ (mov r8, r8)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2140      	movs	r1, #64	@ 0x40
 8005d14:	438a      	bics	r2, r1
 8005d16:	609a      	str	r2, [r3, #8]
 8005d18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d1a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d1e:	f383 8810 	msr	PRIMASK, r3
}
 8005d22:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2280      	movs	r2, #128	@ 0x80
 8005d28:	2120      	movs	r1, #32
 8005d2a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d32:	f3ef 8310 	mrs	r3, PRIMASK
 8005d36:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d42:	f383 8810 	msr	PRIMASK, r3
}
 8005d46:	46c0      	nop			@ (mov r8, r8)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2110      	movs	r1, #16
 8005d54:	438a      	bics	r2, r1
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d5e:	f383 8810 	msr	PRIMASK, r3
}
 8005d62:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f7fd f86d 	bl	8002e48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2202      	movs	r2, #2
 8005d72:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2258      	movs	r2, #88	@ 0x58
 8005d78:	5a9a      	ldrh	r2, [r3, r2]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	215a      	movs	r1, #90	@ 0x5a
 8005d7e:	5a5b      	ldrh	r3, [r3, r1]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	0011      	movs	r1, r2
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f000 f8c8 	bl	8005f20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d90:	e0aa      	b.n	8005ee8 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2258      	movs	r2, #88	@ 0x58
 8005d96:	5a99      	ldrh	r1, [r3, r2]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	225a      	movs	r2, #90	@ 0x5a
 8005d9c:	5a9b      	ldrh	r3, [r3, r2]
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	208e      	movs	r0, #142	@ 0x8e
 8005da2:	183b      	adds	r3, r7, r0
 8005da4:	1a8a      	subs	r2, r1, r2
 8005da6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	225a      	movs	r2, #90	@ 0x5a
 8005dac:	5a9b      	ldrh	r3, [r3, r2]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d100      	bne.n	8005db6 <HAL_UART_IRQHandler+0x446>
 8005db4:	e09a      	b.n	8005eec <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8005db6:	183b      	adds	r3, r7, r0
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d100      	bne.n	8005dc0 <HAL_UART_IRQHandler+0x450>
 8005dbe:	e095      	b.n	8005eec <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dc8:	2488      	movs	r4, #136	@ 0x88
 8005dca:	193a      	adds	r2, r7, r4
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	2301      	movs	r3, #1
 8005dd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f383 8810 	msr	PRIMASK, r3
}
 8005dd8:	46c0      	nop			@ (mov r8, r8)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4945      	ldr	r1, [pc, #276]	@ (8005efc <HAL_UART_IRQHandler+0x58c>)
 8005de6:	400a      	ands	r2, r1
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	193b      	adds	r3, r7, r4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f383 8810 	msr	PRIMASK, r3
}
 8005df6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dfc:	61bb      	str	r3, [r7, #24]
  return(result);
 8005dfe:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e00:	2484      	movs	r4, #132	@ 0x84
 8005e02:	193a      	adds	r2, r7, r4
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	2301      	movs	r3, #1
 8005e08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	f383 8810 	msr	PRIMASK, r3
}
 8005e10:	46c0      	nop			@ (mov r8, r8)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	438a      	bics	r2, r1
 8005e20:	609a      	str	r2, [r3, #8]
 8005e22:	193b      	adds	r3, r7, r4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	f383 8810 	msr	PRIMASK, r3
}
 8005e2e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2280      	movs	r2, #128	@ 0x80
 8005e34:	2120      	movs	r1, #32
 8005e36:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e44:	f3ef 8310 	mrs	r3, PRIMASK
 8005e48:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4c:	2480      	movs	r4, #128	@ 0x80
 8005e4e:	193a      	adds	r2, r7, r4
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	2301      	movs	r3, #1
 8005e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e58:	f383 8810 	msr	PRIMASK, r3
}
 8005e5c:	46c0      	nop			@ (mov r8, r8)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2110      	movs	r1, #16
 8005e6a:	438a      	bics	r2, r1
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	193b      	adds	r3, r7, r4
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e76:	f383 8810 	msr	PRIMASK, r3
}
 8005e7a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e82:	183b      	adds	r3, r7, r0
 8005e84:	881a      	ldrh	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0011      	movs	r1, r2
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f000 f848 	bl	8005f20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e90:	e02c      	b.n	8005eec <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e92:	23a4      	movs	r3, #164	@ 0xa4
 8005e94:	18fb      	adds	r3, r7, r3
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2280      	movs	r2, #128	@ 0x80
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d00f      	beq.n	8005ebe <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e9e:	23a0      	movs	r3, #160	@ 0xa0
 8005ea0:	18fb      	adds	r3, r7, r3
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2280      	movs	r2, #128	@ 0x80
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	d009      	beq.n	8005ebe <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d01e      	beq.n	8005ef0 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	0010      	movs	r0, r2
 8005eba:	4798      	blx	r3
    }
    return;
 8005ebc:	e018      	b.n	8005ef0 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ebe:	23a4      	movs	r3, #164	@ 0xa4
 8005ec0:	18fb      	adds	r3, r7, r3
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2240      	movs	r2, #64	@ 0x40
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	d013      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x582>
 8005eca:	23a0      	movs	r3, #160	@ 0xa0
 8005ecc:	18fb      	adds	r3, r7, r3
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2240      	movs	r2, #64	@ 0x40
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	d00d      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	0018      	movs	r0, r3
 8005eda:	f000 fc6a 	bl	80067b2 <UART_EndTransmit_IT>
    return;
 8005ede:	e008      	b.n	8005ef2 <HAL_UART_IRQHandler+0x582>
      return;
 8005ee0:	46c0      	nop			@ (mov r8, r8)
 8005ee2:	e006      	b.n	8005ef2 <HAL_UART_IRQHandler+0x582>
    return;
 8005ee4:	46c0      	nop			@ (mov r8, r8)
 8005ee6:	e004      	b.n	8005ef2 <HAL_UART_IRQHandler+0x582>
      return;
 8005ee8:	46c0      	nop			@ (mov r8, r8)
 8005eea:	e002      	b.n	8005ef2 <HAL_UART_IRQHandler+0x582>
      return;
 8005eec:	46c0      	nop			@ (mov r8, r8)
 8005eee:	e000      	b.n	8005ef2 <HAL_UART_IRQHandler+0x582>
    return;
 8005ef0:	46c0      	nop			@ (mov r8, r8)
  }

}
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	b02b      	add	sp, #172	@ 0xac
 8005ef6:	bd90      	pop	{r4, r7, pc}
 8005ef8:	fffffeff 	.word	0xfffffeff
 8005efc:	fffffedf 	.word	0xfffffedf

08005f00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f08:	46c0      	nop			@ (mov r8, r8)
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	b002      	add	sp, #8
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f18:	46c0      	nop			@ (mov r8, r8)
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	b002      	add	sp, #8
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	000a      	movs	r2, r1
 8005f2a:	1cbb      	adds	r3, r7, #2
 8005f2c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f2e:	46c0      	nop			@ (mov r8, r8)
 8005f30:	46bd      	mov	sp, r7
 8005f32:	b002      	add	sp, #8
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b088      	sub	sp, #32
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f40:	231e      	movs	r3, #30
 8005f42:	18fb      	adds	r3, r7, r3
 8005f44:	2200      	movs	r2, #0
 8005f46:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	431a      	orrs	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a8d      	ldr	r2, [pc, #564]	@ (800619c <UART_SetConfig+0x264>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	0019      	movs	r1, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	4a88      	ldr	r2, [pc, #544]	@ (80061a0 <UART_SetConfig+0x268>)
 8005f7e:	4013      	ands	r3, r2
 8005f80:	0019      	movs	r1, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	4a7f      	ldr	r2, [pc, #508]	@ (80061a4 <UART_SetConfig+0x26c>)
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	0019      	movs	r1, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a7b      	ldr	r2, [pc, #492]	@ (80061a8 <UART_SetConfig+0x270>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d127      	bne.n	800600e <UART_SetConfig+0xd6>
 8005fbe:	4b7b      	ldr	r3, [pc, #492]	@ (80061ac <UART_SetConfig+0x274>)
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc2:	2203      	movs	r2, #3
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d00d      	beq.n	8005fe6 <UART_SetConfig+0xae>
 8005fca:	d81b      	bhi.n	8006004 <UART_SetConfig+0xcc>
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d014      	beq.n	8005ffa <UART_SetConfig+0xc2>
 8005fd0:	d818      	bhi.n	8006004 <UART_SetConfig+0xcc>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <UART_SetConfig+0xa4>
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d00a      	beq.n	8005ff0 <UART_SetConfig+0xb8>
 8005fda:	e013      	b.n	8006004 <UART_SetConfig+0xcc>
 8005fdc:	231f      	movs	r3, #31
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	e021      	b.n	800602a <UART_SetConfig+0xf2>
 8005fe6:	231f      	movs	r3, #31
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	2202      	movs	r2, #2
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	e01c      	b.n	800602a <UART_SetConfig+0xf2>
 8005ff0:	231f      	movs	r3, #31
 8005ff2:	18fb      	adds	r3, r7, r3
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	e017      	b.n	800602a <UART_SetConfig+0xf2>
 8005ffa:	231f      	movs	r3, #31
 8005ffc:	18fb      	adds	r3, r7, r3
 8005ffe:	2208      	movs	r2, #8
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	e012      	b.n	800602a <UART_SetConfig+0xf2>
 8006004:	231f      	movs	r3, #31
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	2210      	movs	r2, #16
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	e00d      	b.n	800602a <UART_SetConfig+0xf2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a67      	ldr	r2, [pc, #412]	@ (80061b0 <UART_SetConfig+0x278>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d104      	bne.n	8006022 <UART_SetConfig+0xea>
 8006018:	231f      	movs	r3, #31
 800601a:	18fb      	adds	r3, r7, r3
 800601c:	2200      	movs	r2, #0
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	e003      	b.n	800602a <UART_SetConfig+0xf2>
 8006022:	231f      	movs	r3, #31
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	2210      	movs	r2, #16
 8006028:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69da      	ldr	r2, [r3, #28]
 800602e:	2380      	movs	r3, #128	@ 0x80
 8006030:	021b      	lsls	r3, r3, #8
 8006032:	429a      	cmp	r2, r3
 8006034:	d15c      	bne.n	80060f0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8006036:	231f      	movs	r3, #31
 8006038:	18fb      	adds	r3, r7, r3
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b08      	cmp	r3, #8
 800603e:	d015      	beq.n	800606c <UART_SetConfig+0x134>
 8006040:	dc18      	bgt.n	8006074 <UART_SetConfig+0x13c>
 8006042:	2b04      	cmp	r3, #4
 8006044:	d00d      	beq.n	8006062 <UART_SetConfig+0x12a>
 8006046:	dc15      	bgt.n	8006074 <UART_SetConfig+0x13c>
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <UART_SetConfig+0x11a>
 800604c:	2b02      	cmp	r3, #2
 800604e:	d005      	beq.n	800605c <UART_SetConfig+0x124>
 8006050:	e010      	b.n	8006074 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006052:	f7ff fa5f 	bl	8005514 <HAL_RCC_GetPCLK1Freq>
 8006056:	0003      	movs	r3, r0
 8006058:	61bb      	str	r3, [r7, #24]
        break;
 800605a:	e012      	b.n	8006082 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800605c:	4b55      	ldr	r3, [pc, #340]	@ (80061b4 <UART_SetConfig+0x27c>)
 800605e:	61bb      	str	r3, [r7, #24]
        break;
 8006060:	e00f      	b.n	8006082 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006062:	f7ff f9f7 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 8006066:	0003      	movs	r3, r0
 8006068:	61bb      	str	r3, [r7, #24]
        break;
 800606a:	e00a      	b.n	8006082 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800606c:	2380      	movs	r3, #128	@ 0x80
 800606e:	021b      	lsls	r3, r3, #8
 8006070:	61bb      	str	r3, [r7, #24]
        break;
 8006072:	e006      	b.n	8006082 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006078:	231e      	movs	r3, #30
 800607a:	18fb      	adds	r3, r7, r3
 800607c:	2201      	movs	r2, #1
 800607e:	701a      	strb	r2, [r3, #0]
        break;
 8006080:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d100      	bne.n	800608a <UART_SetConfig+0x152>
 8006088:	e07a      	b.n	8006180 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	005a      	lsls	r2, r3, #1
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	085b      	lsrs	r3, r3, #1
 8006094:	18d2      	adds	r2, r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	0019      	movs	r1, r3
 800609c:	0010      	movs	r0, r2
 800609e:	f7fa f83d 	bl	800011c <__udivsi3>
 80060a2:	0003      	movs	r3, r0
 80060a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	2b0f      	cmp	r3, #15
 80060aa:	d91c      	bls.n	80060e6 <UART_SetConfig+0x1ae>
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	2380      	movs	r3, #128	@ 0x80
 80060b0:	025b      	lsls	r3, r3, #9
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d217      	bcs.n	80060e6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	200e      	movs	r0, #14
 80060bc:	183b      	adds	r3, r7, r0
 80060be:	210f      	movs	r1, #15
 80060c0:	438a      	bics	r2, r1
 80060c2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2207      	movs	r2, #7
 80060cc:	4013      	ands	r3, r2
 80060ce:	b299      	uxth	r1, r3
 80060d0:	183b      	adds	r3, r7, r0
 80060d2:	183a      	adds	r2, r7, r0
 80060d4:	8812      	ldrh	r2, [r2, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	183a      	adds	r2, r7, r0
 80060e0:	8812      	ldrh	r2, [r2, #0]
 80060e2:	60da      	str	r2, [r3, #12]
 80060e4:	e04c      	b.n	8006180 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80060e6:	231e      	movs	r3, #30
 80060e8:	18fb      	adds	r3, r7, r3
 80060ea:	2201      	movs	r2, #1
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	e047      	b.n	8006180 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060f0:	231f      	movs	r3, #31
 80060f2:	18fb      	adds	r3, r7, r3
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b08      	cmp	r3, #8
 80060f8:	d015      	beq.n	8006126 <UART_SetConfig+0x1ee>
 80060fa:	dc18      	bgt.n	800612e <UART_SetConfig+0x1f6>
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d00d      	beq.n	800611c <UART_SetConfig+0x1e4>
 8006100:	dc15      	bgt.n	800612e <UART_SetConfig+0x1f6>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <UART_SetConfig+0x1d4>
 8006106:	2b02      	cmp	r3, #2
 8006108:	d005      	beq.n	8006116 <UART_SetConfig+0x1de>
 800610a:	e010      	b.n	800612e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800610c:	f7ff fa02 	bl	8005514 <HAL_RCC_GetPCLK1Freq>
 8006110:	0003      	movs	r3, r0
 8006112:	61bb      	str	r3, [r7, #24]
        break;
 8006114:	e012      	b.n	800613c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006116:	4b27      	ldr	r3, [pc, #156]	@ (80061b4 <UART_SetConfig+0x27c>)
 8006118:	61bb      	str	r3, [r7, #24]
        break;
 800611a:	e00f      	b.n	800613c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800611c:	f7ff f99a 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 8006120:	0003      	movs	r3, r0
 8006122:	61bb      	str	r3, [r7, #24]
        break;
 8006124:	e00a      	b.n	800613c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006126:	2380      	movs	r3, #128	@ 0x80
 8006128:	021b      	lsls	r3, r3, #8
 800612a:	61bb      	str	r3, [r7, #24]
        break;
 800612c:	e006      	b.n	800613c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006132:	231e      	movs	r3, #30
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	2201      	movs	r2, #1
 8006138:	701a      	strb	r2, [r3, #0]
        break;
 800613a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d01e      	beq.n	8006180 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	085a      	lsrs	r2, r3, #1
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	18d2      	adds	r2, r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	0019      	movs	r1, r3
 8006152:	0010      	movs	r0, r2
 8006154:	f7f9 ffe2 	bl	800011c <__udivsi3>
 8006158:	0003      	movs	r3, r0
 800615a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	2b0f      	cmp	r3, #15
 8006160:	d90a      	bls.n	8006178 <UART_SetConfig+0x240>
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	2380      	movs	r3, #128	@ 0x80
 8006166:	025b      	lsls	r3, r3, #9
 8006168:	429a      	cmp	r2, r3
 800616a:	d205      	bcs.n	8006178 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	b29a      	uxth	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	60da      	str	r2, [r3, #12]
 8006176:	e003      	b.n	8006180 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8006178:	231e      	movs	r3, #30
 800617a:	18fb      	adds	r3, r7, r3
 800617c:	2201      	movs	r2, #1
 800617e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800618c:	231e      	movs	r3, #30
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	781b      	ldrb	r3, [r3, #0]
}
 8006192:	0018      	movs	r0, r3
 8006194:	46bd      	mov	sp, r7
 8006196:	b008      	add	sp, #32
 8006198:	bd80      	pop	{r7, pc}
 800619a:	46c0      	nop			@ (mov r8, r8)
 800619c:	ffff69f3 	.word	0xffff69f3
 80061a0:	ffffcfff 	.word	0xffffcfff
 80061a4:	fffff4ff 	.word	0xfffff4ff
 80061a8:	40013800 	.word	0x40013800
 80061ac:	40021000 	.word	0x40021000
 80061b0:	40004400 	.word	0x40004400
 80061b4:	007a1200 	.word	0x007a1200

080061b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c4:	2208      	movs	r2, #8
 80061c6:	4013      	ands	r3, r2
 80061c8:	d00b      	beq.n	80061e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	4a4a      	ldr	r2, [pc, #296]	@ (80062fc <UART_AdvFeatureConfig+0x144>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	0019      	movs	r1, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e6:	2201      	movs	r2, #1
 80061e8:	4013      	ands	r3, r2
 80061ea:	d00b      	beq.n	8006204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	4a43      	ldr	r2, [pc, #268]	@ (8006300 <UART_AdvFeatureConfig+0x148>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	0019      	movs	r1, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	2202      	movs	r2, #2
 800620a:	4013      	ands	r3, r2
 800620c:	d00b      	beq.n	8006226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	4a3b      	ldr	r2, [pc, #236]	@ (8006304 <UART_AdvFeatureConfig+0x14c>)
 8006216:	4013      	ands	r3, r2
 8006218:	0019      	movs	r1, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622a:	2204      	movs	r2, #4
 800622c:	4013      	ands	r3, r2
 800622e:	d00b      	beq.n	8006248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	4a34      	ldr	r2, [pc, #208]	@ (8006308 <UART_AdvFeatureConfig+0x150>)
 8006238:	4013      	ands	r3, r2
 800623a:	0019      	movs	r1, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624c:	2210      	movs	r2, #16
 800624e:	4013      	ands	r3, r2
 8006250:	d00b      	beq.n	800626a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	4a2c      	ldr	r2, [pc, #176]	@ (800630c <UART_AdvFeatureConfig+0x154>)
 800625a:	4013      	ands	r3, r2
 800625c:	0019      	movs	r1, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626e:	2220      	movs	r2, #32
 8006270:	4013      	ands	r3, r2
 8006272:	d00b      	beq.n	800628c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	4a25      	ldr	r2, [pc, #148]	@ (8006310 <UART_AdvFeatureConfig+0x158>)
 800627c:	4013      	ands	r3, r2
 800627e:	0019      	movs	r1, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006290:	2240      	movs	r2, #64	@ 0x40
 8006292:	4013      	ands	r3, r2
 8006294:	d01d      	beq.n	80062d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	4a1d      	ldr	r2, [pc, #116]	@ (8006314 <UART_AdvFeatureConfig+0x15c>)
 800629e:	4013      	ands	r3, r2
 80062a0:	0019      	movs	r1, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062b2:	2380      	movs	r3, #128	@ 0x80
 80062b4:	035b      	lsls	r3, r3, #13
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d10b      	bne.n	80062d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	4a15      	ldr	r2, [pc, #84]	@ (8006318 <UART_AdvFeatureConfig+0x160>)
 80062c2:	4013      	ands	r3, r2
 80062c4:	0019      	movs	r1, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d6:	2280      	movs	r2, #128	@ 0x80
 80062d8:	4013      	ands	r3, r2
 80062da:	d00b      	beq.n	80062f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	4a0e      	ldr	r2, [pc, #56]	@ (800631c <UART_AdvFeatureConfig+0x164>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	0019      	movs	r1, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	605a      	str	r2, [r3, #4]
  }
}
 80062f4:	46c0      	nop			@ (mov r8, r8)
 80062f6:	46bd      	mov	sp, r7
 80062f8:	b002      	add	sp, #8
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	ffff7fff 	.word	0xffff7fff
 8006300:	fffdffff 	.word	0xfffdffff
 8006304:	fffeffff 	.word	0xfffeffff
 8006308:	fffbffff 	.word	0xfffbffff
 800630c:	ffffefff 	.word	0xffffefff
 8006310:	ffffdfff 	.word	0xffffdfff
 8006314:	ffefffff 	.word	0xffefffff
 8006318:	ff9fffff 	.word	0xff9fffff
 800631c:	fff7ffff 	.word	0xfff7ffff

08006320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b092      	sub	sp, #72	@ 0x48
 8006324:	af02      	add	r7, sp, #8
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2284      	movs	r2, #132	@ 0x84
 800632c:	2100      	movs	r1, #0
 800632e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006330:	f7fc fc7e 	bl	8002c30 <HAL_GetTick>
 8006334:	0003      	movs	r3, r0
 8006336:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2208      	movs	r2, #8
 8006340:	4013      	ands	r3, r2
 8006342:	2b08      	cmp	r3, #8
 8006344:	d12c      	bne.n	80063a0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006348:	2280      	movs	r2, #128	@ 0x80
 800634a:	0391      	lsls	r1, r2, #14
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	4a46      	ldr	r2, [pc, #280]	@ (8006468 <UART_CheckIdleState+0x148>)
 8006350:	9200      	str	r2, [sp, #0]
 8006352:	2200      	movs	r2, #0
 8006354:	f000 f88c 	bl	8006470 <UART_WaitOnFlagUntilTimeout>
 8006358:	1e03      	subs	r3, r0, #0
 800635a:	d021      	beq.n	80063a0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800635c:	f3ef 8310 	mrs	r3, PRIMASK
 8006360:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006364:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006366:	2301      	movs	r3, #1
 8006368:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636c:	f383 8810 	msr	PRIMASK, r3
}
 8006370:	46c0      	nop			@ (mov r8, r8)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2180      	movs	r1, #128	@ 0x80
 800637e:	438a      	bics	r2, r1
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006384:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006388:	f383 8810 	msr	PRIMASK, r3
}
 800638c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2220      	movs	r2, #32
 8006392:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2278      	movs	r2, #120	@ 0x78
 8006398:	2100      	movs	r1, #0
 800639a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e05f      	b.n	8006460 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2204      	movs	r2, #4
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d146      	bne.n	800643c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063b0:	2280      	movs	r2, #128	@ 0x80
 80063b2:	03d1      	lsls	r1, r2, #15
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006468 <UART_CheckIdleState+0x148>)
 80063b8:	9200      	str	r2, [sp, #0]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f000 f858 	bl	8006470 <UART_WaitOnFlagUntilTimeout>
 80063c0:	1e03      	subs	r3, r0, #0
 80063c2:	d03b      	beq.n	800643c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063c4:	f3ef 8310 	mrs	r3, PRIMASK
 80063c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80063ca:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ce:	2301      	movs	r3, #1
 80063d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f383 8810 	msr	PRIMASK, r3
}
 80063d8:	46c0      	nop			@ (mov r8, r8)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4921      	ldr	r1, [pc, #132]	@ (800646c <UART_CheckIdleState+0x14c>)
 80063e6:	400a      	ands	r2, r1
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f383 8810 	msr	PRIMASK, r3
}
 80063f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063f6:	f3ef 8310 	mrs	r3, PRIMASK
 80063fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80063fc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006400:	2301      	movs	r3, #1
 8006402:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f383 8810 	msr	PRIMASK, r3
}
 800640a:	46c0      	nop			@ (mov r8, r8)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2101      	movs	r1, #1
 8006418:	438a      	bics	r2, r1
 800641a:	609a      	str	r2, [r3, #8]
 800641c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	f383 8810 	msr	PRIMASK, r3
}
 8006426:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2280      	movs	r2, #128	@ 0x80
 800642c:	2120      	movs	r1, #32
 800642e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2278      	movs	r2, #120	@ 0x78
 8006434:	2100      	movs	r1, #0
 8006436:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e011      	b.n	8006460 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2280      	movs	r2, #128	@ 0x80
 8006446:	2120      	movs	r1, #32
 8006448:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2278      	movs	r2, #120	@ 0x78
 800645a:	2100      	movs	r1, #0
 800645c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	0018      	movs	r0, r3
 8006462:	46bd      	mov	sp, r7
 8006464:	b010      	add	sp, #64	@ 0x40
 8006466:	bd80      	pop	{r7, pc}
 8006468:	01ffffff 	.word	0x01ffffff
 800646c:	fffffedf 	.word	0xfffffedf

08006470 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	1dfb      	adds	r3, r7, #7
 800647e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006480:	e051      	b.n	8006526 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	3301      	adds	r3, #1
 8006486:	d04e      	beq.n	8006526 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006488:	f7fc fbd2 	bl	8002c30 <HAL_GetTick>
 800648c:	0002      	movs	r2, r0
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	429a      	cmp	r2, r3
 8006496:	d302      	bcc.n	800649e <UART_WaitOnFlagUntilTimeout+0x2e>
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e051      	b.n	8006546 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2204      	movs	r2, #4
 80064aa:	4013      	ands	r3, r2
 80064ac:	d03b      	beq.n	8006526 <UART_WaitOnFlagUntilTimeout+0xb6>
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b80      	cmp	r3, #128	@ 0x80
 80064b2:	d038      	beq.n	8006526 <UART_WaitOnFlagUntilTimeout+0xb6>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b40      	cmp	r3, #64	@ 0x40
 80064b8:	d035      	beq.n	8006526 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	2208      	movs	r2, #8
 80064c2:	4013      	ands	r3, r2
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d111      	bne.n	80064ec <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2208      	movs	r2, #8
 80064ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	0018      	movs	r0, r3
 80064d4:	f000 f8f2 	bl	80066bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2284      	movs	r2, #132	@ 0x84
 80064dc:	2108      	movs	r1, #8
 80064de:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2278      	movs	r2, #120	@ 0x78
 80064e4:	2100      	movs	r1, #0
 80064e6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e02c      	b.n	8006546 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	69da      	ldr	r2, [r3, #28]
 80064f2:	2380      	movs	r3, #128	@ 0x80
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	401a      	ands	r2, r3
 80064f8:	2380      	movs	r3, #128	@ 0x80
 80064fa:	011b      	lsls	r3, r3, #4
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d112      	bne.n	8006526 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2280      	movs	r2, #128	@ 0x80
 8006506:	0112      	lsls	r2, r2, #4
 8006508:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	0018      	movs	r0, r3
 800650e:	f000 f8d5 	bl	80066bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2284      	movs	r2, #132	@ 0x84
 8006516:	2120      	movs	r1, #32
 8006518:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2278      	movs	r2, #120	@ 0x78
 800651e:	2100      	movs	r1, #0
 8006520:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e00f      	b.n	8006546 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	4013      	ands	r3, r2
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	425a      	negs	r2, r3
 8006536:	4153      	adcs	r3, r2
 8006538:	b2db      	uxtb	r3, r3
 800653a:	001a      	movs	r2, r3
 800653c:	1dfb      	adds	r3, r7, #7
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	429a      	cmp	r2, r3
 8006542:	d09e      	beq.n	8006482 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	0018      	movs	r0, r3
 8006548:	46bd      	mov	sp, r7
 800654a:	b004      	add	sp, #16
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b090      	sub	sp, #64	@ 0x40
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	1dbb      	adds	r3, r7, #6
 800655c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	1dba      	adds	r2, r7, #6
 8006568:	2158      	movs	r1, #88	@ 0x58
 800656a:	8812      	ldrh	r2, [r2, #0]
 800656c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	1dba      	adds	r2, r7, #6
 8006572:	215a      	movs	r1, #90	@ 0x5a
 8006574:	8812      	ldrh	r2, [r2, #0]
 8006576:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	2380      	movs	r3, #128	@ 0x80
 8006584:	015b      	lsls	r3, r3, #5
 8006586:	429a      	cmp	r2, r3
 8006588:	d10d      	bne.n	80065a6 <UART_Start_Receive_IT+0x56>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d104      	bne.n	800659c <UART_Start_Receive_IT+0x4c>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	225c      	movs	r2, #92	@ 0x5c
 8006596:	4946      	ldr	r1, [pc, #280]	@ (80066b0 <UART_Start_Receive_IT+0x160>)
 8006598:	5299      	strh	r1, [r3, r2]
 800659a:	e01a      	b.n	80065d2 <UART_Start_Receive_IT+0x82>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	225c      	movs	r2, #92	@ 0x5c
 80065a0:	21ff      	movs	r1, #255	@ 0xff
 80065a2:	5299      	strh	r1, [r3, r2]
 80065a4:	e015      	b.n	80065d2 <UART_Start_Receive_IT+0x82>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10d      	bne.n	80065ca <UART_Start_Receive_IT+0x7a>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d104      	bne.n	80065c0 <UART_Start_Receive_IT+0x70>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	225c      	movs	r2, #92	@ 0x5c
 80065ba:	21ff      	movs	r1, #255	@ 0xff
 80065bc:	5299      	strh	r1, [r3, r2]
 80065be:	e008      	b.n	80065d2 <UART_Start_Receive_IT+0x82>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	225c      	movs	r2, #92	@ 0x5c
 80065c4:	217f      	movs	r1, #127	@ 0x7f
 80065c6:	5299      	strh	r1, [r3, r2]
 80065c8:	e003      	b.n	80065d2 <UART_Start_Receive_IT+0x82>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	225c      	movs	r2, #92	@ 0x5c
 80065ce:	2100      	movs	r1, #0
 80065d0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2284      	movs	r2, #132	@ 0x84
 80065d6:	2100      	movs	r1, #0
 80065d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2280      	movs	r2, #128	@ 0x80
 80065de:	2122      	movs	r1, #34	@ 0x22
 80065e0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065e2:	f3ef 8310 	mrs	r3, PRIMASK
 80065e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80065e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065ec:	2301      	movs	r3, #1
 80065ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f2:	f383 8810 	msr	PRIMASK, r3
}
 80065f6:	46c0      	nop			@ (mov r8, r8)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2101      	movs	r1, #1
 8006604:	430a      	orrs	r2, r1
 8006606:	609a      	str	r2, [r3, #8]
 8006608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800660a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800660c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660e:	f383 8810 	msr	PRIMASK, r3
}
 8006612:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	2380      	movs	r3, #128	@ 0x80
 800661a:	015b      	lsls	r3, r3, #5
 800661c:	429a      	cmp	r2, r3
 800661e:	d107      	bne.n	8006630 <UART_Start_Receive_IT+0xe0>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d103      	bne.n	8006630 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4a22      	ldr	r2, [pc, #136]	@ (80066b4 <UART_Start_Receive_IT+0x164>)
 800662c:	669a      	str	r2, [r3, #104]	@ 0x68
 800662e:	e002      	b.n	8006636 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4a21      	ldr	r2, [pc, #132]	@ (80066b8 <UART_Start_Receive_IT+0x168>)
 8006634:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d019      	beq.n	8006672 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800663e:	f3ef 8310 	mrs	r3, PRIMASK
 8006642:	61fb      	str	r3, [r7, #28]
  return(result);
 8006644:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006646:	637b      	str	r3, [r7, #52]	@ 0x34
 8006648:	2301      	movs	r3, #1
 800664a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	f383 8810 	msr	PRIMASK, r3
}
 8006652:	46c0      	nop			@ (mov r8, r8)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2190      	movs	r1, #144	@ 0x90
 8006660:	0049      	lsls	r1, r1, #1
 8006662:	430a      	orrs	r2, r1
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006668:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666c:	f383 8810 	msr	PRIMASK, r3
}
 8006670:	e018      	b.n	80066a4 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006672:	f3ef 8310 	mrs	r3, PRIMASK
 8006676:	613b      	str	r3, [r7, #16]
  return(result);
 8006678:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800667a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800667c:	2301      	movs	r3, #1
 800667e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f383 8810 	msr	PRIMASK, r3
}
 8006686:	46c0      	nop			@ (mov r8, r8)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2120      	movs	r1, #32
 8006694:	430a      	orrs	r2, r1
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	f383 8810 	msr	PRIMASK, r3
}
 80066a2:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	0018      	movs	r0, r3
 80066a8:	46bd      	mov	sp, r7
 80066aa:	b010      	add	sp, #64	@ 0x40
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	46c0      	nop			@ (mov r8, r8)
 80066b0:	000001ff 	.word	0x000001ff
 80066b4:	080069c1 	.word	0x080069c1
 80066b8:	08006809 	.word	0x08006809

080066bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08e      	sub	sp, #56	@ 0x38
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066c4:	f3ef 8310 	mrs	r3, PRIMASK
 80066c8:	617b      	str	r3, [r7, #20]
  return(result);
 80066ca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ce:	2301      	movs	r3, #1
 80066d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	f383 8810 	msr	PRIMASK, r3
}
 80066d8:	46c0      	nop			@ (mov r8, r8)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4926      	ldr	r1, [pc, #152]	@ (8006780 <UART_EndRxTransfer+0xc4>)
 80066e6:	400a      	ands	r2, r1
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	f383 8810 	msr	PRIMASK, r3
}
 80066f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066f6:	f3ef 8310 	mrs	r3, PRIMASK
 80066fa:	623b      	str	r3, [r7, #32]
  return(result);
 80066fc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006700:	2301      	movs	r3, #1
 8006702:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006706:	f383 8810 	msr	PRIMASK, r3
}
 800670a:	46c0      	nop			@ (mov r8, r8)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2101      	movs	r1, #1
 8006718:	438a      	bics	r2, r1
 800671a:	609a      	str	r2, [r3, #8]
 800671c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006722:	f383 8810 	msr	PRIMASK, r3
}
 8006726:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800672c:	2b01      	cmp	r3, #1
 800672e:	d118      	bne.n	8006762 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006730:	f3ef 8310 	mrs	r3, PRIMASK
 8006734:	60bb      	str	r3, [r7, #8]
  return(result);
 8006736:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800673a:	2301      	movs	r3, #1
 800673c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f383 8810 	msr	PRIMASK, r3
}
 8006744:	46c0      	nop			@ (mov r8, r8)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2110      	movs	r1, #16
 8006752:	438a      	bics	r2, r1
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006758:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f383 8810 	msr	PRIMASK, r3
}
 8006760:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2280      	movs	r2, #128	@ 0x80
 8006766:	2120      	movs	r1, #32
 8006768:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006776:	46c0      	nop			@ (mov r8, r8)
 8006778:	46bd      	mov	sp, r7
 800677a:	b00e      	add	sp, #56	@ 0x38
 800677c:	bd80      	pop	{r7, pc}
 800677e:	46c0      	nop			@ (mov r8, r8)
 8006780:	fffffedf 	.word	0xfffffedf

08006784 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006790:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	225a      	movs	r2, #90	@ 0x5a
 8006796:	2100      	movs	r1, #0
 8006798:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2252      	movs	r2, #82	@ 0x52
 800679e:	2100      	movs	r1, #0
 80067a0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	0018      	movs	r0, r3
 80067a6:	f7ff fbb3 	bl	8005f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067aa:	46c0      	nop			@ (mov r8, r8)
 80067ac:	46bd      	mov	sp, r7
 80067ae:	b004      	add	sp, #16
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b086      	sub	sp, #24
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ba:	f3ef 8310 	mrs	r3, PRIMASK
 80067be:	60bb      	str	r3, [r7, #8]
  return(result);
 80067c0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067c2:	617b      	str	r3, [r7, #20]
 80067c4:	2301      	movs	r3, #1
 80067c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f383 8810 	msr	PRIMASK, r3
}
 80067ce:	46c0      	nop			@ (mov r8, r8)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2140      	movs	r1, #64	@ 0x40
 80067dc:	438a      	bics	r2, r1
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f383 8810 	msr	PRIMASK, r3
}
 80067ea:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2220      	movs	r2, #32
 80067f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	0018      	movs	r0, r3
 80067fc:	f7ff fb80 	bl	8005f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006800:	46c0      	nop			@ (mov r8, r8)
 8006802:	46bd      	mov	sp, r7
 8006804:	b006      	add	sp, #24
 8006806:	bd80      	pop	{r7, pc}

08006808 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b094      	sub	sp, #80	@ 0x50
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006810:	204e      	movs	r0, #78	@ 0x4e
 8006812:	183b      	adds	r3, r7, r0
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	215c      	movs	r1, #92	@ 0x5c
 8006818:	5a52      	ldrh	r2, [r2, r1]
 800681a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2280      	movs	r2, #128	@ 0x80
 8006820:	589b      	ldr	r3, [r3, r2]
 8006822:	2b22      	cmp	r3, #34	@ 0x22
 8006824:	d000      	beq.n	8006828 <UART_RxISR_8BIT+0x20>
 8006826:	e0ba      	b.n	800699e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	214c      	movs	r1, #76	@ 0x4c
 800682e:	187b      	adds	r3, r7, r1
 8006830:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8006832:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006834:	187b      	adds	r3, r7, r1
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	b2da      	uxtb	r2, r3
 800683a:	183b      	adds	r3, r7, r0
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b2d9      	uxtb	r1, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006844:	400a      	ands	r2, r1
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	225a      	movs	r2, #90	@ 0x5a
 8006858:	5a9b      	ldrh	r3, [r3, r2]
 800685a:	b29b      	uxth	r3, r3
 800685c:	3b01      	subs	r3, #1
 800685e:	b299      	uxth	r1, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	225a      	movs	r2, #90	@ 0x5a
 8006864:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	225a      	movs	r2, #90	@ 0x5a
 800686a:	5a9b      	ldrh	r3, [r3, r2]
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d000      	beq.n	8006874 <UART_RxISR_8BIT+0x6c>
 8006872:	e09c      	b.n	80069ae <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006874:	f3ef 8310 	mrs	r3, PRIMASK
 8006878:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800687c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800687e:	2301      	movs	r3, #1
 8006880:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006884:	f383 8810 	msr	PRIMASK, r3
}
 8006888:	46c0      	nop			@ (mov r8, r8)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4948      	ldr	r1, [pc, #288]	@ (80069b8 <UART_RxISR_8BIT+0x1b0>)
 8006896:	400a      	ands	r2, r1
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800689c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800689e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a0:	f383 8810 	msr	PRIMASK, r3
}
 80068a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068a6:	f3ef 8310 	mrs	r3, PRIMASK
 80068aa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80068ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80068b0:	2301      	movs	r3, #1
 80068b2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b6:	f383 8810 	msr	PRIMASK, r3
}
 80068ba:	46c0      	nop			@ (mov r8, r8)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2101      	movs	r1, #1
 80068c8:	438a      	bics	r2, r1
 80068ca:	609a      	str	r2, [r3, #8]
 80068cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d2:	f383 8810 	msr	PRIMASK, r3
}
 80068d6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2280      	movs	r2, #128	@ 0x80
 80068dc:	2120      	movs	r1, #32
 80068de:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	2380      	movs	r3, #128	@ 0x80
 80068f4:	041b      	lsls	r3, r3, #16
 80068f6:	4013      	ands	r3, r2
 80068f8:	d018      	beq.n	800692c <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068fa:	f3ef 8310 	mrs	r3, PRIMASK
 80068fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8006900:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006902:	643b      	str	r3, [r7, #64]	@ 0x40
 8006904:	2301      	movs	r3, #1
 8006906:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	f383 8810 	msr	PRIMASK, r3
}
 800690e:	46c0      	nop			@ (mov r8, r8)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4928      	ldr	r1, [pc, #160]	@ (80069bc <UART_RxISR_8BIT+0x1b4>)
 800691c:	400a      	ands	r2, r1
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006922:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	f383 8810 	msr	PRIMASK, r3
}
 800692a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006930:	2b01      	cmp	r3, #1
 8006932:	d12f      	bne.n	8006994 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800693a:	f3ef 8310 	mrs	r3, PRIMASK
 800693e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006940:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006942:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006944:	2301      	movs	r3, #1
 8006946:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f383 8810 	msr	PRIMASK, r3
}
 800694e:	46c0      	nop			@ (mov r8, r8)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2110      	movs	r1, #16
 800695c:	438a      	bics	r2, r1
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006962:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f383 8810 	msr	PRIMASK, r3
}
 800696a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	2210      	movs	r2, #16
 8006974:	4013      	ands	r3, r2
 8006976:	2b10      	cmp	r3, #16
 8006978:	d103      	bne.n	8006982 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2210      	movs	r2, #16
 8006980:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2258      	movs	r2, #88	@ 0x58
 8006986:	5a9a      	ldrh	r2, [r3, r2]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	0011      	movs	r1, r2
 800698c:	0018      	movs	r0, r3
 800698e:	f7ff fac7 	bl	8005f20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006992:	e00c      	b.n	80069ae <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	0018      	movs	r0, r3
 8006998:	f7fb fe86 	bl	80026a8 <HAL_UART_RxCpltCallback>
}
 800699c:	e007      	b.n	80069ae <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	699a      	ldr	r2, [r3, #24]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2108      	movs	r1, #8
 80069aa:	430a      	orrs	r2, r1
 80069ac:	619a      	str	r2, [r3, #24]
}
 80069ae:	46c0      	nop			@ (mov r8, r8)
 80069b0:	46bd      	mov	sp, r7
 80069b2:	b014      	add	sp, #80	@ 0x50
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	46c0      	nop			@ (mov r8, r8)
 80069b8:	fffffedf 	.word	0xfffffedf
 80069bc:	fbffffff 	.word	0xfbffffff

080069c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b094      	sub	sp, #80	@ 0x50
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80069c8:	204e      	movs	r0, #78	@ 0x4e
 80069ca:	183b      	adds	r3, r7, r0
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	215c      	movs	r1, #92	@ 0x5c
 80069d0:	5a52      	ldrh	r2, [r2, r1]
 80069d2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2280      	movs	r2, #128	@ 0x80
 80069d8:	589b      	ldr	r3, [r3, r2]
 80069da:	2b22      	cmp	r3, #34	@ 0x22
 80069dc:	d000      	beq.n	80069e0 <UART_RxISR_16BIT+0x20>
 80069de:	e0ba      	b.n	8006b56 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	214c      	movs	r1, #76	@ 0x4c
 80069e6:	187b      	adds	r3, r7, r1
 80069e8:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80069ea:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80069f2:	187b      	adds	r3, r7, r1
 80069f4:	183a      	adds	r2, r7, r0
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	8812      	ldrh	r2, [r2, #0]
 80069fa:	4013      	ands	r3, r2
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a06:	1c9a      	adds	r2, r3, #2
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	225a      	movs	r2, #90	@ 0x5a
 8006a10:	5a9b      	ldrh	r3, [r3, r2]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b299      	uxth	r1, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	225a      	movs	r2, #90	@ 0x5a
 8006a1c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	225a      	movs	r2, #90	@ 0x5a
 8006a22:	5a9b      	ldrh	r3, [r3, r2]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d000      	beq.n	8006a2c <UART_RxISR_16BIT+0x6c>
 8006a2a:	e09c      	b.n	8006b66 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a30:	623b      	str	r3, [r7, #32]
  return(result);
 8006a32:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a36:	2301      	movs	r3, #1
 8006a38:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3c:	f383 8810 	msr	PRIMASK, r3
}
 8006a40:	46c0      	nop			@ (mov r8, r8)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4948      	ldr	r1, [pc, #288]	@ (8006b70 <UART_RxISR_16BIT+0x1b0>)
 8006a4e:	400a      	ands	r2, r1
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a58:	f383 8810 	msr	PRIMASK, r3
}
 8006a5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8006a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a66:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a68:	2301      	movs	r3, #1
 8006a6a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6e:	f383 8810 	msr	PRIMASK, r3
}
 8006a72:	46c0      	nop			@ (mov r8, r8)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2101      	movs	r1, #1
 8006a80:	438a      	bics	r2, r1
 8006a82:	609a      	str	r2, [r3, #8]
 8006a84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a86:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8a:	f383 8810 	msr	PRIMASK, r3
}
 8006a8e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2280      	movs	r2, #128	@ 0x80
 8006a94:	2120      	movs	r1, #32
 8006a96:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	2380      	movs	r3, #128	@ 0x80
 8006aac:	041b      	lsls	r3, r3, #16
 8006aae:	4013      	ands	r3, r2
 8006ab0:	d018      	beq.n	8006ae4 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ab2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ab6:	617b      	str	r3, [r7, #20]
  return(result);
 8006ab8:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006abc:	2301      	movs	r3, #1
 8006abe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	f383 8810 	msr	PRIMASK, r3
}
 8006ac6:	46c0      	nop			@ (mov r8, r8)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4928      	ldr	r1, [pc, #160]	@ (8006b74 <UART_RxISR_16BIT+0x1b4>)
 8006ad4:	400a      	ands	r2, r1
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ada:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	f383 8810 	msr	PRIMASK, r3
}
 8006ae2:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d12f      	bne.n	8006b4c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006af2:	f3ef 8310 	mrs	r3, PRIMASK
 8006af6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006af8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006afc:	2301      	movs	r3, #1
 8006afe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f383 8810 	msr	PRIMASK, r3
}
 8006b06:	46c0      	nop			@ (mov r8, r8)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2110      	movs	r1, #16
 8006b14:	438a      	bics	r2, r1
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f383 8810 	msr	PRIMASK, r3
}
 8006b22:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	2210      	movs	r2, #16
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	2b10      	cmp	r3, #16
 8006b30:	d103      	bne.n	8006b3a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2210      	movs	r2, #16
 8006b38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2258      	movs	r2, #88	@ 0x58
 8006b3e:	5a9a      	ldrh	r2, [r3, r2]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	0011      	movs	r1, r2
 8006b44:	0018      	movs	r0, r3
 8006b46:	f7ff f9eb 	bl	8005f20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b4a:	e00c      	b.n	8006b66 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	0018      	movs	r0, r3
 8006b50:	f7fb fdaa 	bl	80026a8 <HAL_UART_RxCpltCallback>
}
 8006b54:	e007      	b.n	8006b66 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	699a      	ldr	r2, [r3, #24]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2108      	movs	r1, #8
 8006b62:	430a      	orrs	r2, r1
 8006b64:	619a      	str	r2, [r3, #24]
}
 8006b66:	46c0      	nop			@ (mov r8, r8)
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	b014      	add	sp, #80	@ 0x50
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	46c0      	nop			@ (mov r8, r8)
 8006b70:	fffffedf 	.word	0xfffffedf
 8006b74:	fbffffff 	.word	0xfbffffff

08006b78 <ParsePacket>:
 */
#include "parser.h"

/*Uart Buffer's parser function*/
HAL_StatusTypeDef ParsePacket(char* Packet)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
	if((Packet[0] != '$') || (Packet[1] != ';'))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	2b24      	cmp	r3, #36	@ 0x24
 8006b86:	d104      	bne.n	8006b92 <ParsePacket+0x1a>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	2b3b      	cmp	r3, #59	@ 0x3b
 8006b90:	d001      	beq.n	8006b96 <ParsePacket+0x1e>
	{
		return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e013      	b.n	8006bbe <ParsePacket+0x46>
	}
	if((Packet[5] != ',') || (Packet[9] != ';'))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3305      	adds	r3, #5
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	2b2c      	cmp	r3, #44	@ 0x2c
 8006b9e:	d104      	bne.n	8006baa <ParsePacket+0x32>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	3309      	adds	r3, #9
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	2b3b      	cmp	r3, #59	@ 0x3b
 8006ba8:	d001      	beq.n	8006bae <ParsePacket+0x36>
	{
		return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e007      	b.n	8006bbe <ParsePacket+0x46>
	}
	if((Packet[10] != '!'))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	330a      	adds	r3, #10
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b21      	cmp	r3, #33	@ 0x21
 8006bb6:	d001      	beq.n	8006bbc <ParsePacket+0x44>
	{
		return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <ParsePacket+0x46>
	}

	return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b002      	add	sp, #8
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <siprintf>:
 8006bc8:	b40e      	push	{r1, r2, r3}
 8006bca:	b510      	push	{r4, lr}
 8006bcc:	2400      	movs	r4, #0
 8006bce:	490c      	ldr	r1, [pc, #48]	@ (8006c00 <siprintf+0x38>)
 8006bd0:	b09d      	sub	sp, #116	@ 0x74
 8006bd2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006bd4:	9002      	str	r0, [sp, #8]
 8006bd6:	9006      	str	r0, [sp, #24]
 8006bd8:	9107      	str	r1, [sp, #28]
 8006bda:	9104      	str	r1, [sp, #16]
 8006bdc:	4809      	ldr	r0, [pc, #36]	@ (8006c04 <siprintf+0x3c>)
 8006bde:	490a      	ldr	r1, [pc, #40]	@ (8006c08 <siprintf+0x40>)
 8006be0:	cb04      	ldmia	r3!, {r2}
 8006be2:	9105      	str	r1, [sp, #20]
 8006be4:	6800      	ldr	r0, [r0, #0]
 8006be6:	a902      	add	r1, sp, #8
 8006be8:	9301      	str	r3, [sp, #4]
 8006bea:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006bec:	f000 f9a8 	bl	8006f40 <_svfiprintf_r>
 8006bf0:	9b02      	ldr	r3, [sp, #8]
 8006bf2:	701c      	strb	r4, [r3, #0]
 8006bf4:	b01d      	add	sp, #116	@ 0x74
 8006bf6:	bc10      	pop	{r4}
 8006bf8:	bc08      	pop	{r3}
 8006bfa:	b003      	add	sp, #12
 8006bfc:	4718      	bx	r3
 8006bfe:	46c0      	nop			@ (mov r8, r8)
 8006c00:	7fffffff 	.word	0x7fffffff
 8006c04:	20000010 	.word	0x20000010
 8006c08:	ffff0208 	.word	0xffff0208

08006c0c <memset>:
 8006c0c:	0003      	movs	r3, r0
 8006c0e:	1882      	adds	r2, r0, r2
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d100      	bne.n	8006c16 <memset+0xa>
 8006c14:	4770      	bx	lr
 8006c16:	7019      	strb	r1, [r3, #0]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	e7f9      	b.n	8006c10 <memset+0x4>

08006c1c <__errno>:
 8006c1c:	4b01      	ldr	r3, [pc, #4]	@ (8006c24 <__errno+0x8>)
 8006c1e:	6818      	ldr	r0, [r3, #0]
 8006c20:	4770      	bx	lr
 8006c22:	46c0      	nop			@ (mov r8, r8)
 8006c24:	20000010 	.word	0x20000010

08006c28 <__libc_init_array>:
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	2600      	movs	r6, #0
 8006c2c:	4c0c      	ldr	r4, [pc, #48]	@ (8006c60 <__libc_init_array+0x38>)
 8006c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8006c64 <__libc_init_array+0x3c>)
 8006c30:	1b64      	subs	r4, r4, r5
 8006c32:	10a4      	asrs	r4, r4, #2
 8006c34:	42a6      	cmp	r6, r4
 8006c36:	d109      	bne.n	8006c4c <__libc_init_array+0x24>
 8006c38:	2600      	movs	r6, #0
 8006c3a:	f000 fc63 	bl	8007504 <_init>
 8006c3e:	4c0a      	ldr	r4, [pc, #40]	@ (8006c68 <__libc_init_array+0x40>)
 8006c40:	4d0a      	ldr	r5, [pc, #40]	@ (8006c6c <__libc_init_array+0x44>)
 8006c42:	1b64      	subs	r4, r4, r5
 8006c44:	10a4      	asrs	r4, r4, #2
 8006c46:	42a6      	cmp	r6, r4
 8006c48:	d105      	bne.n	8006c56 <__libc_init_array+0x2e>
 8006c4a:	bd70      	pop	{r4, r5, r6, pc}
 8006c4c:	00b3      	lsls	r3, r6, #2
 8006c4e:	58eb      	ldr	r3, [r5, r3]
 8006c50:	4798      	blx	r3
 8006c52:	3601      	adds	r6, #1
 8006c54:	e7ee      	b.n	8006c34 <__libc_init_array+0xc>
 8006c56:	00b3      	lsls	r3, r6, #2
 8006c58:	58eb      	ldr	r3, [r5, r3]
 8006c5a:	4798      	blx	r3
 8006c5c:	3601      	adds	r6, #1
 8006c5e:	e7f2      	b.n	8006c46 <__libc_init_array+0x1e>
 8006c60:	080075dc 	.word	0x080075dc
 8006c64:	080075dc 	.word	0x080075dc
 8006c68:	080075e0 	.word	0x080075e0
 8006c6c:	080075dc 	.word	0x080075dc

08006c70 <__retarget_lock_acquire_recursive>:
 8006c70:	4770      	bx	lr

08006c72 <__retarget_lock_release_recursive>:
 8006c72:	4770      	bx	lr

08006c74 <memcpy>:
 8006c74:	2300      	movs	r3, #0
 8006c76:	b510      	push	{r4, lr}
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d100      	bne.n	8006c7e <memcpy+0xa>
 8006c7c:	bd10      	pop	{r4, pc}
 8006c7e:	5ccc      	ldrb	r4, [r1, r3]
 8006c80:	54c4      	strb	r4, [r0, r3]
 8006c82:	3301      	adds	r3, #1
 8006c84:	e7f8      	b.n	8006c78 <memcpy+0x4>
	...

08006c88 <_free_r>:
 8006c88:	b570      	push	{r4, r5, r6, lr}
 8006c8a:	0005      	movs	r5, r0
 8006c8c:	1e0c      	subs	r4, r1, #0
 8006c8e:	d010      	beq.n	8006cb2 <_free_r+0x2a>
 8006c90:	3c04      	subs	r4, #4
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	da00      	bge.n	8006c9a <_free_r+0x12>
 8006c98:	18e4      	adds	r4, r4, r3
 8006c9a:	0028      	movs	r0, r5
 8006c9c:	f000 f8e0 	bl	8006e60 <__malloc_lock>
 8006ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d18 <_free_r+0x90>)
 8006ca2:	6813      	ldr	r3, [r2, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d105      	bne.n	8006cb4 <_free_r+0x2c>
 8006ca8:	6063      	str	r3, [r4, #4]
 8006caa:	6014      	str	r4, [r2, #0]
 8006cac:	0028      	movs	r0, r5
 8006cae:	f000 f8df 	bl	8006e70 <__malloc_unlock>
 8006cb2:	bd70      	pop	{r4, r5, r6, pc}
 8006cb4:	42a3      	cmp	r3, r4
 8006cb6:	d908      	bls.n	8006cca <_free_r+0x42>
 8006cb8:	6820      	ldr	r0, [r4, #0]
 8006cba:	1821      	adds	r1, r4, r0
 8006cbc:	428b      	cmp	r3, r1
 8006cbe:	d1f3      	bne.n	8006ca8 <_free_r+0x20>
 8006cc0:	6819      	ldr	r1, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	1809      	adds	r1, r1, r0
 8006cc6:	6021      	str	r1, [r4, #0]
 8006cc8:	e7ee      	b.n	8006ca8 <_free_r+0x20>
 8006cca:	001a      	movs	r2, r3
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <_free_r+0x4e>
 8006cd2:	42a3      	cmp	r3, r4
 8006cd4:	d9f9      	bls.n	8006cca <_free_r+0x42>
 8006cd6:	6811      	ldr	r1, [r2, #0]
 8006cd8:	1850      	adds	r0, r2, r1
 8006cda:	42a0      	cmp	r0, r4
 8006cdc:	d10b      	bne.n	8006cf6 <_free_r+0x6e>
 8006cde:	6820      	ldr	r0, [r4, #0]
 8006ce0:	1809      	adds	r1, r1, r0
 8006ce2:	1850      	adds	r0, r2, r1
 8006ce4:	6011      	str	r1, [r2, #0]
 8006ce6:	4283      	cmp	r3, r0
 8006ce8:	d1e0      	bne.n	8006cac <_free_r+0x24>
 8006cea:	6818      	ldr	r0, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	1841      	adds	r1, r0, r1
 8006cf0:	6011      	str	r1, [r2, #0]
 8006cf2:	6053      	str	r3, [r2, #4]
 8006cf4:	e7da      	b.n	8006cac <_free_r+0x24>
 8006cf6:	42a0      	cmp	r0, r4
 8006cf8:	d902      	bls.n	8006d00 <_free_r+0x78>
 8006cfa:	230c      	movs	r3, #12
 8006cfc:	602b      	str	r3, [r5, #0]
 8006cfe:	e7d5      	b.n	8006cac <_free_r+0x24>
 8006d00:	6820      	ldr	r0, [r4, #0]
 8006d02:	1821      	adds	r1, r4, r0
 8006d04:	428b      	cmp	r3, r1
 8006d06:	d103      	bne.n	8006d10 <_free_r+0x88>
 8006d08:	6819      	ldr	r1, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	1809      	adds	r1, r1, r0
 8006d0e:	6021      	str	r1, [r4, #0]
 8006d10:	6063      	str	r3, [r4, #4]
 8006d12:	6054      	str	r4, [r2, #4]
 8006d14:	e7ca      	b.n	8006cac <_free_r+0x24>
 8006d16:	46c0      	nop			@ (mov r8, r8)
 8006d18:	20000424 	.word	0x20000424

08006d1c <sbrk_aligned>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	4e0f      	ldr	r6, [pc, #60]	@ (8006d5c <sbrk_aligned+0x40>)
 8006d20:	000d      	movs	r5, r1
 8006d22:	6831      	ldr	r1, [r6, #0]
 8006d24:	0004      	movs	r4, r0
 8006d26:	2900      	cmp	r1, #0
 8006d28:	d102      	bne.n	8006d30 <sbrk_aligned+0x14>
 8006d2a:	f000 fb95 	bl	8007458 <_sbrk_r>
 8006d2e:	6030      	str	r0, [r6, #0]
 8006d30:	0029      	movs	r1, r5
 8006d32:	0020      	movs	r0, r4
 8006d34:	f000 fb90 	bl	8007458 <_sbrk_r>
 8006d38:	1c43      	adds	r3, r0, #1
 8006d3a:	d103      	bne.n	8006d44 <sbrk_aligned+0x28>
 8006d3c:	2501      	movs	r5, #1
 8006d3e:	426d      	negs	r5, r5
 8006d40:	0028      	movs	r0, r5
 8006d42:	bd70      	pop	{r4, r5, r6, pc}
 8006d44:	2303      	movs	r3, #3
 8006d46:	1cc5      	adds	r5, r0, #3
 8006d48:	439d      	bics	r5, r3
 8006d4a:	42a8      	cmp	r0, r5
 8006d4c:	d0f8      	beq.n	8006d40 <sbrk_aligned+0x24>
 8006d4e:	1a29      	subs	r1, r5, r0
 8006d50:	0020      	movs	r0, r4
 8006d52:	f000 fb81 	bl	8007458 <_sbrk_r>
 8006d56:	3001      	adds	r0, #1
 8006d58:	d1f2      	bne.n	8006d40 <sbrk_aligned+0x24>
 8006d5a:	e7ef      	b.n	8006d3c <sbrk_aligned+0x20>
 8006d5c:	20000420 	.word	0x20000420

08006d60 <_malloc_r>:
 8006d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d62:	2203      	movs	r2, #3
 8006d64:	1ccb      	adds	r3, r1, #3
 8006d66:	4393      	bics	r3, r2
 8006d68:	3308      	adds	r3, #8
 8006d6a:	0005      	movs	r5, r0
 8006d6c:	001f      	movs	r7, r3
 8006d6e:	2b0c      	cmp	r3, #12
 8006d70:	d234      	bcs.n	8006ddc <_malloc_r+0x7c>
 8006d72:	270c      	movs	r7, #12
 8006d74:	42b9      	cmp	r1, r7
 8006d76:	d833      	bhi.n	8006de0 <_malloc_r+0x80>
 8006d78:	0028      	movs	r0, r5
 8006d7a:	f000 f871 	bl	8006e60 <__malloc_lock>
 8006d7e:	4e37      	ldr	r6, [pc, #220]	@ (8006e5c <_malloc_r+0xfc>)
 8006d80:	6833      	ldr	r3, [r6, #0]
 8006d82:	001c      	movs	r4, r3
 8006d84:	2c00      	cmp	r4, #0
 8006d86:	d12f      	bne.n	8006de8 <_malloc_r+0x88>
 8006d88:	0039      	movs	r1, r7
 8006d8a:	0028      	movs	r0, r5
 8006d8c:	f7ff ffc6 	bl	8006d1c <sbrk_aligned>
 8006d90:	0004      	movs	r4, r0
 8006d92:	1c43      	adds	r3, r0, #1
 8006d94:	d15f      	bne.n	8006e56 <_malloc_r+0xf6>
 8006d96:	6834      	ldr	r4, [r6, #0]
 8006d98:	9400      	str	r4, [sp, #0]
 8006d9a:	9b00      	ldr	r3, [sp, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d14a      	bne.n	8006e36 <_malloc_r+0xd6>
 8006da0:	2c00      	cmp	r4, #0
 8006da2:	d052      	beq.n	8006e4a <_malloc_r+0xea>
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	0028      	movs	r0, r5
 8006da8:	18e3      	adds	r3, r4, r3
 8006daa:	9900      	ldr	r1, [sp, #0]
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	f000 fb53 	bl	8007458 <_sbrk_r>
 8006db2:	9b01      	ldr	r3, [sp, #4]
 8006db4:	4283      	cmp	r3, r0
 8006db6:	d148      	bne.n	8006e4a <_malloc_r+0xea>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	0028      	movs	r0, r5
 8006dbc:	1aff      	subs	r7, r7, r3
 8006dbe:	0039      	movs	r1, r7
 8006dc0:	f7ff ffac 	bl	8006d1c <sbrk_aligned>
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d040      	beq.n	8006e4a <_malloc_r+0xea>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	19db      	adds	r3, r3, r7
 8006dcc:	6023      	str	r3, [r4, #0]
 8006dce:	6833      	ldr	r3, [r6, #0]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	2a00      	cmp	r2, #0
 8006dd4:	d133      	bne.n	8006e3e <_malloc_r+0xde>
 8006dd6:	9b00      	ldr	r3, [sp, #0]
 8006dd8:	6033      	str	r3, [r6, #0]
 8006dda:	e019      	b.n	8006e10 <_malloc_r+0xb0>
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	dac9      	bge.n	8006d74 <_malloc_r+0x14>
 8006de0:	230c      	movs	r3, #12
 8006de2:	602b      	str	r3, [r5, #0]
 8006de4:	2000      	movs	r0, #0
 8006de6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006de8:	6821      	ldr	r1, [r4, #0]
 8006dea:	1bc9      	subs	r1, r1, r7
 8006dec:	d420      	bmi.n	8006e30 <_malloc_r+0xd0>
 8006dee:	290b      	cmp	r1, #11
 8006df0:	d90a      	bls.n	8006e08 <_malloc_r+0xa8>
 8006df2:	19e2      	adds	r2, r4, r7
 8006df4:	6027      	str	r7, [r4, #0]
 8006df6:	42a3      	cmp	r3, r4
 8006df8:	d104      	bne.n	8006e04 <_malloc_r+0xa4>
 8006dfa:	6032      	str	r2, [r6, #0]
 8006dfc:	6863      	ldr	r3, [r4, #4]
 8006dfe:	6011      	str	r1, [r2, #0]
 8006e00:	6053      	str	r3, [r2, #4]
 8006e02:	e005      	b.n	8006e10 <_malloc_r+0xb0>
 8006e04:	605a      	str	r2, [r3, #4]
 8006e06:	e7f9      	b.n	8006dfc <_malloc_r+0x9c>
 8006e08:	6862      	ldr	r2, [r4, #4]
 8006e0a:	42a3      	cmp	r3, r4
 8006e0c:	d10e      	bne.n	8006e2c <_malloc_r+0xcc>
 8006e0e:	6032      	str	r2, [r6, #0]
 8006e10:	0028      	movs	r0, r5
 8006e12:	f000 f82d 	bl	8006e70 <__malloc_unlock>
 8006e16:	0020      	movs	r0, r4
 8006e18:	2207      	movs	r2, #7
 8006e1a:	300b      	adds	r0, #11
 8006e1c:	1d23      	adds	r3, r4, #4
 8006e1e:	4390      	bics	r0, r2
 8006e20:	1ac2      	subs	r2, r0, r3
 8006e22:	4298      	cmp	r0, r3
 8006e24:	d0df      	beq.n	8006de6 <_malloc_r+0x86>
 8006e26:	1a1b      	subs	r3, r3, r0
 8006e28:	50a3      	str	r3, [r4, r2]
 8006e2a:	e7dc      	b.n	8006de6 <_malloc_r+0x86>
 8006e2c:	605a      	str	r2, [r3, #4]
 8006e2e:	e7ef      	b.n	8006e10 <_malloc_r+0xb0>
 8006e30:	0023      	movs	r3, r4
 8006e32:	6864      	ldr	r4, [r4, #4]
 8006e34:	e7a6      	b.n	8006d84 <_malloc_r+0x24>
 8006e36:	9c00      	ldr	r4, [sp, #0]
 8006e38:	6863      	ldr	r3, [r4, #4]
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	e7ad      	b.n	8006d9a <_malloc_r+0x3a>
 8006e3e:	001a      	movs	r2, r3
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	42a3      	cmp	r3, r4
 8006e44:	d1fb      	bne.n	8006e3e <_malloc_r+0xde>
 8006e46:	2300      	movs	r3, #0
 8006e48:	e7da      	b.n	8006e00 <_malloc_r+0xa0>
 8006e4a:	230c      	movs	r3, #12
 8006e4c:	0028      	movs	r0, r5
 8006e4e:	602b      	str	r3, [r5, #0]
 8006e50:	f000 f80e 	bl	8006e70 <__malloc_unlock>
 8006e54:	e7c6      	b.n	8006de4 <_malloc_r+0x84>
 8006e56:	6007      	str	r7, [r0, #0]
 8006e58:	e7da      	b.n	8006e10 <_malloc_r+0xb0>
 8006e5a:	46c0      	nop			@ (mov r8, r8)
 8006e5c:	20000424 	.word	0x20000424

08006e60 <__malloc_lock>:
 8006e60:	b510      	push	{r4, lr}
 8006e62:	4802      	ldr	r0, [pc, #8]	@ (8006e6c <__malloc_lock+0xc>)
 8006e64:	f7ff ff04 	bl	8006c70 <__retarget_lock_acquire_recursive>
 8006e68:	bd10      	pop	{r4, pc}
 8006e6a:	46c0      	nop			@ (mov r8, r8)
 8006e6c:	2000041c 	.word	0x2000041c

08006e70 <__malloc_unlock>:
 8006e70:	b510      	push	{r4, lr}
 8006e72:	4802      	ldr	r0, [pc, #8]	@ (8006e7c <__malloc_unlock+0xc>)
 8006e74:	f7ff fefd 	bl	8006c72 <__retarget_lock_release_recursive>
 8006e78:	bd10      	pop	{r4, pc}
 8006e7a:	46c0      	nop			@ (mov r8, r8)
 8006e7c:	2000041c 	.word	0x2000041c

08006e80 <__ssputs_r>:
 8006e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e82:	688e      	ldr	r6, [r1, #8]
 8006e84:	b085      	sub	sp, #20
 8006e86:	001f      	movs	r7, r3
 8006e88:	000c      	movs	r4, r1
 8006e8a:	680b      	ldr	r3, [r1, #0]
 8006e8c:	9002      	str	r0, [sp, #8]
 8006e8e:	9203      	str	r2, [sp, #12]
 8006e90:	42be      	cmp	r6, r7
 8006e92:	d830      	bhi.n	8006ef6 <__ssputs_r+0x76>
 8006e94:	210c      	movs	r1, #12
 8006e96:	5e62      	ldrsh	r2, [r4, r1]
 8006e98:	2190      	movs	r1, #144	@ 0x90
 8006e9a:	00c9      	lsls	r1, r1, #3
 8006e9c:	420a      	tst	r2, r1
 8006e9e:	d028      	beq.n	8006ef2 <__ssputs_r+0x72>
 8006ea0:	2003      	movs	r0, #3
 8006ea2:	6921      	ldr	r1, [r4, #16]
 8006ea4:	1a5b      	subs	r3, r3, r1
 8006ea6:	9301      	str	r3, [sp, #4]
 8006ea8:	6963      	ldr	r3, [r4, #20]
 8006eaa:	4343      	muls	r3, r0
 8006eac:	9801      	ldr	r0, [sp, #4]
 8006eae:	0fdd      	lsrs	r5, r3, #31
 8006eb0:	18ed      	adds	r5, r5, r3
 8006eb2:	1c7b      	adds	r3, r7, #1
 8006eb4:	181b      	adds	r3, r3, r0
 8006eb6:	106d      	asrs	r5, r5, #1
 8006eb8:	42ab      	cmp	r3, r5
 8006eba:	d900      	bls.n	8006ebe <__ssputs_r+0x3e>
 8006ebc:	001d      	movs	r5, r3
 8006ebe:	0552      	lsls	r2, r2, #21
 8006ec0:	d528      	bpl.n	8006f14 <__ssputs_r+0x94>
 8006ec2:	0029      	movs	r1, r5
 8006ec4:	9802      	ldr	r0, [sp, #8]
 8006ec6:	f7ff ff4b 	bl	8006d60 <_malloc_r>
 8006eca:	1e06      	subs	r6, r0, #0
 8006ecc:	d02c      	beq.n	8006f28 <__ssputs_r+0xa8>
 8006ece:	9a01      	ldr	r2, [sp, #4]
 8006ed0:	6921      	ldr	r1, [r4, #16]
 8006ed2:	f7ff fecf 	bl	8006c74 <memcpy>
 8006ed6:	89a2      	ldrh	r2, [r4, #12]
 8006ed8:	4b18      	ldr	r3, [pc, #96]	@ (8006f3c <__ssputs_r+0xbc>)
 8006eda:	401a      	ands	r2, r3
 8006edc:	2380      	movs	r3, #128	@ 0x80
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	81a3      	strh	r3, [r4, #12]
 8006ee2:	9b01      	ldr	r3, [sp, #4]
 8006ee4:	6126      	str	r6, [r4, #16]
 8006ee6:	18f6      	adds	r6, r6, r3
 8006ee8:	6026      	str	r6, [r4, #0]
 8006eea:	003e      	movs	r6, r7
 8006eec:	6165      	str	r5, [r4, #20]
 8006eee:	1aed      	subs	r5, r5, r3
 8006ef0:	60a5      	str	r5, [r4, #8]
 8006ef2:	42be      	cmp	r6, r7
 8006ef4:	d900      	bls.n	8006ef8 <__ssputs_r+0x78>
 8006ef6:	003e      	movs	r6, r7
 8006ef8:	0032      	movs	r2, r6
 8006efa:	9903      	ldr	r1, [sp, #12]
 8006efc:	6820      	ldr	r0, [r4, #0]
 8006efe:	f000 fa99 	bl	8007434 <memmove>
 8006f02:	2000      	movs	r0, #0
 8006f04:	68a3      	ldr	r3, [r4, #8]
 8006f06:	1b9b      	subs	r3, r3, r6
 8006f08:	60a3      	str	r3, [r4, #8]
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	199b      	adds	r3, r3, r6
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	b005      	add	sp, #20
 8006f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f14:	002a      	movs	r2, r5
 8006f16:	9802      	ldr	r0, [sp, #8]
 8006f18:	f000 fabb 	bl	8007492 <_realloc_r>
 8006f1c:	1e06      	subs	r6, r0, #0
 8006f1e:	d1e0      	bne.n	8006ee2 <__ssputs_r+0x62>
 8006f20:	6921      	ldr	r1, [r4, #16]
 8006f22:	9802      	ldr	r0, [sp, #8]
 8006f24:	f7ff feb0 	bl	8006c88 <_free_r>
 8006f28:	230c      	movs	r3, #12
 8006f2a:	2001      	movs	r0, #1
 8006f2c:	9a02      	ldr	r2, [sp, #8]
 8006f2e:	4240      	negs	r0, r0
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	89a2      	ldrh	r2, [r4, #12]
 8006f34:	3334      	adds	r3, #52	@ 0x34
 8006f36:	4313      	orrs	r3, r2
 8006f38:	81a3      	strh	r3, [r4, #12]
 8006f3a:	e7e9      	b.n	8006f10 <__ssputs_r+0x90>
 8006f3c:	fffffb7f 	.word	0xfffffb7f

08006f40 <_svfiprintf_r>:
 8006f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f42:	b0a1      	sub	sp, #132	@ 0x84
 8006f44:	9003      	str	r0, [sp, #12]
 8006f46:	001d      	movs	r5, r3
 8006f48:	898b      	ldrh	r3, [r1, #12]
 8006f4a:	000f      	movs	r7, r1
 8006f4c:	0016      	movs	r6, r2
 8006f4e:	061b      	lsls	r3, r3, #24
 8006f50:	d511      	bpl.n	8006f76 <_svfiprintf_r+0x36>
 8006f52:	690b      	ldr	r3, [r1, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10e      	bne.n	8006f76 <_svfiprintf_r+0x36>
 8006f58:	2140      	movs	r1, #64	@ 0x40
 8006f5a:	f7ff ff01 	bl	8006d60 <_malloc_r>
 8006f5e:	6038      	str	r0, [r7, #0]
 8006f60:	6138      	str	r0, [r7, #16]
 8006f62:	2800      	cmp	r0, #0
 8006f64:	d105      	bne.n	8006f72 <_svfiprintf_r+0x32>
 8006f66:	230c      	movs	r3, #12
 8006f68:	9a03      	ldr	r2, [sp, #12]
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	2001      	movs	r0, #1
 8006f6e:	4240      	negs	r0, r0
 8006f70:	e0cf      	b.n	8007112 <_svfiprintf_r+0x1d2>
 8006f72:	2340      	movs	r3, #64	@ 0x40
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	2300      	movs	r3, #0
 8006f78:	ac08      	add	r4, sp, #32
 8006f7a:	6163      	str	r3, [r4, #20]
 8006f7c:	3320      	adds	r3, #32
 8006f7e:	7663      	strb	r3, [r4, #25]
 8006f80:	3310      	adds	r3, #16
 8006f82:	76a3      	strb	r3, [r4, #26]
 8006f84:	9507      	str	r5, [sp, #28]
 8006f86:	0035      	movs	r5, r6
 8006f88:	782b      	ldrb	r3, [r5, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <_svfiprintf_r+0x52>
 8006f8e:	2b25      	cmp	r3, #37	@ 0x25
 8006f90:	d148      	bne.n	8007024 <_svfiprintf_r+0xe4>
 8006f92:	1bab      	subs	r3, r5, r6
 8006f94:	9305      	str	r3, [sp, #20]
 8006f96:	42b5      	cmp	r5, r6
 8006f98:	d00b      	beq.n	8006fb2 <_svfiprintf_r+0x72>
 8006f9a:	0032      	movs	r2, r6
 8006f9c:	0039      	movs	r1, r7
 8006f9e:	9803      	ldr	r0, [sp, #12]
 8006fa0:	f7ff ff6e 	bl	8006e80 <__ssputs_r>
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d100      	bne.n	8006faa <_svfiprintf_r+0x6a>
 8006fa8:	e0ae      	b.n	8007108 <_svfiprintf_r+0x1c8>
 8006faa:	6963      	ldr	r3, [r4, #20]
 8006fac:	9a05      	ldr	r2, [sp, #20]
 8006fae:	189b      	adds	r3, r3, r2
 8006fb0:	6163      	str	r3, [r4, #20]
 8006fb2:	782b      	ldrb	r3, [r5, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d100      	bne.n	8006fba <_svfiprintf_r+0x7a>
 8006fb8:	e0a6      	b.n	8007108 <_svfiprintf_r+0x1c8>
 8006fba:	2201      	movs	r2, #1
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	4252      	negs	r2, r2
 8006fc0:	6062      	str	r2, [r4, #4]
 8006fc2:	a904      	add	r1, sp, #16
 8006fc4:	3254      	adds	r2, #84	@ 0x54
 8006fc6:	1852      	adds	r2, r2, r1
 8006fc8:	1c6e      	adds	r6, r5, #1
 8006fca:	6023      	str	r3, [r4, #0]
 8006fcc:	60e3      	str	r3, [r4, #12]
 8006fce:	60a3      	str	r3, [r4, #8]
 8006fd0:	7013      	strb	r3, [r2, #0]
 8006fd2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006fd4:	4b54      	ldr	r3, [pc, #336]	@ (8007128 <_svfiprintf_r+0x1e8>)
 8006fd6:	2205      	movs	r2, #5
 8006fd8:	0018      	movs	r0, r3
 8006fda:	7831      	ldrb	r1, [r6, #0]
 8006fdc:	9305      	str	r3, [sp, #20]
 8006fde:	f000 fa4d 	bl	800747c <memchr>
 8006fe2:	1c75      	adds	r5, r6, #1
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d11f      	bne.n	8007028 <_svfiprintf_r+0xe8>
 8006fe8:	6822      	ldr	r2, [r4, #0]
 8006fea:	06d3      	lsls	r3, r2, #27
 8006fec:	d504      	bpl.n	8006ff8 <_svfiprintf_r+0xb8>
 8006fee:	2353      	movs	r3, #83	@ 0x53
 8006ff0:	a904      	add	r1, sp, #16
 8006ff2:	185b      	adds	r3, r3, r1
 8006ff4:	2120      	movs	r1, #32
 8006ff6:	7019      	strb	r1, [r3, #0]
 8006ff8:	0713      	lsls	r3, r2, #28
 8006ffa:	d504      	bpl.n	8007006 <_svfiprintf_r+0xc6>
 8006ffc:	2353      	movs	r3, #83	@ 0x53
 8006ffe:	a904      	add	r1, sp, #16
 8007000:	185b      	adds	r3, r3, r1
 8007002:	212b      	movs	r1, #43	@ 0x2b
 8007004:	7019      	strb	r1, [r3, #0]
 8007006:	7833      	ldrb	r3, [r6, #0]
 8007008:	2b2a      	cmp	r3, #42	@ 0x2a
 800700a:	d016      	beq.n	800703a <_svfiprintf_r+0xfa>
 800700c:	0035      	movs	r5, r6
 800700e:	2100      	movs	r1, #0
 8007010:	200a      	movs	r0, #10
 8007012:	68e3      	ldr	r3, [r4, #12]
 8007014:	782a      	ldrb	r2, [r5, #0]
 8007016:	1c6e      	adds	r6, r5, #1
 8007018:	3a30      	subs	r2, #48	@ 0x30
 800701a:	2a09      	cmp	r2, #9
 800701c:	d950      	bls.n	80070c0 <_svfiprintf_r+0x180>
 800701e:	2900      	cmp	r1, #0
 8007020:	d111      	bne.n	8007046 <_svfiprintf_r+0x106>
 8007022:	e017      	b.n	8007054 <_svfiprintf_r+0x114>
 8007024:	3501      	adds	r5, #1
 8007026:	e7af      	b.n	8006f88 <_svfiprintf_r+0x48>
 8007028:	9b05      	ldr	r3, [sp, #20]
 800702a:	6822      	ldr	r2, [r4, #0]
 800702c:	1ac0      	subs	r0, r0, r3
 800702e:	2301      	movs	r3, #1
 8007030:	4083      	lsls	r3, r0
 8007032:	4313      	orrs	r3, r2
 8007034:	002e      	movs	r6, r5
 8007036:	6023      	str	r3, [r4, #0]
 8007038:	e7cc      	b.n	8006fd4 <_svfiprintf_r+0x94>
 800703a:	9b07      	ldr	r3, [sp, #28]
 800703c:	1d19      	adds	r1, r3, #4
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	9107      	str	r1, [sp, #28]
 8007042:	2b00      	cmp	r3, #0
 8007044:	db01      	blt.n	800704a <_svfiprintf_r+0x10a>
 8007046:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007048:	e004      	b.n	8007054 <_svfiprintf_r+0x114>
 800704a:	425b      	negs	r3, r3
 800704c:	60e3      	str	r3, [r4, #12]
 800704e:	2302      	movs	r3, #2
 8007050:	4313      	orrs	r3, r2
 8007052:	6023      	str	r3, [r4, #0]
 8007054:	782b      	ldrb	r3, [r5, #0]
 8007056:	2b2e      	cmp	r3, #46	@ 0x2e
 8007058:	d10c      	bne.n	8007074 <_svfiprintf_r+0x134>
 800705a:	786b      	ldrb	r3, [r5, #1]
 800705c:	2b2a      	cmp	r3, #42	@ 0x2a
 800705e:	d134      	bne.n	80070ca <_svfiprintf_r+0x18a>
 8007060:	9b07      	ldr	r3, [sp, #28]
 8007062:	3502      	adds	r5, #2
 8007064:	1d1a      	adds	r2, r3, #4
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	9207      	str	r2, [sp, #28]
 800706a:	2b00      	cmp	r3, #0
 800706c:	da01      	bge.n	8007072 <_svfiprintf_r+0x132>
 800706e:	2301      	movs	r3, #1
 8007070:	425b      	negs	r3, r3
 8007072:	9309      	str	r3, [sp, #36]	@ 0x24
 8007074:	4e2d      	ldr	r6, [pc, #180]	@ (800712c <_svfiprintf_r+0x1ec>)
 8007076:	2203      	movs	r2, #3
 8007078:	0030      	movs	r0, r6
 800707a:	7829      	ldrb	r1, [r5, #0]
 800707c:	f000 f9fe 	bl	800747c <memchr>
 8007080:	2800      	cmp	r0, #0
 8007082:	d006      	beq.n	8007092 <_svfiprintf_r+0x152>
 8007084:	2340      	movs	r3, #64	@ 0x40
 8007086:	1b80      	subs	r0, r0, r6
 8007088:	4083      	lsls	r3, r0
 800708a:	6822      	ldr	r2, [r4, #0]
 800708c:	3501      	adds	r5, #1
 800708e:	4313      	orrs	r3, r2
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	7829      	ldrb	r1, [r5, #0]
 8007094:	2206      	movs	r2, #6
 8007096:	4826      	ldr	r0, [pc, #152]	@ (8007130 <_svfiprintf_r+0x1f0>)
 8007098:	1c6e      	adds	r6, r5, #1
 800709a:	7621      	strb	r1, [r4, #24]
 800709c:	f000 f9ee 	bl	800747c <memchr>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d038      	beq.n	8007116 <_svfiprintf_r+0x1d6>
 80070a4:	4b23      	ldr	r3, [pc, #140]	@ (8007134 <_svfiprintf_r+0x1f4>)
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d122      	bne.n	80070f0 <_svfiprintf_r+0x1b0>
 80070aa:	2207      	movs	r2, #7
 80070ac:	9b07      	ldr	r3, [sp, #28]
 80070ae:	3307      	adds	r3, #7
 80070b0:	4393      	bics	r3, r2
 80070b2:	3308      	adds	r3, #8
 80070b4:	9307      	str	r3, [sp, #28]
 80070b6:	6963      	ldr	r3, [r4, #20]
 80070b8:	9a04      	ldr	r2, [sp, #16]
 80070ba:	189b      	adds	r3, r3, r2
 80070bc:	6163      	str	r3, [r4, #20]
 80070be:	e762      	b.n	8006f86 <_svfiprintf_r+0x46>
 80070c0:	4343      	muls	r3, r0
 80070c2:	0035      	movs	r5, r6
 80070c4:	2101      	movs	r1, #1
 80070c6:	189b      	adds	r3, r3, r2
 80070c8:	e7a4      	b.n	8007014 <_svfiprintf_r+0xd4>
 80070ca:	2300      	movs	r3, #0
 80070cc:	200a      	movs	r0, #10
 80070ce:	0019      	movs	r1, r3
 80070d0:	3501      	adds	r5, #1
 80070d2:	6063      	str	r3, [r4, #4]
 80070d4:	782a      	ldrb	r2, [r5, #0]
 80070d6:	1c6e      	adds	r6, r5, #1
 80070d8:	3a30      	subs	r2, #48	@ 0x30
 80070da:	2a09      	cmp	r2, #9
 80070dc:	d903      	bls.n	80070e6 <_svfiprintf_r+0x1a6>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0c8      	beq.n	8007074 <_svfiprintf_r+0x134>
 80070e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80070e4:	e7c6      	b.n	8007074 <_svfiprintf_r+0x134>
 80070e6:	4341      	muls	r1, r0
 80070e8:	0035      	movs	r5, r6
 80070ea:	2301      	movs	r3, #1
 80070ec:	1889      	adds	r1, r1, r2
 80070ee:	e7f1      	b.n	80070d4 <_svfiprintf_r+0x194>
 80070f0:	aa07      	add	r2, sp, #28
 80070f2:	9200      	str	r2, [sp, #0]
 80070f4:	0021      	movs	r1, r4
 80070f6:	003a      	movs	r2, r7
 80070f8:	4b0f      	ldr	r3, [pc, #60]	@ (8007138 <_svfiprintf_r+0x1f8>)
 80070fa:	9803      	ldr	r0, [sp, #12]
 80070fc:	e000      	b.n	8007100 <_svfiprintf_r+0x1c0>
 80070fe:	bf00      	nop
 8007100:	9004      	str	r0, [sp, #16]
 8007102:	9b04      	ldr	r3, [sp, #16]
 8007104:	3301      	adds	r3, #1
 8007106:	d1d6      	bne.n	80070b6 <_svfiprintf_r+0x176>
 8007108:	89bb      	ldrh	r3, [r7, #12]
 800710a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800710c:	065b      	lsls	r3, r3, #25
 800710e:	d500      	bpl.n	8007112 <_svfiprintf_r+0x1d2>
 8007110:	e72c      	b.n	8006f6c <_svfiprintf_r+0x2c>
 8007112:	b021      	add	sp, #132	@ 0x84
 8007114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007116:	aa07      	add	r2, sp, #28
 8007118:	9200      	str	r2, [sp, #0]
 800711a:	0021      	movs	r1, r4
 800711c:	003a      	movs	r2, r7
 800711e:	4b06      	ldr	r3, [pc, #24]	@ (8007138 <_svfiprintf_r+0x1f8>)
 8007120:	9803      	ldr	r0, [sp, #12]
 8007122:	f000 f87b 	bl	800721c <_printf_i>
 8007126:	e7eb      	b.n	8007100 <_svfiprintf_r+0x1c0>
 8007128:	080075a8 	.word	0x080075a8
 800712c:	080075ae 	.word	0x080075ae
 8007130:	080075b2 	.word	0x080075b2
 8007134:	00000000 	.word	0x00000000
 8007138:	08006e81 	.word	0x08006e81

0800713c <_printf_common>:
 800713c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800713e:	0016      	movs	r6, r2
 8007140:	9301      	str	r3, [sp, #4]
 8007142:	688a      	ldr	r2, [r1, #8]
 8007144:	690b      	ldr	r3, [r1, #16]
 8007146:	000c      	movs	r4, r1
 8007148:	9000      	str	r0, [sp, #0]
 800714a:	4293      	cmp	r3, r2
 800714c:	da00      	bge.n	8007150 <_printf_common+0x14>
 800714e:	0013      	movs	r3, r2
 8007150:	0022      	movs	r2, r4
 8007152:	6033      	str	r3, [r6, #0]
 8007154:	3243      	adds	r2, #67	@ 0x43
 8007156:	7812      	ldrb	r2, [r2, #0]
 8007158:	2a00      	cmp	r2, #0
 800715a:	d001      	beq.n	8007160 <_printf_common+0x24>
 800715c:	3301      	adds	r3, #1
 800715e:	6033      	str	r3, [r6, #0]
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	069b      	lsls	r3, r3, #26
 8007164:	d502      	bpl.n	800716c <_printf_common+0x30>
 8007166:	6833      	ldr	r3, [r6, #0]
 8007168:	3302      	adds	r3, #2
 800716a:	6033      	str	r3, [r6, #0]
 800716c:	6822      	ldr	r2, [r4, #0]
 800716e:	2306      	movs	r3, #6
 8007170:	0015      	movs	r5, r2
 8007172:	401d      	ands	r5, r3
 8007174:	421a      	tst	r2, r3
 8007176:	d027      	beq.n	80071c8 <_printf_common+0x8c>
 8007178:	0023      	movs	r3, r4
 800717a:	3343      	adds	r3, #67	@ 0x43
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	1e5a      	subs	r2, r3, #1
 8007180:	4193      	sbcs	r3, r2
 8007182:	6822      	ldr	r2, [r4, #0]
 8007184:	0692      	lsls	r2, r2, #26
 8007186:	d430      	bmi.n	80071ea <_printf_common+0xae>
 8007188:	0022      	movs	r2, r4
 800718a:	9901      	ldr	r1, [sp, #4]
 800718c:	9800      	ldr	r0, [sp, #0]
 800718e:	9d08      	ldr	r5, [sp, #32]
 8007190:	3243      	adds	r2, #67	@ 0x43
 8007192:	47a8      	blx	r5
 8007194:	3001      	adds	r0, #1
 8007196:	d025      	beq.n	80071e4 <_printf_common+0xa8>
 8007198:	2206      	movs	r2, #6
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	2500      	movs	r5, #0
 800719e:	4013      	ands	r3, r2
 80071a0:	2b04      	cmp	r3, #4
 80071a2:	d105      	bne.n	80071b0 <_printf_common+0x74>
 80071a4:	6833      	ldr	r3, [r6, #0]
 80071a6:	68e5      	ldr	r5, [r4, #12]
 80071a8:	1aed      	subs	r5, r5, r3
 80071aa:	43eb      	mvns	r3, r5
 80071ac:	17db      	asrs	r3, r3, #31
 80071ae:	401d      	ands	r5, r3
 80071b0:	68a3      	ldr	r3, [r4, #8]
 80071b2:	6922      	ldr	r2, [r4, #16]
 80071b4:	4293      	cmp	r3, r2
 80071b6:	dd01      	ble.n	80071bc <_printf_common+0x80>
 80071b8:	1a9b      	subs	r3, r3, r2
 80071ba:	18ed      	adds	r5, r5, r3
 80071bc:	2600      	movs	r6, #0
 80071be:	42b5      	cmp	r5, r6
 80071c0:	d120      	bne.n	8007204 <_printf_common+0xc8>
 80071c2:	2000      	movs	r0, #0
 80071c4:	e010      	b.n	80071e8 <_printf_common+0xac>
 80071c6:	3501      	adds	r5, #1
 80071c8:	68e3      	ldr	r3, [r4, #12]
 80071ca:	6832      	ldr	r2, [r6, #0]
 80071cc:	1a9b      	subs	r3, r3, r2
 80071ce:	42ab      	cmp	r3, r5
 80071d0:	ddd2      	ble.n	8007178 <_printf_common+0x3c>
 80071d2:	0022      	movs	r2, r4
 80071d4:	2301      	movs	r3, #1
 80071d6:	9901      	ldr	r1, [sp, #4]
 80071d8:	9800      	ldr	r0, [sp, #0]
 80071da:	9f08      	ldr	r7, [sp, #32]
 80071dc:	3219      	adds	r2, #25
 80071de:	47b8      	blx	r7
 80071e0:	3001      	adds	r0, #1
 80071e2:	d1f0      	bne.n	80071c6 <_printf_common+0x8a>
 80071e4:	2001      	movs	r0, #1
 80071e6:	4240      	negs	r0, r0
 80071e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071ea:	2030      	movs	r0, #48	@ 0x30
 80071ec:	18e1      	adds	r1, r4, r3
 80071ee:	3143      	adds	r1, #67	@ 0x43
 80071f0:	7008      	strb	r0, [r1, #0]
 80071f2:	0021      	movs	r1, r4
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	3145      	adds	r1, #69	@ 0x45
 80071f8:	7809      	ldrb	r1, [r1, #0]
 80071fa:	18a2      	adds	r2, r4, r2
 80071fc:	3243      	adds	r2, #67	@ 0x43
 80071fe:	3302      	adds	r3, #2
 8007200:	7011      	strb	r1, [r2, #0]
 8007202:	e7c1      	b.n	8007188 <_printf_common+0x4c>
 8007204:	0022      	movs	r2, r4
 8007206:	2301      	movs	r3, #1
 8007208:	9901      	ldr	r1, [sp, #4]
 800720a:	9800      	ldr	r0, [sp, #0]
 800720c:	9f08      	ldr	r7, [sp, #32]
 800720e:	321a      	adds	r2, #26
 8007210:	47b8      	blx	r7
 8007212:	3001      	adds	r0, #1
 8007214:	d0e6      	beq.n	80071e4 <_printf_common+0xa8>
 8007216:	3601      	adds	r6, #1
 8007218:	e7d1      	b.n	80071be <_printf_common+0x82>
	...

0800721c <_printf_i>:
 800721c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800721e:	b08b      	sub	sp, #44	@ 0x2c
 8007220:	9206      	str	r2, [sp, #24]
 8007222:	000a      	movs	r2, r1
 8007224:	3243      	adds	r2, #67	@ 0x43
 8007226:	9307      	str	r3, [sp, #28]
 8007228:	9005      	str	r0, [sp, #20]
 800722a:	9203      	str	r2, [sp, #12]
 800722c:	7e0a      	ldrb	r2, [r1, #24]
 800722e:	000c      	movs	r4, r1
 8007230:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007232:	2a78      	cmp	r2, #120	@ 0x78
 8007234:	d809      	bhi.n	800724a <_printf_i+0x2e>
 8007236:	2a62      	cmp	r2, #98	@ 0x62
 8007238:	d80b      	bhi.n	8007252 <_printf_i+0x36>
 800723a:	2a00      	cmp	r2, #0
 800723c:	d100      	bne.n	8007240 <_printf_i+0x24>
 800723e:	e0ba      	b.n	80073b6 <_printf_i+0x19a>
 8007240:	497a      	ldr	r1, [pc, #488]	@ (800742c <_printf_i+0x210>)
 8007242:	9104      	str	r1, [sp, #16]
 8007244:	2a58      	cmp	r2, #88	@ 0x58
 8007246:	d100      	bne.n	800724a <_printf_i+0x2e>
 8007248:	e08e      	b.n	8007368 <_printf_i+0x14c>
 800724a:	0025      	movs	r5, r4
 800724c:	3542      	adds	r5, #66	@ 0x42
 800724e:	702a      	strb	r2, [r5, #0]
 8007250:	e022      	b.n	8007298 <_printf_i+0x7c>
 8007252:	0010      	movs	r0, r2
 8007254:	3863      	subs	r0, #99	@ 0x63
 8007256:	2815      	cmp	r0, #21
 8007258:	d8f7      	bhi.n	800724a <_printf_i+0x2e>
 800725a:	f7f8 ff55 	bl	8000108 <__gnu_thumb1_case_shi>
 800725e:	0016      	.short	0x0016
 8007260:	fff6001f 	.word	0xfff6001f
 8007264:	fff6fff6 	.word	0xfff6fff6
 8007268:	001ffff6 	.word	0x001ffff6
 800726c:	fff6fff6 	.word	0xfff6fff6
 8007270:	fff6fff6 	.word	0xfff6fff6
 8007274:	0036009f 	.word	0x0036009f
 8007278:	fff6007e 	.word	0xfff6007e
 800727c:	00b0fff6 	.word	0x00b0fff6
 8007280:	0036fff6 	.word	0x0036fff6
 8007284:	fff6fff6 	.word	0xfff6fff6
 8007288:	0082      	.short	0x0082
 800728a:	0025      	movs	r5, r4
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	3542      	adds	r5, #66	@ 0x42
 8007290:	1d11      	adds	r1, r2, #4
 8007292:	6019      	str	r1, [r3, #0]
 8007294:	6813      	ldr	r3, [r2, #0]
 8007296:	702b      	strb	r3, [r5, #0]
 8007298:	2301      	movs	r3, #1
 800729a:	e09e      	b.n	80073da <_printf_i+0x1be>
 800729c:	6818      	ldr	r0, [r3, #0]
 800729e:	6809      	ldr	r1, [r1, #0]
 80072a0:	1d02      	adds	r2, r0, #4
 80072a2:	060d      	lsls	r5, r1, #24
 80072a4:	d50b      	bpl.n	80072be <_printf_i+0xa2>
 80072a6:	6806      	ldr	r6, [r0, #0]
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	2e00      	cmp	r6, #0
 80072ac:	da03      	bge.n	80072b6 <_printf_i+0x9a>
 80072ae:	232d      	movs	r3, #45	@ 0x2d
 80072b0:	9a03      	ldr	r2, [sp, #12]
 80072b2:	4276      	negs	r6, r6
 80072b4:	7013      	strb	r3, [r2, #0]
 80072b6:	4b5d      	ldr	r3, [pc, #372]	@ (800742c <_printf_i+0x210>)
 80072b8:	270a      	movs	r7, #10
 80072ba:	9304      	str	r3, [sp, #16]
 80072bc:	e018      	b.n	80072f0 <_printf_i+0xd4>
 80072be:	6806      	ldr	r6, [r0, #0]
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	0649      	lsls	r1, r1, #25
 80072c4:	d5f1      	bpl.n	80072aa <_printf_i+0x8e>
 80072c6:	b236      	sxth	r6, r6
 80072c8:	e7ef      	b.n	80072aa <_printf_i+0x8e>
 80072ca:	6808      	ldr	r0, [r1, #0]
 80072cc:	6819      	ldr	r1, [r3, #0]
 80072ce:	c940      	ldmia	r1!, {r6}
 80072d0:	0605      	lsls	r5, r0, #24
 80072d2:	d402      	bmi.n	80072da <_printf_i+0xbe>
 80072d4:	0640      	lsls	r0, r0, #25
 80072d6:	d500      	bpl.n	80072da <_printf_i+0xbe>
 80072d8:	b2b6      	uxth	r6, r6
 80072da:	6019      	str	r1, [r3, #0]
 80072dc:	4b53      	ldr	r3, [pc, #332]	@ (800742c <_printf_i+0x210>)
 80072de:	270a      	movs	r7, #10
 80072e0:	9304      	str	r3, [sp, #16]
 80072e2:	2a6f      	cmp	r2, #111	@ 0x6f
 80072e4:	d100      	bne.n	80072e8 <_printf_i+0xcc>
 80072e6:	3f02      	subs	r7, #2
 80072e8:	0023      	movs	r3, r4
 80072ea:	2200      	movs	r2, #0
 80072ec:	3343      	adds	r3, #67	@ 0x43
 80072ee:	701a      	strb	r2, [r3, #0]
 80072f0:	6863      	ldr	r3, [r4, #4]
 80072f2:	60a3      	str	r3, [r4, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	db06      	blt.n	8007306 <_printf_i+0xea>
 80072f8:	2104      	movs	r1, #4
 80072fa:	6822      	ldr	r2, [r4, #0]
 80072fc:	9d03      	ldr	r5, [sp, #12]
 80072fe:	438a      	bics	r2, r1
 8007300:	6022      	str	r2, [r4, #0]
 8007302:	4333      	orrs	r3, r6
 8007304:	d00c      	beq.n	8007320 <_printf_i+0x104>
 8007306:	9d03      	ldr	r5, [sp, #12]
 8007308:	0030      	movs	r0, r6
 800730a:	0039      	movs	r1, r7
 800730c:	f7f8 ff8c 	bl	8000228 <__aeabi_uidivmod>
 8007310:	9b04      	ldr	r3, [sp, #16]
 8007312:	3d01      	subs	r5, #1
 8007314:	5c5b      	ldrb	r3, [r3, r1]
 8007316:	702b      	strb	r3, [r5, #0]
 8007318:	0033      	movs	r3, r6
 800731a:	0006      	movs	r6, r0
 800731c:	429f      	cmp	r7, r3
 800731e:	d9f3      	bls.n	8007308 <_printf_i+0xec>
 8007320:	2f08      	cmp	r7, #8
 8007322:	d109      	bne.n	8007338 <_printf_i+0x11c>
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	07db      	lsls	r3, r3, #31
 8007328:	d506      	bpl.n	8007338 <_printf_i+0x11c>
 800732a:	6862      	ldr	r2, [r4, #4]
 800732c:	6923      	ldr	r3, [r4, #16]
 800732e:	429a      	cmp	r2, r3
 8007330:	dc02      	bgt.n	8007338 <_printf_i+0x11c>
 8007332:	2330      	movs	r3, #48	@ 0x30
 8007334:	3d01      	subs	r5, #1
 8007336:	702b      	strb	r3, [r5, #0]
 8007338:	9b03      	ldr	r3, [sp, #12]
 800733a:	1b5b      	subs	r3, r3, r5
 800733c:	6123      	str	r3, [r4, #16]
 800733e:	9b07      	ldr	r3, [sp, #28]
 8007340:	0021      	movs	r1, r4
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	9805      	ldr	r0, [sp, #20]
 8007346:	9b06      	ldr	r3, [sp, #24]
 8007348:	aa09      	add	r2, sp, #36	@ 0x24
 800734a:	f7ff fef7 	bl	800713c <_printf_common>
 800734e:	3001      	adds	r0, #1
 8007350:	d148      	bne.n	80073e4 <_printf_i+0x1c8>
 8007352:	2001      	movs	r0, #1
 8007354:	4240      	negs	r0, r0
 8007356:	b00b      	add	sp, #44	@ 0x2c
 8007358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800735a:	2220      	movs	r2, #32
 800735c:	6809      	ldr	r1, [r1, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	6022      	str	r2, [r4, #0]
 8007362:	2278      	movs	r2, #120	@ 0x78
 8007364:	4932      	ldr	r1, [pc, #200]	@ (8007430 <_printf_i+0x214>)
 8007366:	9104      	str	r1, [sp, #16]
 8007368:	0021      	movs	r1, r4
 800736a:	3145      	adds	r1, #69	@ 0x45
 800736c:	700a      	strb	r2, [r1, #0]
 800736e:	6819      	ldr	r1, [r3, #0]
 8007370:	6822      	ldr	r2, [r4, #0]
 8007372:	c940      	ldmia	r1!, {r6}
 8007374:	0610      	lsls	r0, r2, #24
 8007376:	d402      	bmi.n	800737e <_printf_i+0x162>
 8007378:	0650      	lsls	r0, r2, #25
 800737a:	d500      	bpl.n	800737e <_printf_i+0x162>
 800737c:	b2b6      	uxth	r6, r6
 800737e:	6019      	str	r1, [r3, #0]
 8007380:	07d3      	lsls	r3, r2, #31
 8007382:	d502      	bpl.n	800738a <_printf_i+0x16e>
 8007384:	2320      	movs	r3, #32
 8007386:	4313      	orrs	r3, r2
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	2e00      	cmp	r6, #0
 800738c:	d001      	beq.n	8007392 <_printf_i+0x176>
 800738e:	2710      	movs	r7, #16
 8007390:	e7aa      	b.n	80072e8 <_printf_i+0xcc>
 8007392:	2220      	movs	r2, #32
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	4393      	bics	r3, r2
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	e7f8      	b.n	800738e <_printf_i+0x172>
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	680d      	ldr	r5, [r1, #0]
 80073a0:	1d10      	adds	r0, r2, #4
 80073a2:	6949      	ldr	r1, [r1, #20]
 80073a4:	6018      	str	r0, [r3, #0]
 80073a6:	6813      	ldr	r3, [r2, #0]
 80073a8:	062e      	lsls	r6, r5, #24
 80073aa:	d501      	bpl.n	80073b0 <_printf_i+0x194>
 80073ac:	6019      	str	r1, [r3, #0]
 80073ae:	e002      	b.n	80073b6 <_printf_i+0x19a>
 80073b0:	066d      	lsls	r5, r5, #25
 80073b2:	d5fb      	bpl.n	80073ac <_printf_i+0x190>
 80073b4:	8019      	strh	r1, [r3, #0]
 80073b6:	2300      	movs	r3, #0
 80073b8:	9d03      	ldr	r5, [sp, #12]
 80073ba:	6123      	str	r3, [r4, #16]
 80073bc:	e7bf      	b.n	800733e <_printf_i+0x122>
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	1d11      	adds	r1, r2, #4
 80073c2:	6019      	str	r1, [r3, #0]
 80073c4:	6815      	ldr	r5, [r2, #0]
 80073c6:	2100      	movs	r1, #0
 80073c8:	0028      	movs	r0, r5
 80073ca:	6862      	ldr	r2, [r4, #4]
 80073cc:	f000 f856 	bl	800747c <memchr>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	d001      	beq.n	80073d8 <_printf_i+0x1bc>
 80073d4:	1b40      	subs	r0, r0, r5
 80073d6:	6060      	str	r0, [r4, #4]
 80073d8:	6863      	ldr	r3, [r4, #4]
 80073da:	6123      	str	r3, [r4, #16]
 80073dc:	2300      	movs	r3, #0
 80073de:	9a03      	ldr	r2, [sp, #12]
 80073e0:	7013      	strb	r3, [r2, #0]
 80073e2:	e7ac      	b.n	800733e <_printf_i+0x122>
 80073e4:	002a      	movs	r2, r5
 80073e6:	6923      	ldr	r3, [r4, #16]
 80073e8:	9906      	ldr	r1, [sp, #24]
 80073ea:	9805      	ldr	r0, [sp, #20]
 80073ec:	9d07      	ldr	r5, [sp, #28]
 80073ee:	47a8      	blx	r5
 80073f0:	3001      	adds	r0, #1
 80073f2:	d0ae      	beq.n	8007352 <_printf_i+0x136>
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	079b      	lsls	r3, r3, #30
 80073f8:	d415      	bmi.n	8007426 <_printf_i+0x20a>
 80073fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073fc:	68e0      	ldr	r0, [r4, #12]
 80073fe:	4298      	cmp	r0, r3
 8007400:	daa9      	bge.n	8007356 <_printf_i+0x13a>
 8007402:	0018      	movs	r0, r3
 8007404:	e7a7      	b.n	8007356 <_printf_i+0x13a>
 8007406:	0022      	movs	r2, r4
 8007408:	2301      	movs	r3, #1
 800740a:	9906      	ldr	r1, [sp, #24]
 800740c:	9805      	ldr	r0, [sp, #20]
 800740e:	9e07      	ldr	r6, [sp, #28]
 8007410:	3219      	adds	r2, #25
 8007412:	47b0      	blx	r6
 8007414:	3001      	adds	r0, #1
 8007416:	d09c      	beq.n	8007352 <_printf_i+0x136>
 8007418:	3501      	adds	r5, #1
 800741a:	68e3      	ldr	r3, [r4, #12]
 800741c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800741e:	1a9b      	subs	r3, r3, r2
 8007420:	42ab      	cmp	r3, r5
 8007422:	dcf0      	bgt.n	8007406 <_printf_i+0x1ea>
 8007424:	e7e9      	b.n	80073fa <_printf_i+0x1de>
 8007426:	2500      	movs	r5, #0
 8007428:	e7f7      	b.n	800741a <_printf_i+0x1fe>
 800742a:	46c0      	nop			@ (mov r8, r8)
 800742c:	080075b9 	.word	0x080075b9
 8007430:	080075ca 	.word	0x080075ca

08007434 <memmove>:
 8007434:	b510      	push	{r4, lr}
 8007436:	4288      	cmp	r0, r1
 8007438:	d902      	bls.n	8007440 <memmove+0xc>
 800743a:	188b      	adds	r3, r1, r2
 800743c:	4298      	cmp	r0, r3
 800743e:	d308      	bcc.n	8007452 <memmove+0x1e>
 8007440:	2300      	movs	r3, #0
 8007442:	429a      	cmp	r2, r3
 8007444:	d007      	beq.n	8007456 <memmove+0x22>
 8007446:	5ccc      	ldrb	r4, [r1, r3]
 8007448:	54c4      	strb	r4, [r0, r3]
 800744a:	3301      	adds	r3, #1
 800744c:	e7f9      	b.n	8007442 <memmove+0xe>
 800744e:	5c8b      	ldrb	r3, [r1, r2]
 8007450:	5483      	strb	r3, [r0, r2]
 8007452:	3a01      	subs	r2, #1
 8007454:	d2fb      	bcs.n	800744e <memmove+0x1a>
 8007456:	bd10      	pop	{r4, pc}

08007458 <_sbrk_r>:
 8007458:	2300      	movs	r3, #0
 800745a:	b570      	push	{r4, r5, r6, lr}
 800745c:	4d06      	ldr	r5, [pc, #24]	@ (8007478 <_sbrk_r+0x20>)
 800745e:	0004      	movs	r4, r0
 8007460:	0008      	movs	r0, r1
 8007462:	602b      	str	r3, [r5, #0]
 8007464:	f7fb fb24 	bl	8002ab0 <_sbrk>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d103      	bne.n	8007474 <_sbrk_r+0x1c>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d000      	beq.n	8007474 <_sbrk_r+0x1c>
 8007472:	6023      	str	r3, [r4, #0]
 8007474:	bd70      	pop	{r4, r5, r6, pc}
 8007476:	46c0      	nop			@ (mov r8, r8)
 8007478:	20000418 	.word	0x20000418

0800747c <memchr>:
 800747c:	b2c9      	uxtb	r1, r1
 800747e:	1882      	adds	r2, r0, r2
 8007480:	4290      	cmp	r0, r2
 8007482:	d101      	bne.n	8007488 <memchr+0xc>
 8007484:	2000      	movs	r0, #0
 8007486:	4770      	bx	lr
 8007488:	7803      	ldrb	r3, [r0, #0]
 800748a:	428b      	cmp	r3, r1
 800748c:	d0fb      	beq.n	8007486 <memchr+0xa>
 800748e:	3001      	adds	r0, #1
 8007490:	e7f6      	b.n	8007480 <memchr+0x4>

08007492 <_realloc_r>:
 8007492:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007494:	0006      	movs	r6, r0
 8007496:	000c      	movs	r4, r1
 8007498:	0015      	movs	r5, r2
 800749a:	2900      	cmp	r1, #0
 800749c:	d105      	bne.n	80074aa <_realloc_r+0x18>
 800749e:	0011      	movs	r1, r2
 80074a0:	f7ff fc5e 	bl	8006d60 <_malloc_r>
 80074a4:	0004      	movs	r4, r0
 80074a6:	0020      	movs	r0, r4
 80074a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074aa:	2a00      	cmp	r2, #0
 80074ac:	d103      	bne.n	80074b6 <_realloc_r+0x24>
 80074ae:	f7ff fbeb 	bl	8006c88 <_free_r>
 80074b2:	002c      	movs	r4, r5
 80074b4:	e7f7      	b.n	80074a6 <_realloc_r+0x14>
 80074b6:	f000 f81c 	bl	80074f2 <_malloc_usable_size_r>
 80074ba:	0007      	movs	r7, r0
 80074bc:	4285      	cmp	r5, r0
 80074be:	d802      	bhi.n	80074c6 <_realloc_r+0x34>
 80074c0:	0843      	lsrs	r3, r0, #1
 80074c2:	42ab      	cmp	r3, r5
 80074c4:	d3ef      	bcc.n	80074a6 <_realloc_r+0x14>
 80074c6:	0029      	movs	r1, r5
 80074c8:	0030      	movs	r0, r6
 80074ca:	f7ff fc49 	bl	8006d60 <_malloc_r>
 80074ce:	9001      	str	r0, [sp, #4]
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d101      	bne.n	80074d8 <_realloc_r+0x46>
 80074d4:	9c01      	ldr	r4, [sp, #4]
 80074d6:	e7e6      	b.n	80074a6 <_realloc_r+0x14>
 80074d8:	002a      	movs	r2, r5
 80074da:	42bd      	cmp	r5, r7
 80074dc:	d900      	bls.n	80074e0 <_realloc_r+0x4e>
 80074de:	003a      	movs	r2, r7
 80074e0:	0021      	movs	r1, r4
 80074e2:	9801      	ldr	r0, [sp, #4]
 80074e4:	f7ff fbc6 	bl	8006c74 <memcpy>
 80074e8:	0021      	movs	r1, r4
 80074ea:	0030      	movs	r0, r6
 80074ec:	f7ff fbcc 	bl	8006c88 <_free_r>
 80074f0:	e7f0      	b.n	80074d4 <_realloc_r+0x42>

080074f2 <_malloc_usable_size_r>:
 80074f2:	1f0b      	subs	r3, r1, #4
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	1f18      	subs	r0, r3, #4
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	da01      	bge.n	8007500 <_malloc_usable_size_r+0xe>
 80074fc:	580b      	ldr	r3, [r1, r0]
 80074fe:	18c0      	adds	r0, r0, r3
 8007500:	4770      	bx	lr
	...

08007504 <_init>:
 8007504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007506:	46c0      	nop			@ (mov r8, r8)
 8007508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800750a:	bc08      	pop	{r3}
 800750c:	469e      	mov	lr, r3
 800750e:	4770      	bx	lr

08007510 <_fini>:
 8007510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007512:	46c0      	nop			@ (mov r8, r8)
 8007514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007516:	bc08      	pop	{r3}
 8007518:	469e      	mov	lr, r3
 800751a:	4770      	bx	lr
