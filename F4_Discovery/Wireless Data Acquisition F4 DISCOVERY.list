
Wireless Data Acquisition F4 DISCOVERY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a90  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08006c20  08006c20  00007c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d6c  08006d6c  00008074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006d6c  08006d6c  00007d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d74  08006d74  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d74  08006d74  00007d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d78  08006d78  00007d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08006d7c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008074  2**0
                  CONTENTS
 10 .bss          00000284  20000074  20000074  00008074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002f8  200002f8  00008074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010606  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002118  00000000  00000000  000186aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  0001a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c35  00000000  00000000  0001b730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021973  00000000  00000000  0001c365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001285a  00000000  00000000  0003dcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cde63  00000000  00000000  00050532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011e395  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004910  00000000  00000000  0011e3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  00122ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c08 	.word	0x08006c08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006c08 	.word	0x08006c08

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fd06 	bl	8000fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f8ce 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f9f8 	bl	80009ac <MX_GPIO_Init>
  MX_I2C1_Init();
 80005bc:	f000 f936 	bl	800082c <MX_I2C1_Init>
  MX_TIM2_Init();
 80005c0:	f000 f962 	bl	8000888 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005c4:	f000 f9c8 	bl	8000958 <MX_USART1_UART_Init>
  /*  	-90 derece için CCRx değeri 30
   * 	0 derece için CCRx değeri 	72
   * 	+90 derece için CCRx değeri 125
   */

  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 80005c8:	2100      	movs	r1, #0
 80005ca:	4856      	ldr	r0, [pc, #344]	@ (8000724 <main+0x178>)
 80005cc:	f003 fe86 	bl	80042dc <HAL_TIM_PWM_Start>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <main+0x2e>
  {
	  Error_Handler();
 80005d6:	f000 fb07 	bl	8000be8 <Error_Handler>
  }

  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 80005da:	2104      	movs	r1, #4
 80005dc:	4851      	ldr	r0, [pc, #324]	@ (8000724 <main+0x178>)
 80005de:	f003 fe7d 	bl	80042dc <HAL_TIM_PWM_Start>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <main+0x40>
  {
	  Error_Handler();
 80005e8:	f000 fafe 	bl	8000be8 <Error_Handler>
  }

  HAL_UART_Receive_IT(&huart1, (uint8_t*)&RxChar, 1);
 80005ec:	2201      	movs	r2, #1
 80005ee:	494e      	ldr	r1, [pc, #312]	@ (8000728 <main+0x17c>)
 80005f0:	484e      	ldr	r0, [pc, #312]	@ (800072c <main+0x180>)
 80005f2:	f004 fc7b 	bl	8004eec <HAL_UART_Receive_IT>

  LCD_Init(&hi2c1, LCD_MODULE_WRITE_ADDR);
 80005f6:	214e      	movs	r1, #78	@ 0x4e
 80005f8:	484d      	ldr	r0, [pc, #308]	@ (8000730 <main+0x184>)
 80005fa:	f005 fc43 	bl	8005e84 <LCD_Init>
  LCD_SetCursor(&hi2c1, LCD_MODULE_WRITE_ADDR, 0, 2);
 80005fe:	2302      	movs	r3, #2
 8000600:	2200      	movs	r2, #0
 8000602:	214e      	movs	r1, #78	@ 0x4e
 8000604:	484a      	ldr	r0, [pc, #296]	@ (8000730 <main+0x184>)
 8000606:	f005 fc1a 	bl	8005e3e <LCD_SetCursor>
  LCD_SendData(&hi2c1, LCD_MODULE_WRITE_ADDR, 'R');
 800060a:	2252      	movs	r2, #82	@ 0x52
 800060c:	214e      	movs	r1, #78	@ 0x4e
 800060e:	4848      	ldr	r0, [pc, #288]	@ (8000730 <main+0x184>)
 8000610:	f005 fbdb 	bl	8005dca <LCD_SendData>
  LCD_SetCursor(&hi2c1, LCD_MODULE_WRITE_ADDR, 0, 6);
 8000614:	2306      	movs	r3, #6
 8000616:	2200      	movs	r2, #0
 8000618:	214e      	movs	r1, #78	@ 0x4e
 800061a:	4845      	ldr	r0, [pc, #276]	@ (8000730 <main+0x184>)
 800061c:	f005 fc0f 	bl	8005e3e <LCD_SetCursor>
  LCD_SendData(&hi2c1, LCD_MODULE_WRITE_ADDR, 'P');
 8000620:	2250      	movs	r2, #80	@ 0x50
 8000622:	214e      	movs	r1, #78	@ 0x4e
 8000624:	4842      	ldr	r0, [pc, #264]	@ (8000730 <main+0x184>)
 8000626:	f005 fbd0 	bl	8005dca <LCD_SendData>
  LCD_SetCursor(&hi2c1, LCD_MODULE_WRITE_ADDR, 0, 10);
 800062a:	230a      	movs	r3, #10
 800062c:	2200      	movs	r2, #0
 800062e:	214e      	movs	r1, #78	@ 0x4e
 8000630:	483f      	ldr	r0, [pc, #252]	@ (8000730 <main+0x184>)
 8000632:	f005 fc04 	bl	8005e3e <LCD_SetCursor>
  LCD_SendData(&hi2c1, LCD_MODULE_WRITE_ADDR, 'H');
 8000636:	2248      	movs	r2, #72	@ 0x48
 8000638:	214e      	movs	r1, #78	@ 0x4e
 800063a:	483d      	ldr	r0, [pc, #244]	@ (8000730 <main+0x184>)
 800063c:	f005 fbc5 	bl	8005dca <LCD_SendData>

  HAL_GPIO_WritePin(RS_485_GPIO_GPIO_Port, RS_485_GPIO_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	483b      	ldr	r0, [pc, #236]	@ (8000734 <main+0x188>)
 8000646:	f001 f8b7 	bl	80017b8 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(strlen(LCD_R) >= 3)
 800064a:	483b      	ldr	r0, [pc, #236]	@ (8000738 <main+0x18c>)
 800064c:	f7ff fdc0 	bl	80001d0 <strlen>
 8000650:	4603      	mov	r3, r0
 8000652:	2b02      	cmp	r3, #2
 8000654:	d906      	bls.n	8000664 <main+0xb8>
	  {
		  LCD_SetCursor(&hi2c1, LCD_MODULE_WRITE_ADDR, 1, 1);
 8000656:	2301      	movs	r3, #1
 8000658:	2201      	movs	r2, #1
 800065a:	214e      	movs	r1, #78	@ 0x4e
 800065c:	4834      	ldr	r0, [pc, #208]	@ (8000730 <main+0x184>)
 800065e:	f005 fbee 	bl	8005e3e <LCD_SetCursor>
 8000662:	e005      	b.n	8000670 <main+0xc4>
	  }
	  else
	  {
		  LCD_SetCursor(&hi2c1, LCD_MODULE_WRITE_ADDR, 1, 2);
 8000664:	2302      	movs	r3, #2
 8000666:	2201      	movs	r2, #1
 8000668:	214e      	movs	r1, #78	@ 0x4e
 800066a:	4831      	ldr	r0, [pc, #196]	@ (8000730 <main+0x184>)
 800066c:	f005 fbe7 	bl	8005e3e <LCD_SetCursor>
	  }
	  LCD_SendString(&hi2c1, LCD_MODULE_WRITE_ADDR, LCD_R);
 8000670:	4a31      	ldr	r2, [pc, #196]	@ (8000738 <main+0x18c>)
 8000672:	214e      	movs	r1, #78	@ 0x4e
 8000674:	482e      	ldr	r0, [pc, #184]	@ (8000730 <main+0x184>)
 8000676:	f005 fc59 	bl	8005f2c <LCD_SendString>


	  if(strlen(LCD_P) == 3)
 800067a:	4830      	ldr	r0, [pc, #192]	@ (800073c <main+0x190>)
 800067c:	f7ff fda8 	bl	80001d0 <strlen>
 8000680:	4603      	mov	r3, r0
 8000682:	2b03      	cmp	r3, #3
 8000684:	d106      	bne.n	8000694 <main+0xe8>
	  {
		  LCD_SetCursor(&hi2c1, LCD_MODULE_WRITE_ADDR, 1, 5);
 8000686:	2305      	movs	r3, #5
 8000688:	2201      	movs	r2, #1
 800068a:	214e      	movs	r1, #78	@ 0x4e
 800068c:	4828      	ldr	r0, [pc, #160]	@ (8000730 <main+0x184>)
 800068e:	f005 fbd6 	bl	8005e3e <LCD_SetCursor>
 8000692:	e005      	b.n	80006a0 <main+0xf4>
	  }
	  else
	  {
		  LCD_SetCursor(&hi2c1, LCD_MODULE_WRITE_ADDR, 1, 6);
 8000694:	2306      	movs	r3, #6
 8000696:	2201      	movs	r2, #1
 8000698:	214e      	movs	r1, #78	@ 0x4e
 800069a:	4825      	ldr	r0, [pc, #148]	@ (8000730 <main+0x184>)
 800069c:	f005 fbcf 	bl	8005e3e <LCD_SetCursor>
	  }
	  LCD_SendString(&hi2c1, LCD_MODULE_WRITE_ADDR, LCD_P);
 80006a0:	4a26      	ldr	r2, [pc, #152]	@ (800073c <main+0x190>)
 80006a2:	214e      	movs	r1, #78	@ 0x4e
 80006a4:	4822      	ldr	r0, [pc, #136]	@ (8000730 <main+0x184>)
 80006a6:	f005 fc41 	bl	8005f2c <LCD_SendString>


	  if(strlen(LCD_H) == 3)
 80006aa:	4825      	ldr	r0, [pc, #148]	@ (8000740 <main+0x194>)
 80006ac:	f7ff fd90 	bl	80001d0 <strlen>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	d106      	bne.n	80006c4 <main+0x118>
	  {
		  LCD_SetCursor(&hi2c1, LCD_MODULE_WRITE_ADDR, 1, 9);
 80006b6:	2309      	movs	r3, #9
 80006b8:	2201      	movs	r2, #1
 80006ba:	214e      	movs	r1, #78	@ 0x4e
 80006bc:	481c      	ldr	r0, [pc, #112]	@ (8000730 <main+0x184>)
 80006be:	f005 fbbe 	bl	8005e3e <LCD_SetCursor>
 80006c2:	e005      	b.n	80006d0 <main+0x124>
	  }
	  else
	  {
		  LCD_SetCursor(&hi2c1, LCD_MODULE_WRITE_ADDR, 1, 10);
 80006c4:	230a      	movs	r3, #10
 80006c6:	2201      	movs	r2, #1
 80006c8:	214e      	movs	r1, #78	@ 0x4e
 80006ca:	4819      	ldr	r0, [pc, #100]	@ (8000730 <main+0x184>)
 80006cc:	f005 fbb7 	bl	8005e3e <LCD_SetCursor>
	  }
	  LCD_SendString(&hi2c1, LCD_MODULE_WRITE_ADDR, LCD_H);
 80006d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000740 <main+0x194>)
 80006d2:	214e      	movs	r1, #78	@ 0x4e
 80006d4:	4816      	ldr	r0, [pc, #88]	@ (8000730 <main+0x184>)
 80006d6:	f005 fc29 	bl	8005f2c <LCD_SendString>

		strncpy(LCD_R, &RxData[4], 4);
 80006da:	2204      	movs	r2, #4
 80006dc:	4919      	ldr	r1, [pc, #100]	@ (8000744 <main+0x198>)
 80006de:	4816      	ldr	r0, [pc, #88]	@ (8000738 <main+0x18c>)
 80006e0:	f005 fc88 	bl	8005ff4 <strncpy>
		LCD_R[3] = '\0';
 80006e4:	4b14      	ldr	r3, [pc, #80]	@ (8000738 <main+0x18c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	70da      	strb	r2, [r3, #3]
		strncpy(LCD_P, &RxData[9], 4);
 80006ea:	2204      	movs	r2, #4
 80006ec:	4916      	ldr	r1, [pc, #88]	@ (8000748 <main+0x19c>)
 80006ee:	4813      	ldr	r0, [pc, #76]	@ (800073c <main+0x190>)
 80006f0:	f005 fc80 	bl	8005ff4 <strncpy>
		LCD_P[3] = '\0';
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <main+0x190>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	70da      	strb	r2, [r3, #3]
		strncpy(LCD_H, &RxData[14], 4);
 80006fa:	2204      	movs	r2, #4
 80006fc:	4913      	ldr	r1, [pc, #76]	@ (800074c <main+0x1a0>)
 80006fe:	4810      	ldr	r0, [pc, #64]	@ (8000740 <main+0x194>)
 8000700:	f005 fc78 	bl	8005ff4 <strncpy>
		LCD_H[3] = '\0';
 8000704:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <main+0x194>)
 8000706:	2200      	movs	r2, #0
 8000708:	70da      	strb	r2, [r3, #3]
		HAL_Delay(10);
 800070a:	200a      	movs	r0, #10
 800070c:	f000 fcca 	bl	80010a4 <HAL_Delay>

		pin_state = HAL_GPIO_ReadPin(RS_485_GPIO_GPIO_Port, RS_485_GPIO_Pin);
 8000710:	2110      	movs	r1, #16
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <main+0x188>)
 8000714:	f001 f838 	bl	8001788 <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	461a      	mov	r2, r3
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <main+0x1a4>)
 800071e:	701a      	strb	r2, [r3, #0]
	  if(strlen(LCD_R) >= 3)
 8000720:	e793      	b.n	800064a <main+0x9e>
 8000722:	bf00      	nop
 8000724:	200000e4 	.word	0x200000e4
 8000728:	20000195 	.word	0x20000195
 800072c:	2000012c 	.word	0x2000012c
 8000730:	20000090 	.word	0x20000090
 8000734:	40020000 	.word	0x40020000
 8000738:	20000000 	.word	0x20000000
 800073c:	20000008 	.word	0x20000008
 8000740:	20000010 	.word	0x20000010
 8000744:	20000178 	.word	0x20000178
 8000748:	2000017d 	.word	0x2000017d
 800074c:	20000182 	.word	0x20000182
 8000750:	200001a4 	.word	0x200001a4

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	@ 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2230      	movs	r2, #48	@ 0x30
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f005 fc2c 	bl	8005fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	4b29      	ldr	r3, [pc, #164]	@ (8000824 <SystemClock_Config+0xd0>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000780:	4a28      	ldr	r2, [pc, #160]	@ (8000824 <SystemClock_Config+0xd0>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	@ 0x40
 8000788:	4b26      	ldr	r3, [pc, #152]	@ (8000824 <SystemClock_Config+0xd0>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	4b23      	ldr	r3, [pc, #140]	@ (8000828 <SystemClock_Config+0xd4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a22      	ldr	r2, [pc, #136]	@ (8000828 <SystemClock_Config+0xd4>)
 800079e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <SystemClock_Config+0xd4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80007b0:	2305      	movs	r3, #5
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	2302      	movs	r3, #2
 80007c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 80007cc:	235a      	movs	r3, #90	@ 0x5a
 80007ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007d4:	2307      	movs	r3, #7
 80007d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 f895 	bl	800390c <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007e8:	f000 f9fe 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2302      	movs	r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000802:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2102      	movs	r1, #2
 800080a:	4618      	mov	r0, r3
 800080c:	f003 faf6 	bl	8003dfc <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000816:	f000 f9e7 	bl	8000be8 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3750      	adds	r7, #80	@ 0x50
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <MX_I2C1_Init+0x50>)
 8000832:	4a13      	ldr	r2, [pc, #76]	@ (8000880 <MX_I2C1_Init+0x54>)
 8000834:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000836:	4b11      	ldr	r3, [pc, #68]	@ (800087c <MX_I2C1_Init+0x50>)
 8000838:	4a12      	ldr	r2, [pc, #72]	@ (8000884 <MX_I2C1_Init+0x58>)
 800083a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800083c:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <MX_I2C1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_I2C1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_I2C1_Init+0x50>)
 800084a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800084e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000850:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <MX_I2C1_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_I2C1_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	@ (800087c <MX_I2C1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_I2C1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	@ (800087c <MX_I2C1_Init+0x50>)
 800086a:	f000 ffbf 	bl	80017ec <HAL_I2C_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000874:	f000 f9b8 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000090 	.word	0x20000090
 8000880:	40005400 	.word	0x40005400
 8000884:	000186a0 	.word	0x000186a0

08000888 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	@ 0x28
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
 80008a6:	615a      	str	r2, [r3, #20]
 80008a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000954 <MX_TIM2_Init+0xcc>)
 80008ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 899;
 80008b2:	4b28      	ldr	r3, [pc, #160]	@ (8000954 <MX_TIM2_Init+0xcc>)
 80008b4:	f240 3283 	movw	r2, #899	@ 0x383
 80008b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ba:	4b26      	ldr	r3, [pc, #152]	@ (8000954 <MX_TIM2_Init+0xcc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80008c0:	4b24      	ldr	r3, [pc, #144]	@ (8000954 <MX_TIM2_Init+0xcc>)
 80008c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	4b22      	ldr	r3, [pc, #136]	@ (8000954 <MX_TIM2_Init+0xcc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ce:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <MX_TIM2_Init+0xcc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008d4:	481f      	ldr	r0, [pc, #124]	@ (8000954 <MX_TIM2_Init+0xcc>)
 80008d6:	f003 fcb1 	bl	800423c <HAL_TIM_PWM_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80008e0:	f000 f982 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ec:	f107 0320 	add.w	r3, r7, #32
 80008f0:	4619      	mov	r1, r3
 80008f2:	4818      	ldr	r0, [pc, #96]	@ (8000954 <MX_TIM2_Init+0xcc>)
 80008f4:	f004 fa1a 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80008fe:	f000 f973 	bl	8000be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000902:	2360      	movs	r3, #96	@ 0x60
 8000904:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 8000906:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800090a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	4619      	mov	r1, r3
 800091a:	480e      	ldr	r0, [pc, #56]	@ (8000954 <MX_TIM2_Init+0xcc>)
 800091c:	f003 fe96 	bl	800464c <HAL_TIM_PWM_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000926:	f000 f95f 	bl	8000be8 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 800092a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2204      	movs	r2, #4
 8000934:	4619      	mov	r1, r3
 8000936:	4807      	ldr	r0, [pc, #28]	@ (8000954 <MX_TIM2_Init+0xcc>)
 8000938:	f003 fe88 	bl	800464c <HAL_TIM_PWM_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8000942:	f000 f951 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000946:	4803      	ldr	r0, [pc, #12]	@ (8000954 <MX_TIM2_Init+0xcc>)
 8000948:	f000 f9f2 	bl	8000d30 <HAL_TIM_MspPostInit>

}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	@ 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000e4 	.word	0x200000e4

08000958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800095c:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 800095e:	4a12      	ldr	r2, [pc, #72]	@ (80009a8 <MX_USART1_UART_Init+0x50>)
 8000960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000962:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000964:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000990:	f004 fa5c 	bl	8004e4c <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800099a:	f000 f925 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000012c 	.word	0x2000012c
 80009a8:	40011000 	.word	0x40011000

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	@ 0x28
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b31      	ldr	r3, [pc, #196]	@ (8000a8c <MX_GPIO_Init+0xe0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a30      	ldr	r2, [pc, #192]	@ (8000a8c <MX_GPIO_Init+0xe0>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a8c <MX_GPIO_Init+0xe0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a8c <MX_GPIO_Init+0xe0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a29      	ldr	r2, [pc, #164]	@ (8000a8c <MX_GPIO_Init+0xe0>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b27      	ldr	r3, [pc, #156]	@ (8000a8c <MX_GPIO_Init+0xe0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b23      	ldr	r3, [pc, #140]	@ (8000a8c <MX_GPIO_Init+0xe0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a22      	ldr	r2, [pc, #136]	@ (8000a8c <MX_GPIO_Init+0xe0>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b20      	ldr	r3, [pc, #128]	@ (8000a8c <MX_GPIO_Init+0xe0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <MX_GPIO_Init+0xe0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000a8c <MX_GPIO_Init+0xe0>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <MX_GPIO_Init+0xe0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_485_GPIO_GPIO_Port, RS_485_GPIO_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2110      	movs	r1, #16
 8000a36:	4816      	ldr	r0, [pc, #88]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 8000a38:	f000 febe 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a42:	4814      	ldr	r0, [pc, #80]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 8000a44:	f000 feb8 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RS_485_GPIO_Pin */
  GPIO_InitStruct.Pin = RS_485_GPIO_Pin;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS_485_GPIO_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 8000a60:	f000 fcf6 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 8000a7e:	f000 fce7 	bl	8001450 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	@ 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40020c00 	.word	0x40020c00

08000a98 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	servo1_ccr = __HAL_TIM_GET_COMPARE(htim2, TIM_CHANNEL_1);
 8000aa0:	4b43      	ldr	r3, [pc, #268]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x118>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b42      	ldr	r3, [pc, #264]	@ (8000bb4 <HAL_UART_RxCpltCallback+0x11c>)
 8000aaa:	601a      	str	r2, [r3, #0]
	servo2_ccr = __HAL_TIM_GET_COMPARE(htim2, TIM_CHANNEL_2);
 8000aac:	4b40      	ldr	r3, [pc, #256]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x118>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b40      	ldr	r3, [pc, #256]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x120>)
 8000ab6:	601a      	str	r2, [r3, #0]

	if(huart->Instance == USART1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a3f      	ldr	r2, [pc, #252]	@ (8000bbc <HAL_UART_RxCpltCallback+0x124>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d171      	bne.n	8000ba6 <HAL_UART_RxCpltCallback+0x10e>
	{

		if(RxChar == PACKET_START)
 8000ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8000bc0 <HAL_UART_RxCpltCallback+0x128>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b24      	cmp	r3, #36	@ 0x24
 8000ac8:	d105      	bne.n	8000ad6 <HAL_UART_RxCpltCallback+0x3e>
		{
			receiving = 1;
 8000aca:	4b3e      	ldr	r3, [pc, #248]	@ (8000bc4 <HAL_UART_RxCpltCallback+0x12c>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
			indx = 0;
 8000ad0:	4b3d      	ldr	r3, [pc, #244]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x130>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
		}

		if(receiving)
 8000ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8000bc4 <HAL_UART_RxCpltCallback+0x12c>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d05e      	beq.n	8000b9c <HAL_UART_RxCpltCallback+0x104>
		{
			RxData[indx++] = RxChar;
 8000ade:	4b3a      	ldr	r3, [pc, #232]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x130>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	b2d1      	uxtb	r1, r2
 8000ae6:	4a38      	ldr	r2, [pc, #224]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x130>)
 8000ae8:	7011      	strb	r1, [r2, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b34      	ldr	r3, [pc, #208]	@ (8000bc0 <HAL_UART_RxCpltCallback+0x128>)
 8000aee:	7819      	ldrb	r1, [r3, #0]
 8000af0:	4b36      	ldr	r3, [pc, #216]	@ (8000bcc <HAL_UART_RxCpltCallback+0x134>)
 8000af2:	5499      	strb	r1, [r3, r2]

			if(indx >= MAX_RX_LEN) receiving = 0; //Aşırı uzunluk
 8000af4:	4b34      	ldr	r3, [pc, #208]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x130>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b1f      	cmp	r3, #31
 8000afa:	d902      	bls.n	8000b02 <HAL_UART_RxCpltCallback+0x6a>
 8000afc:	4b31      	ldr	r3, [pc, #196]	@ (8000bc4 <HAL_UART_RxCpltCallback+0x12c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]

			if(RxChar == PACKET_END)
 8000b02:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc0 <HAL_UART_RxCpltCallback+0x128>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b21      	cmp	r3, #33	@ 0x21
 8000b08:	d148      	bne.n	8000b9c <HAL_UART_RxCpltCallback+0x104>
			{
				receiving = 0;
 8000b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc4 <HAL_UART_RxCpltCallback+0x12c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
				RxData[indx] = '\0'; //Sonlandırıcı
 8000b10:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x130>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b2d      	ldr	r3, [pc, #180]	@ (8000bcc <HAL_UART_RxCpltCallback+0x134>)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	5499      	strb	r1, [r3, r2]

				if(strncmp(&RxData[21], "---", 3) == 0)
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	492c      	ldr	r1, [pc, #176]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x138>)
 8000b20:	482c      	ldr	r0, [pc, #176]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x13c>)
 8000b22:	f005 fa55 	bl	8005fd0 <strncmp>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d105      	bne.n	8000b38 <HAL_UART_RxCpltCallback+0xa0>
				{
					htim2.Instance->CCR1 = servo1_ccr;
 8000b2c:	4b21      	ldr	r3, [pc, #132]	@ (8000bb4 <HAL_UART_RxCpltCallback+0x11c>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x118>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b36:	e011      	b.n	8000b5c <HAL_UART_RxCpltCallback+0xc4>
				}
				else
				{
					strncpy(tempChar, &RxData[21], 3);
 8000b38:	2203      	movs	r2, #3
 8000b3a:	4926      	ldr	r1, [pc, #152]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x13c>)
 8000b3c:	4826      	ldr	r0, [pc, #152]	@ (8000bd8 <HAL_UART_RxCpltCallback+0x140>)
 8000b3e:	f005 fa59 	bl	8005ff4 <strncpy>
					tempChar[3] = '\0';
 8000b42:	4b25      	ldr	r3, [pc, #148]	@ (8000bd8 <HAL_UART_RxCpltCallback+0x140>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	70da      	strb	r2, [r3, #3]
					sscanf(tempChar, "%d", &servo1_ccr);
 8000b48:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb4 <HAL_UART_RxCpltCallback+0x11c>)
 8000b4a:	4924      	ldr	r1, [pc, #144]	@ (8000bdc <HAL_UART_RxCpltCallback+0x144>)
 8000b4c:	4822      	ldr	r0, [pc, #136]	@ (8000bd8 <HAL_UART_RxCpltCallback+0x140>)
 8000b4e:	f005 fa09 	bl	8005f64 <siscanf>
					htim2.Instance->CCR1 = servo1_ccr;
 8000b52:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <HAL_UART_RxCpltCallback+0x11c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x118>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	635a      	str	r2, [r3, #52]	@ 0x34

				}

				if(strncmp(&RxData[25], "---", 3) == 0)
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	491c      	ldr	r1, [pc, #112]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x138>)
 8000b60:	481f      	ldr	r0, [pc, #124]	@ (8000be0 <HAL_UART_RxCpltCallback+0x148>)
 8000b62:	f005 fa35 	bl	8005fd0 <strncmp>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d105      	bne.n	8000b78 <HAL_UART_RxCpltCallback+0xe0>
				{
					htim2.Instance->CCR2 = servo2_ccr;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x120>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x118>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b76:	e011      	b.n	8000b9c <HAL_UART_RxCpltCallback+0x104>
				}
				else
				{
					strncpy(tempChar, &RxData[25], 3);
 8000b78:	2203      	movs	r2, #3
 8000b7a:	4919      	ldr	r1, [pc, #100]	@ (8000be0 <HAL_UART_RxCpltCallback+0x148>)
 8000b7c:	4816      	ldr	r0, [pc, #88]	@ (8000bd8 <HAL_UART_RxCpltCallback+0x140>)
 8000b7e:	f005 fa39 	bl	8005ff4 <strncpy>
					tempChar[3] = '\0';
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <HAL_UART_RxCpltCallback+0x140>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	70da      	strb	r2, [r3, #3]
					sscanf(tempChar, "%d", &servo2_ccr);
 8000b88:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x120>)
 8000b8a:	4914      	ldr	r1, [pc, #80]	@ (8000bdc <HAL_UART_RxCpltCallback+0x144>)
 8000b8c:	4812      	ldr	r0, [pc, #72]	@ (8000bd8 <HAL_UART_RxCpltCallback+0x140>)
 8000b8e:	f005 f9e9 	bl	8005f64 <siscanf>
					htim2.Instance->CCR2 = servo2_ccr;
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x120>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x118>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	639a      	str	r2, [r3, #56]	@ 0x38
				}

			}
		}
		//Yeni veri almak için tekrar çağır
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&RxChar, 1);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4908      	ldr	r1, [pc, #32]	@ (8000bc0 <HAL_UART_RxCpltCallback+0x128>)
 8000ba0:	4810      	ldr	r0, [pc, #64]	@ (8000be4 <HAL_UART_RxCpltCallback+0x14c>)
 8000ba2:	f004 f9a3 	bl	8004eec <HAL_UART_Receive_IT>
	}
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200000e4 	.word	0x200000e4
 8000bb4:	2000019c 	.word	0x2000019c
 8000bb8:	200001a0 	.word	0x200001a0
 8000bbc:	40011000 	.word	0x40011000
 8000bc0:	20000195 	.word	0x20000195
 8000bc4:	20000197 	.word	0x20000197
 8000bc8:	20000196 	.word	0x20000196
 8000bcc:	20000174 	.word	0x20000174
 8000bd0:	08006c20 	.word	0x08006c20
 8000bd4:	20000189 	.word	0x20000189
 8000bd8:	20000198 	.word	0x20000198
 8000bdc:	08006c24 	.word	0x08006c24
 8000be0:	2000018d 	.word	0x2000018d
 8000be4:	2000012c 	.word	0x2000012c

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <Error_Handler+0x8>

08000bf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <HAL_MspInit+0x4c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c02:	4a0f      	ldr	r2, [pc, #60]	@ (8000c40 <HAL_MspInit+0x4c>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c40 <HAL_MspInit+0x4c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <HAL_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	4a08      	ldr	r2, [pc, #32]	@ (8000c40 <HAL_MspInit+0x4c>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_MspInit+0x4c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c32:	2007      	movs	r0, #7
 8000c34:	f000 fb2a 	bl	800128c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40023800 	.word	0x40023800

08000c44 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	@ 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd8 <HAL_I2C_MspInit+0x94>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d133      	bne.n	8000cce <HAL_I2C_MspInit+0x8a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <HAL_I2C_MspInit+0x98>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cdc <HAL_I2C_MspInit+0x98>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <HAL_I2C_MspInit+0x98>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c82:	23c0      	movs	r3, #192	@ 0xc0
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c86:	2312      	movs	r3, #18
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c92:	2304      	movs	r3, #4
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4810      	ldr	r0, [pc, #64]	@ (8000ce0 <HAL_I2C_MspInit+0x9c>)
 8000c9e:	f000 fbd7 	bl	8001450 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <HAL_I2C_MspInit+0x98>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	4a0c      	ldr	r2, [pc, #48]	@ (8000cdc <HAL_I2C_MspInit+0x98>)
 8000cac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <HAL_I2C_MspInit+0x98>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	201f      	movs	r0, #31
 8000cc4:	f000 faed 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cc8:	201f      	movs	r0, #31
 8000cca:	f000 fb06 	bl	80012da <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	@ 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40005400 	.word	0x40005400
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020400 	.word	0x40020400

08000ce4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cf4:	d115      	bne.n	8000d22 <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x48>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x48>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x48>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	201c      	movs	r0, #28
 8000d18:	f000 fac3 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d1c:	201c      	movs	r0, #28
 8000d1e:	f000 fadc 	bl	80012da <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d50:	d11d      	bne.n	8000d8e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <HAL_TIM_MspPostInit+0x68>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d98 <HAL_TIM_MspPostInit+0x68>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <HAL_TIM_MspPostInit+0x68>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	4619      	mov	r1, r3
 8000d88:	4804      	ldr	r0, [pc, #16]	@ (8000d9c <HAL_TIM_MspPostInit+0x6c>)
 8000d8a:	f000 fb61 	bl	8001450 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3720      	adds	r7, #32
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000

08000da0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	@ 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8000e34 <HAL_UART_MspInit+0x94>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d134      	bne.n	8000e2c <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e38 <HAL_UART_MspInit+0x98>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	4a1b      	ldr	r2, [pc, #108]	@ (8000e38 <HAL_UART_MspInit+0x98>)
 8000dcc:	f043 0310 	orr.w	r3, r3, #16
 8000dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd2:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <HAL_UART_MspInit+0x98>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <HAL_UART_MspInit+0x98>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a14      	ldr	r2, [pc, #80]	@ (8000e38 <HAL_UART_MspInit+0x98>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <HAL_UART_MspInit+0x98>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dfa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	4809      	ldr	r0, [pc, #36]	@ (8000e3c <HAL_UART_MspInit+0x9c>)
 8000e18:	f000 fb1a 	bl	8001450 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2025      	movs	r0, #37	@ 0x25
 8000e22:	f000 fa3e 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e26:	2025      	movs	r0, #37	@ 0x25
 8000e28:	f000 fa57 	bl	80012da <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	@ 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40011000 	.word	0x40011000
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <NMI_Handler+0x4>

08000e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <MemManage_Handler+0x4>

08000e58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e96:	f000 f8e5 	bl	8001064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <TIM2_IRQHandler+0x10>)
 8000ea6:	f003 fae1 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200000e4 	.word	0x200000e4

08000eb4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <I2C1_EV_IRQHandler+0x10>)
 8000eba:	f000 feef 	bl	8001c9c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000090 	.word	0x20000090

08000ec8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ecc:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <USART1_IRQHandler+0x10>)
 8000ece:	f004 f833 	bl	8004f38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000012c 	.word	0x2000012c

08000edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee4:	4a14      	ldr	r2, [pc, #80]	@ (8000f38 <_sbrk+0x5c>)
 8000ee6:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <_sbrk+0x60>)
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef0:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <_sbrk+0x64>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	@ (8000f44 <_sbrk+0x68>)
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d207      	bcs.n	8000f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f0c:	f005 f886 	bl	800601c <__errno>
 8000f10:	4603      	mov	r3, r0
 8000f12:	220c      	movs	r2, #12
 8000f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	e009      	b.n	8000f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f22:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a05      	ldr	r2, [pc, #20]	@ (8000f40 <_sbrk+0x64>)
 8000f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20020000 	.word	0x20020000
 8000f3c:	00000400 	.word	0x00000400
 8000f40:	200001a8 	.word	0x200001a8
 8000f44:	200002f8 	.word	0x200002f8

08000f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <SystemInit+0x20>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f52:	4a05      	ldr	r2, [pc, #20]	@ (8000f68 <SystemInit+0x20>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f70:	f7ff ffea 	bl	8000f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f74:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f76:	490d      	ldr	r1, [pc, #52]	@ (8000fac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f78:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f005 f845 	bl	8006028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9e:	f7ff fb05 	bl	80005ac <main>
  bx  lr    
 8000fa2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fb0:	08006d7c 	.word	0x08006d7c
  ldr r2, =_sbss
 8000fb4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fb8:	200002f8 	.word	0x200002f8

08000fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC_IRQHandler>
	...

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <HAL_Init+0x40>)
 8000fca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <HAL_Init+0x40>)
 8000fd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fdc:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a07      	ldr	r2, [pc, #28]	@ (8001000 <HAL_Init+0x40>)
 8000fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f94f 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 f808 	bl	8001004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff4:	f7ff fdfe 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023c00 	.word	0x40023c00

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_InitTick+0x54>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_InitTick+0x58>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101a:	fbb3 f3f1 	udiv	r3, r3, r1
 800101e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f967 	bl	80012f6 <HAL_SYSTICK_Config>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e00e      	b.n	8001050 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d80a      	bhi.n	800104e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001038:	2200      	movs	r2, #0
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f000 f92f 	bl	80012a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001044:	4a06      	ldr	r2, [pc, #24]	@ (8001060 <HAL_InitTick+0x5c>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000018 	.word	0x20000018
 800105c:	20000020 	.word	0x20000020
 8001060:	2000001c 	.word	0x2000001c

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_IncTick+0x20>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_IncTick+0x24>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	@ (8001088 <HAL_IncTick+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000020 	.word	0x20000020
 8001088:	200001ac 	.word	0x200001ac

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	200001ac 	.word	0x200001ac

080010a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff ffee 	bl	800108c <HAL_GetTick>
 80010b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010bc:	d005      	beq.n	80010ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010be:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <HAL_Delay+0x44>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ca:	bf00      	nop
 80010cc:	f7ff ffde 	bl	800108c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d8f7      	bhi.n	80010cc <HAL_Delay+0x28>
  {
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000020 	.word	0x20000020

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	@ (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4907      	ldr	r1, [pc, #28]	@ (8001188 <__NVIC_EnableIRQ+0x38>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	@ (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	@ (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	@ 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	@ 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff8e 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	@ (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff29 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff3e 	bl	8001134 <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff8e 	bl	80011e0 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5d 	bl	800118c <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff31 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffa2 	bl	8001248 <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff feb6 	bl	800108c <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d008      	beq.n	8001340 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2280      	movs	r2, #128	@ 0x80
 8001332:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e052      	b.n	80013e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0216 	bic.w	r2, r2, #22
 800134e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800135e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001364:	2b00      	cmp	r3, #0
 8001366:	d103      	bne.n	8001370 <HAL_DMA_Abort+0x62>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800136c:	2b00      	cmp	r3, #0
 800136e:	d007      	beq.n	8001380 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0208 	bic.w	r2, r2, #8
 800137e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0201 	bic.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001390:	e013      	b.n	80013ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001392:	f7ff fe7b 	bl	800108c <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b05      	cmp	r3, #5
 800139e:	d90c      	bls.n	80013ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2220      	movs	r2, #32
 80013a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2203      	movs	r2, #3
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e015      	b.n	80013e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1e4      	bne.n	8001392 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013cc:	223f      	movs	r2, #63	@ 0x3f
 80013ce:	409a      	lsls	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d004      	beq.n	800140c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2280      	movs	r2, #128	@ 0x80
 8001406:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e00c      	b.n	8001426 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2205      	movs	r2, #5
 8001410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0201 	bic.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001440:	b2db      	uxtb	r3, r3
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	@ 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
 800146a:	e16b      	b.n	8001744 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800146c:	2201      	movs	r2, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	429a      	cmp	r2, r3
 8001486:	f040 815a 	bne.w	800173e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	2b01      	cmp	r3, #1
 8001494:	d005      	beq.n	80014a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d130      	bne.n	8001504 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d8:	2201      	movs	r2, #1
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	f003 0201 	and.w	r2, r3, #1
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b03      	cmp	r3, #3
 800150e:	d017      	beq.n	8001540 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d123      	bne.n	8001594 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	08da      	lsrs	r2, r3, #3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3208      	adds	r2, #8
 8001554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	220f      	movs	r2, #15
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	691a      	ldr	r2, [r3, #16]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	08da      	lsrs	r2, r3, #3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3208      	adds	r2, #8
 800158e:	69b9      	ldr	r1, [r7, #24]
 8001590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0203 	and.w	r2, r3, #3
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80b4 	beq.w	800173e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b60      	ldr	r3, [pc, #384]	@ (800175c <HAL_GPIO_Init+0x30c>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015de:	4a5f      	ldr	r2, [pc, #380]	@ (800175c <HAL_GPIO_Init+0x30c>)
 80015e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015e6:	4b5d      	ldr	r3, [pc, #372]	@ (800175c <HAL_GPIO_Init+0x30c>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001760 <HAL_GPIO_Init+0x310>)
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	220f      	movs	r2, #15
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a52      	ldr	r2, [pc, #328]	@ (8001764 <HAL_GPIO_Init+0x314>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d02b      	beq.n	8001676 <HAL_GPIO_Init+0x226>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a51      	ldr	r2, [pc, #324]	@ (8001768 <HAL_GPIO_Init+0x318>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d025      	beq.n	8001672 <HAL_GPIO_Init+0x222>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a50      	ldr	r2, [pc, #320]	@ (800176c <HAL_GPIO_Init+0x31c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d01f      	beq.n	800166e <HAL_GPIO_Init+0x21e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a4f      	ldr	r2, [pc, #316]	@ (8001770 <HAL_GPIO_Init+0x320>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d019      	beq.n	800166a <HAL_GPIO_Init+0x21a>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4e      	ldr	r2, [pc, #312]	@ (8001774 <HAL_GPIO_Init+0x324>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d013      	beq.n	8001666 <HAL_GPIO_Init+0x216>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4d      	ldr	r2, [pc, #308]	@ (8001778 <HAL_GPIO_Init+0x328>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d00d      	beq.n	8001662 <HAL_GPIO_Init+0x212>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4c      	ldr	r2, [pc, #304]	@ (800177c <HAL_GPIO_Init+0x32c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d007      	beq.n	800165e <HAL_GPIO_Init+0x20e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4b      	ldr	r2, [pc, #300]	@ (8001780 <HAL_GPIO_Init+0x330>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d101      	bne.n	800165a <HAL_GPIO_Init+0x20a>
 8001656:	2307      	movs	r3, #7
 8001658:	e00e      	b.n	8001678 <HAL_GPIO_Init+0x228>
 800165a:	2308      	movs	r3, #8
 800165c:	e00c      	b.n	8001678 <HAL_GPIO_Init+0x228>
 800165e:	2306      	movs	r3, #6
 8001660:	e00a      	b.n	8001678 <HAL_GPIO_Init+0x228>
 8001662:	2305      	movs	r3, #5
 8001664:	e008      	b.n	8001678 <HAL_GPIO_Init+0x228>
 8001666:	2304      	movs	r3, #4
 8001668:	e006      	b.n	8001678 <HAL_GPIO_Init+0x228>
 800166a:	2303      	movs	r3, #3
 800166c:	e004      	b.n	8001678 <HAL_GPIO_Init+0x228>
 800166e:	2302      	movs	r3, #2
 8001670:	e002      	b.n	8001678 <HAL_GPIO_Init+0x228>
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <HAL_GPIO_Init+0x228>
 8001676:	2300      	movs	r3, #0
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	f002 0203 	and.w	r2, r2, #3
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4093      	lsls	r3, r2
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001688:	4935      	ldr	r1, [pc, #212]	@ (8001760 <HAL_GPIO_Init+0x310>)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001696:	4b3b      	ldr	r3, [pc, #236]	@ (8001784 <HAL_GPIO_Init+0x334>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ba:	4a32      	ldr	r2, [pc, #200]	@ (8001784 <HAL_GPIO_Init+0x334>)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c0:	4b30      	ldr	r3, [pc, #192]	@ (8001784 <HAL_GPIO_Init+0x334>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e4:	4a27      	ldr	r2, [pc, #156]	@ (8001784 <HAL_GPIO_Init+0x334>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ea:	4b26      	ldr	r3, [pc, #152]	@ (8001784 <HAL_GPIO_Init+0x334>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800170e:	4a1d      	ldr	r2, [pc, #116]	@ (8001784 <HAL_GPIO_Init+0x334>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001714:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <HAL_GPIO_Init+0x334>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001738:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <HAL_GPIO_Init+0x334>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3301      	adds	r3, #1
 8001742:	61fb      	str	r3, [r7, #28]
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	2b0f      	cmp	r3, #15
 8001748:	f67f ae90 	bls.w	800146c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3724      	adds	r7, #36	@ 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40013800 	.word	0x40013800
 8001764:	40020000 	.word	0x40020000
 8001768:	40020400 	.word	0x40020400
 800176c:	40020800 	.word	0x40020800
 8001770:	40020c00 	.word	0x40020c00
 8001774:	40021000 	.word	0x40021000
 8001778:	40021400 	.word	0x40021400
 800177c:	40021800 	.word	0x40021800
 8001780:	40021c00 	.word	0x40021c00
 8001784:	40013c00 	.word	0x40013c00

08001788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	4013      	ands	r3, r2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	e001      	b.n	80017aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	807b      	strh	r3, [r7, #2]
 80017c4:	4613      	mov	r3, r2
 80017c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017c8:	787b      	ldrb	r3, [r7, #1]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017d4:	e003      	b.n	80017de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	041a      	lsls	r2, r3, #16
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	619a      	str	r2, [r3, #24]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e12b      	b.n	8001a56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fa16 	bl	8000c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2224      	movs	r2, #36	@ 0x24
 800181c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800183e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800184e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001850:	f002 fccc 	bl	80041ec <HAL_RCC_GetPCLK1Freq>
 8001854:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4a81      	ldr	r2, [pc, #516]	@ (8001a60 <HAL_I2C_Init+0x274>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d807      	bhi.n	8001870 <HAL_I2C_Init+0x84>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4a80      	ldr	r2, [pc, #512]	@ (8001a64 <HAL_I2C_Init+0x278>)
 8001864:	4293      	cmp	r3, r2
 8001866:	bf94      	ite	ls
 8001868:	2301      	movls	r3, #1
 800186a:	2300      	movhi	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	e006      	b.n	800187e <HAL_I2C_Init+0x92>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4a7d      	ldr	r2, [pc, #500]	@ (8001a68 <HAL_I2C_Init+0x27c>)
 8001874:	4293      	cmp	r3, r2
 8001876:	bf94      	ite	ls
 8001878:	2301      	movls	r3, #1
 800187a:	2300      	movhi	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0e7      	b.n	8001a56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4a78      	ldr	r2, [pc, #480]	@ (8001a6c <HAL_I2C_Init+0x280>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	0c9b      	lsrs	r3, r3, #18
 8001890:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001a60 <HAL_I2C_Init+0x274>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d802      	bhi.n	80018c0 <HAL_I2C_Init+0xd4>
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	3301      	adds	r3, #1
 80018be:	e009      	b.n	80018d4 <HAL_I2C_Init+0xe8>
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018c6:	fb02 f303 	mul.w	r3, r2, r3
 80018ca:	4a69      	ldr	r2, [pc, #420]	@ (8001a70 <HAL_I2C_Init+0x284>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	099b      	lsrs	r3, r3, #6
 80018d2:	3301      	adds	r3, #1
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	430b      	orrs	r3, r1
 80018da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	495c      	ldr	r1, [pc, #368]	@ (8001a60 <HAL_I2C_Init+0x274>)
 80018f0:	428b      	cmp	r3, r1
 80018f2:	d819      	bhi.n	8001928 <HAL_I2C_Init+0x13c>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1e59      	subs	r1, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001902:	1c59      	adds	r1, r3, #1
 8001904:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001908:	400b      	ands	r3, r1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00a      	beq.n	8001924 <HAL_I2C_Init+0x138>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1e59      	subs	r1, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fbb1 f3f3 	udiv	r3, r1, r3
 800191c:	3301      	adds	r3, #1
 800191e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001922:	e051      	b.n	80019c8 <HAL_I2C_Init+0x1dc>
 8001924:	2304      	movs	r3, #4
 8001926:	e04f      	b.n	80019c8 <HAL_I2C_Init+0x1dc>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d111      	bne.n	8001954 <HAL_I2C_Init+0x168>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1e58      	subs	r0, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6859      	ldr	r1, [r3, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	440b      	add	r3, r1
 800193e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001942:	3301      	adds	r3, #1
 8001944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf0c      	ite	eq
 800194c:	2301      	moveq	r3, #1
 800194e:	2300      	movne	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	e012      	b.n	800197a <HAL_I2C_Init+0x18e>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1e58      	subs	r0, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	0099      	lsls	r1, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	fbb0 f3f3 	udiv	r3, r0, r3
 800196a:	3301      	adds	r3, #1
 800196c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf0c      	ite	eq
 8001974:	2301      	moveq	r3, #1
 8001976:	2300      	movne	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_I2C_Init+0x196>
 800197e:	2301      	movs	r3, #1
 8001980:	e022      	b.n	80019c8 <HAL_I2C_Init+0x1dc>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10e      	bne.n	80019a8 <HAL_I2C_Init+0x1bc>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1e58      	subs	r0, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6859      	ldr	r1, [r3, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	440b      	add	r3, r1
 8001998:	fbb0 f3f3 	udiv	r3, r0, r3
 800199c:	3301      	adds	r3, #1
 800199e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019a6:	e00f      	b.n	80019c8 <HAL_I2C_Init+0x1dc>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1e58      	subs	r0, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6859      	ldr	r1, [r3, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	0099      	lsls	r1, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80019be:	3301      	adds	r3, #1
 80019c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	6809      	ldr	r1, [r1, #0]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69da      	ldr	r2, [r3, #28]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6911      	ldr	r1, [r2, #16]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68d2      	ldr	r2, [r2, #12]
 8001a02:	4311      	orrs	r1, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2220      	movs	r2, #32
 8001a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	000186a0 	.word	0x000186a0
 8001a64:	001e847f 	.word	0x001e847f
 8001a68:	003d08ff 	.word	0x003d08ff
 8001a6c:	431bde83 	.word	0x431bde83
 8001a70:	10624dd3 	.word	0x10624dd3

08001a74 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a86:	2b80      	cmp	r3, #128	@ 0x80
 8001a88:	d103      	bne.n	8001a92 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  }
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	460b      	mov	r3, r1
 8001aae:	817b      	strh	r3, [r7, #10]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff faea 	bl	800108c <HAL_GetTick>
 8001ab8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	f040 80e0 	bne.w	8001c88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2319      	movs	r3, #25
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4970      	ldr	r1, [pc, #448]	@ (8001c94 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f001 fcf4 	bl	80034c0 <I2C_WaitOnFlagUntilTimeout>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e0d3      	b.n	8001c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <HAL_I2C_Master_Transmit+0x50>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e0cc      	b.n	8001c8a <HAL_I2C_Master_Transmit+0x1ea>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d007      	beq.n	8001b16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0201 	orr.w	r2, r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2221      	movs	r2, #33	@ 0x21
 8001b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2210      	movs	r2, #16
 8001b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	893a      	ldrh	r2, [r7, #8]
 8001b46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4a50      	ldr	r2, [pc, #320]	@ (8001c98 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b58:	8979      	ldrh	r1, [r7, #10]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	6a3a      	ldr	r2, [r7, #32]
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f001 fb84 	bl	800326c <I2C_MasterRequestWrite>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e08d      	b.n	8001c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b84:	e066      	b.n	8001c54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	6a39      	ldr	r1, [r7, #32]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f001 fdb2 	bl	80036f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00d      	beq.n	8001bb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d107      	bne.n	8001bae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e06b      	b.n	8001c8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	781a      	ldrb	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d11b      	bne.n	8001c28 <HAL_I2C_Master_Transmit+0x188>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d017      	beq.n	8001c28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	781a      	ldrb	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	6a39      	ldr	r1, [r7, #32]
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f001 fda9 	bl	8003784 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00d      	beq.n	8001c54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d107      	bne.n	8001c50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e01a      	b.n	8001c8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d194      	bne.n	8001b86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	e000      	b.n	8001c8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c88:	2302      	movs	r3, #2
  }
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	00100002 	.word	0x00100002
 8001c98:	ffff0000 	.word	0xffff0000

08001c9c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001cbc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cc4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b10      	cmp	r3, #16
 8001cca:	d003      	beq.n	8001cd4 <HAL_I2C_EV_IRQHandler+0x38>
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	2b40      	cmp	r3, #64	@ 0x40
 8001cd0:	f040 80c1 	bne.w	8001e56 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10d      	bne.n	8001d0a <HAL_I2C_EV_IRQHandler+0x6e>
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001cf4:	d003      	beq.n	8001cfe <HAL_I2C_EV_IRQHandler+0x62>
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001cfc:	d101      	bne.n	8001d02 <HAL_I2C_EV_IRQHandler+0x66>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_I2C_EV_IRQHandler+0x68>
 8001d02:	2300      	movs	r3, #0
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	f000 8132 	beq.w	8001f6e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00c      	beq.n	8001d2e <HAL_I2C_EV_IRQHandler+0x92>
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	0a5b      	lsrs	r3, r3, #9
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d006      	beq.n	8001d2e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f001 fdd8 	bl	80038d6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 fcf4 	bl	8002714 <I2C_Master_SB>
 8001d2c:	e092      	b.n	8001e54 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	08db      	lsrs	r3, r3, #3
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <HAL_I2C_EV_IRQHandler+0xb2>
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	0a5b      	lsrs	r3, r3, #9
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fd6a 	bl	8002820 <I2C_Master_ADD10>
 8001d4c:	e082      	b.n	8001e54 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	085b      	lsrs	r3, r3, #1
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d009      	beq.n	8001d6e <HAL_I2C_EV_IRQHandler+0xd2>
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	0a5b      	lsrs	r3, r3, #9
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fd84 	bl	8002874 <I2C_Master_ADDR>
 8001d6c:	e072      	b.n	8001e54 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d03b      	beq.n	8001df2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d88:	f000 80f3 	beq.w	8001f72 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	09db      	lsrs	r3, r3, #7
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00f      	beq.n	8001db8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	0a9b      	lsrs	r3, r3, #10
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d009      	beq.n	8001db8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d103      	bne.n	8001db8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f94c 	bl	800204e <I2C_MasterTransmit_TXE>
 8001db6:	e04d      	b.n	8001e54 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80d6 	beq.w	8001f72 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	0a5b      	lsrs	r3, r3, #9
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80cf 	beq.w	8001f72 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001dd4:	7bbb      	ldrb	r3, [r7, #14]
 8001dd6:	2b21      	cmp	r3, #33	@ 0x21
 8001dd8:	d103      	bne.n	8001de2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f9d3 	bl	8002186 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001de0:	e0c7      	b.n	8001f72 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	2b40      	cmp	r3, #64	@ 0x40
 8001de6:	f040 80c4 	bne.w	8001f72 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fa41 	bl	8002272 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001df0:	e0bf      	b.n	8001f72 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e00:	f000 80b7 	beq.w	8001f72 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	099b      	lsrs	r3, r3, #6
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00f      	beq.n	8001e30 <HAL_I2C_EV_IRQHandler+0x194>
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	0a9b      	lsrs	r3, r3, #10
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d009      	beq.n	8001e30 <HAL_I2C_EV_IRQHandler+0x194>
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d103      	bne.n	8001e30 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 faba 	bl	80023a2 <I2C_MasterReceive_RXNE>
 8001e2e:	e011      	b.n	8001e54 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 809a 	beq.w	8001f72 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	0a5b      	lsrs	r3, r3, #9
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8093 	beq.w	8001f72 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 fb70 	bl	8002532 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e52:	e08e      	b.n	8001f72 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e54:	e08d      	b.n	8001f72 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d004      	beq.n	8001e68 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	e007      	b.n	8001e78 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	085b      	lsrs	r3, r3, #1
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d012      	beq.n	8001eaa <HAL_I2C_EV_IRQHandler+0x20e>
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	0a5b      	lsrs	r3, r3, #9
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00c      	beq.n	8001eaa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001ea0:	69b9      	ldr	r1, [r7, #24]
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 ff35 	bl	8002d12 <I2C_Slave_ADDR>
 8001ea8:	e066      	b.n	8001f78 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <HAL_I2C_EV_IRQHandler+0x22e>
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	0a5b      	lsrs	r3, r3, #9
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 ff70 	bl	8002da8 <I2C_Slave_STOPF>
 8001ec8:	e056      	b.n	8001f78 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	2b21      	cmp	r3, #33	@ 0x21
 8001ece:	d002      	beq.n	8001ed6 <HAL_I2C_EV_IRQHandler+0x23a>
 8001ed0:	7bbb      	ldrb	r3, [r7, #14]
 8001ed2:	2b29      	cmp	r3, #41	@ 0x29
 8001ed4:	d125      	bne.n	8001f22 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	09db      	lsrs	r3, r3, #7
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00f      	beq.n	8001f02 <HAL_I2C_EV_IRQHandler+0x266>
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	0a9b      	lsrs	r3, r3, #10
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_I2C_EV_IRQHandler+0x266>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d103      	bne.n	8001f02 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fe4b 	bl	8002b96 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f00:	e039      	b.n	8001f76 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d033      	beq.n	8001f76 <HAL_I2C_EV_IRQHandler+0x2da>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	0a5b      	lsrs	r3, r3, #9
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d02d      	beq.n	8001f76 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fe78 	bl	8002c10 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f20:	e029      	b.n	8001f76 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	099b      	lsrs	r3, r3, #6
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00f      	beq.n	8001f4e <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	0a9b      	lsrs	r3, r3, #10
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fe83 	bl	8002c52 <I2C_SlaveReceive_RXNE>
 8001f4c:	e014      	b.n	8001f78 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00e      	beq.n	8001f78 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	0a5b      	lsrs	r3, r3, #9
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 feb1 	bl	8002cce <I2C_SlaveReceive_BTF>
 8001f6c:	e004      	b.n	8001f78 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001f6e:	bf00      	nop
 8001f70:	e002      	b.n	8001f78 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f72:	bf00      	nop
 8001f74:	e000      	b.n	8001f78 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f76:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	70fb      	strb	r3, [r7, #3]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b084      	sub	sp, #16
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800205c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002064:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002070:	2b00      	cmp	r3, #0
 8002072:	d150      	bne.n	8002116 <I2C_MasterTransmit_TXE+0xc8>
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	2b21      	cmp	r3, #33	@ 0x21
 8002078:	d14d      	bne.n	8002116 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b08      	cmp	r3, #8
 800207e:	d01d      	beq.n	80020bc <I2C_MasterTransmit_TXE+0x6e>
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b20      	cmp	r3, #32
 8002084:	d01a      	beq.n	80020bc <I2C_MasterTransmit_TXE+0x6e>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800208c:	d016      	beq.n	80020bc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800209c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2211      	movs	r2, #17
 80020a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff62 	bl	8001f7e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020ba:	e060      	b.n	800217e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80020ca:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020da:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b40      	cmp	r3, #64	@ 0x40
 80020f4:	d107      	bne.n	8002106 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ff7d 	bl	8001ffe <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002104:	e03b      	b.n	800217e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ff35 	bl	8001f7e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002114:	e033      	b.n	800217e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	2b21      	cmp	r3, #33	@ 0x21
 800211a:	d005      	beq.n	8002128 <I2C_MasterTransmit_TXE+0xda>
 800211c:	7bbb      	ldrb	r3, [r7, #14]
 800211e:	2b40      	cmp	r3, #64	@ 0x40
 8002120:	d12d      	bne.n	800217e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	2b22      	cmp	r3, #34	@ 0x22
 8002126:	d12a      	bne.n	800217e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d108      	bne.n	8002144 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002140:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002142:	e01c      	b.n	800217e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b40      	cmp	r3, #64	@ 0x40
 800214e:	d103      	bne.n	8002158 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f88e 	bl	8002272 <I2C_MemoryTransmit_TXE_BTF>
}
 8002156:	e012      	b.n	800217e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	781a      	ldrb	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002172:	b29b      	uxth	r3, r3
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800217c:	e7ff      	b.n	800217e <I2C_MasterTransmit_TXE+0x130>
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b084      	sub	sp, #16
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002192:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b21      	cmp	r3, #33	@ 0x21
 800219e:	d164      	bne.n	800226a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d012      	beq.n	80021d0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ae:	781a      	ldrb	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80021ce:	e04c      	b.n	800226a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d01d      	beq.n	8002212 <I2C_MasterTransmit_BTF+0x8c>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b20      	cmp	r3, #32
 80021da:	d01a      	beq.n	8002212 <I2C_MasterTransmit_BTF+0x8c>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80021e2:	d016      	beq.n	8002212 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80021f2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2211      	movs	r2, #17
 80021f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff feb7 	bl	8001f7e <HAL_I2C_MasterTxCpltCallback>
}
 8002210:	e02b      	b.n	800226a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002220:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002230:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b40      	cmp	r3, #64	@ 0x40
 800224a:	d107      	bne.n	800225c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff fed2 	bl	8001ffe <HAL_I2C_MemTxCpltCallback>
}
 800225a:	e006      	b.n	800226a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff fe8a 	bl	8001f7e <HAL_I2C_MasterTxCpltCallback>
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002280:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002286:	2b00      	cmp	r3, #0
 8002288:	d11d      	bne.n	80022c6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228e:	2b01      	cmp	r3, #1
 8002290:	d10b      	bne.n	80022aa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002296:	b2da      	uxtb	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022a2:	1c9a      	adds	r2, r3, #2
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80022a8:	e077      	b.n	800239a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	121b      	asrs	r3, r3, #8
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80022c4:	e069      	b.n	800239a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d10b      	bne.n	80022e6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80022e4:	e059      	b.n	800239a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d152      	bne.n	8002394 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	2b22      	cmp	r3, #34	@ 0x22
 80022f2:	d10d      	bne.n	8002310 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002302:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800230e:	e044      	b.n	800239a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d015      	beq.n	8002346 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	2b21      	cmp	r3, #33	@ 0x21
 800231e:	d112      	bne.n	8002346 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002344:	e029      	b.n	800239a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234a:	b29b      	uxth	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d124      	bne.n	800239a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	2b21      	cmp	r3, #33	@ 0x21
 8002354:	d121      	bne.n	800239a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002364:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002374:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff fe36 	bl	8001ffe <HAL_I2C_MemTxCpltCallback>
}
 8002392:	e002      	b.n	800239a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff fb6d 	bl	8001a74 <I2C_Flush_DR>
}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b22      	cmp	r3, #34	@ 0x22
 80023b4:	f040 80b9 	bne.w	800252a <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023bc:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d921      	bls.n	8002410 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	f040 8096 	bne.w	800252a <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800240c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800240e:	e08c      	b.n	800252a <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	2b02      	cmp	r3, #2
 8002416:	d07f      	beq.n	8002518 <I2C_MasterReceive_RXNE+0x176>
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d002      	beq.n	8002424 <I2C_MasterReceive_RXNE+0x82>
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d179      	bne.n	8002518 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f001 f9f5 	bl	8003814 <I2C_WaitOnSTOPRequestThroughIT>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d14c      	bne.n	80024ca <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800243e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800244e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b40      	cmp	r3, #64	@ 0x40
 8002488:	d10a      	bne.n	80024a0 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff fdba 	bl	8002012 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800249e:	e044      	b.n	800252a <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d002      	beq.n	80024b4 <I2C_MasterReceive_RXNE+0x112>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	d103      	bne.n	80024bc <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80024ba:	e002      	b.n	80024c2 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2212      	movs	r2, #18
 80024c0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff fd65 	bl	8001f92 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024c8:	e02f      	b.n	800252a <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80024d8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff fd88 	bl	8002026 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002516:	e008      	b.n	800252a <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002526:	605a      	str	r2, [r3, #4]
}
 8002528:	e7ff      	b.n	800252a <I2C_MasterReceive_RXNE+0x188>
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b04      	cmp	r3, #4
 8002548:	d11b      	bne.n	8002582 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002558:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002580:	e0c4      	b.n	800270c <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b03      	cmp	r3, #3
 800258a:	d129      	bne.n	80025e0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800259a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d00a      	beq.n	80025b8 <I2C_MasterReceive_BTF+0x86>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d007      	beq.n	80025b8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025b6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80025de:	e095      	b.n	800270c <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d17d      	bne.n	80026e6 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d002      	beq.n	80025f6 <I2C_MasterReceive_BTF+0xc4>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	d108      	bne.n	8002608 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e016      	b.n	8002636 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b04      	cmp	r3, #4
 800260c:	d002      	beq.n	8002614 <I2C_MasterReceive_BTF+0xe2>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d108      	bne.n	8002626 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e007      	b.n	8002636 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002634:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002690:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b40      	cmp	r3, #64	@ 0x40
 80026a4:	d10a      	bne.n	80026bc <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff fcac 	bl	8002012 <HAL_I2C_MemRxCpltCallback>
}
 80026ba:	e027      	b.n	800270c <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d002      	beq.n	80026d0 <I2C_MasterReceive_BTF+0x19e>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	d103      	bne.n	80026d8 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80026d6:	e002      	b.n	80026de <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2212      	movs	r2, #18
 80026dc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff fc57 	bl	8001f92 <HAL_I2C_MasterRxCpltCallback>
}
 80026e4:	e012      	b.n	800270c <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002702:	b29b      	uxth	r3, r3
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b40      	cmp	r3, #64	@ 0x40
 8002726:	d117      	bne.n	8002758 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800272c:	2b00      	cmp	r3, #0
 800272e:	d109      	bne.n	8002744 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002734:	b2db      	uxtb	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002740:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002742:	e067      	b.n	8002814 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	611a      	str	r2, [r3, #16]
}
 8002756:	e05d      	b.n	8002814 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002760:	d133      	bne.n	80027ca <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b21      	cmp	r3, #33	@ 0x21
 800276c:	d109      	bne.n	8002782 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800277e:	611a      	str	r2, [r3, #16]
 8002780:	e008      	b.n	8002794 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	b2da      	uxtb	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <I2C_Master_SB+0x92>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d108      	bne.n	80027b8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d032      	beq.n	8002814 <I2C_Master_SB+0x100>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d02d      	beq.n	8002814 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027c6:	605a      	str	r2, [r3, #4]
}
 80027c8:	e024      	b.n	8002814 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10e      	bne.n	80027f0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	11db      	asrs	r3, r3, #7
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f003 0306 	and.w	r3, r3, #6
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f063 030f 	orn	r3, r3, #15
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	611a      	str	r2, [r3, #16]
}
 80027ee:	e011      	b.n	8002814 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d10d      	bne.n	8002814 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	11db      	asrs	r3, r3, #7
 8002800:	b2db      	uxtb	r3, r3
 8002802:	f003 0306 	and.w	r3, r3, #6
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f063 030e 	orn	r3, r3, #14
 800280c:	b2da      	uxtb	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	611a      	str	r2, [r3, #16]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282c:	b2da      	uxtb	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002838:	2b00      	cmp	r3, #0
 800283a:	d004      	beq.n	8002846 <I2C_Master_ADD10+0x26>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002842:	2b00      	cmp	r3, #0
 8002844:	d108      	bne.n	8002858 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00c      	beq.n	8002868 <I2C_Master_ADD10+0x48>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002854:	2b00      	cmp	r3, #0
 8002856:	d007      	beq.n	8002868 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002866:	605a      	str	r2, [r3, #4]
  }
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002874:	b480      	push	{r7}
 8002876:	b091      	sub	sp, #68	@ 0x44
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002882:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b22      	cmp	r3, #34	@ 0x22
 800289c:	f040 8169 	bne.w	8002b72 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10f      	bne.n	80028c8 <I2C_Master_ADDR+0x54>
 80028a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80028ac:	2b40      	cmp	r3, #64	@ 0x40
 80028ae:	d10b      	bne.n	80028c8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b0:	2300      	movs	r3, #0
 80028b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80028c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c6:	e160      	b.n	8002b8a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d11d      	bne.n	800290c <I2C_Master_ADDR+0x98>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80028d8:	d118      	bne.n	800290c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028da:	2300      	movs	r3, #0
 80028dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028fe:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	651a      	str	r2, [r3, #80]	@ 0x50
 800290a:	e13e      	b.n	8002b8a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d113      	bne.n	800293e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002916:	2300      	movs	r3, #0
 8002918:	62bb      	str	r3, [r7, #40]	@ 0x28
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800292a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e115      	b.n	8002b6a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	f040 808a 	bne.w	8002a5e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800294a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800294c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002950:	d137      	bne.n	80029c2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002960:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800296c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002970:	d113      	bne.n	800299a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002980:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	e0e7      	b.n	8002b6a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299a:	2300      	movs	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	623b      	str	r3, [r7, #32]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	623b      	str	r3, [r7, #32]
 80029ae:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e0d3      	b.n	8002b6a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80029c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d02e      	beq.n	8002a26 <I2C_Master_ADDR+0x1b2>
 80029c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d02b      	beq.n	8002a26 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80029ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029d0:	2b12      	cmp	r3, #18
 80029d2:	d102      	bne.n	80029da <I2C_Master_ADDR+0x166>
 80029d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d125      	bne.n	8002a26 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80029da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d00e      	beq.n	80029fe <I2C_Master_ADDR+0x18a>
 80029e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d00b      	beq.n	80029fe <I2C_Master_ADDR+0x18a>
 80029e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d008      	beq.n	80029fe <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	e007      	b.n	8002a0e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a0c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	e0a1      	b.n	8002b6a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a34:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e085      	b.n	8002b6a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d14d      	bne.n	8002b04 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d016      	beq.n	8002a9c <I2C_Master_ADDR+0x228>
 8002a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d013      	beq.n	8002a9c <I2C_Master_ADDR+0x228>
 8002a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d010      	beq.n	8002a9c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a88:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	e007      	b.n	8002aac <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002aaa:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ab6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aba:	d117      	bne.n	8002aec <I2C_Master_ADDR+0x278>
 8002abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002abe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ac2:	d00b      	beq.n	8002adc <I2C_Master_ADDR+0x268>
 8002ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d008      	beq.n	8002adc <I2C_Master_ADDR+0x268>
 8002aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d005      	beq.n	8002adc <I2C_Master_ADDR+0x268>
 8002ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d002      	beq.n	8002adc <I2C_Master_ADDR+0x268>
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d107      	bne.n	8002aec <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002aea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	e032      	b.n	8002b6a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b12:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b22:	d117      	bne.n	8002b54 <I2C_Master_ADDR+0x2e0>
 8002b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b26:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b2a:	d00b      	beq.n	8002b44 <I2C_Master_ADDR+0x2d0>
 8002b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d008      	beq.n	8002b44 <I2C_Master_ADDR+0x2d0>
 8002b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d005      	beq.n	8002b44 <I2C_Master_ADDR+0x2d0>
 8002b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d002      	beq.n	8002b44 <I2C_Master_ADDR+0x2d0>
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d107      	bne.n	8002b54 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b52:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002b70:	e00b      	b.n	8002b8a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	e7ff      	b.n	8002b8a <I2C_Master_ADDR+0x316>
 8002b8a:	bf00      	nop
 8002b8c:	3744      	adds	r7, #68	@ 0x44
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ba4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d02b      	beq.n	8002c08 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d114      	bne.n	8002c08 <I2C_SlaveTransmit_TXE+0x72>
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2b29      	cmp	r3, #41	@ 0x29
 8002be2:	d111      	bne.n	8002c08 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bf2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2221      	movs	r2, #33	@ 0x21
 8002bf8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2228      	movs	r2, #40	@ 0x28
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff f9cf 	bl	8001fa6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d011      	beq.n	8002c46 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	781a      	ldrb	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c60:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d02c      	beq.n	8002cc6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d114      	bne.n	8002cc6 <I2C_SlaveReceive_RXNE+0x74>
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ca0:	d111      	bne.n	8002cc6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cb0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2222      	movs	r2, #34	@ 0x22
 8002cb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2228      	movs	r2, #40	@ 0x28
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff f97a 	bl	8001fba <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d012      	beq.n	8002d06 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d2c:	2b28      	cmp	r3, #40	@ 0x28
 8002d2e:	d127      	bne.n	8002d80 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d3e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	09db      	lsrs	r3, r3, #7
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d103      	bne.n	8002d64 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	81bb      	strh	r3, [r7, #12]
 8002d62:	e002      	b.n	8002d6a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002d72:	89ba      	ldrh	r2, [r7, #12]
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	4619      	mov	r1, r3
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff f928 	bl	8001fce <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d7e:	e00e      	b.n	8002d9e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d80:	2300      	movs	r3, #0
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002db6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002dc6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002df4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e04:	d172      	bne.n	8002eec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	2b22      	cmp	r3, #34	@ 0x22
 8002e0a:	d002      	beq.n	8002e12 <I2C_Slave_STOPF+0x6a>
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e10:	d135      	bne.n	8002e7e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	f043 0204 	orr.w	r2, r3, #4
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe faf1 	bl	8001432 <HAL_DMA_GetState>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d049      	beq.n	8002eea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5a:	4a69      	ldr	r2, [pc, #420]	@ (8003000 <I2C_Slave_STOPF+0x258>)
 8002e5c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fac3 	bl	80013ee <HAL_DMA_Abort_IT>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d03d      	beq.n	8002eea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e7c:	e035      	b.n	8002eea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	f043 0204 	orr.w	r2, r3, #4
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eb0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fabb 	bl	8001432 <HAL_DMA_GetState>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d014      	beq.n	8002eec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec6:	4a4e      	ldr	r2, [pc, #312]	@ (8003000 <I2C_Slave_STOPF+0x258>)
 8002ec8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe fa8d 	bl	80013ee <HAL_DMA_Abort_IT>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4798      	blx	r3
 8002ee8:	e000      	b.n	8002eec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002eea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d03e      	beq.n	8002f74 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d112      	bne.n	8002f2a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f34:	2b40      	cmp	r3, #64	@ 0x40
 8002f36:	d112      	bne.n	8002f5e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	f043 0204 	orr.w	r2, r3, #4
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f843 	bl	8003008 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002f82:	e039      	b.n	8002ff8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f88:	d109      	bne.n	8002f9e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2228      	movs	r2, #40	@ 0x28
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff f80e 	bl	8001fba <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b28      	cmp	r3, #40	@ 0x28
 8002fa8:	d111      	bne.n	8002fce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a15      	ldr	r2, [pc, #84]	@ (8003004 <I2C_Slave_STOPF+0x25c>)
 8002fae:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff f80f 	bl	8001fea <HAL_I2C_ListenCpltCallback>
}
 8002fcc:	e014      	b.n	8002ff8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	2b22      	cmp	r3, #34	@ 0x22
 8002fd4:	d002      	beq.n	8002fdc <I2C_Slave_STOPF+0x234>
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	2b22      	cmp	r3, #34	@ 0x22
 8002fda:	d10d      	bne.n	8002ff8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fe ffe1 	bl	8001fba <HAL_I2C_SlaveRxCpltCallback>
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	08003371 	.word	0x08003371
 8003004:	ffff0000 	.word	0xffff0000

08003008 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003016:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800301e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003020:	7bbb      	ldrb	r3, [r7, #14]
 8003022:	2b10      	cmp	r3, #16
 8003024:	d002      	beq.n	800302c <I2C_ITError+0x24>
 8003026:	7bbb      	ldrb	r3, [r7, #14]
 8003028:	2b40      	cmp	r3, #64	@ 0x40
 800302a:	d10a      	bne.n	8003042 <I2C_ITError+0x3a>
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b22      	cmp	r3, #34	@ 0x22
 8003030:	d107      	bne.n	8003042 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003040:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003048:	2b28      	cmp	r3, #40	@ 0x28
 800304a:	d107      	bne.n	800305c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2228      	movs	r2, #40	@ 0x28
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800305a:	e015      	b.n	8003088 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003066:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800306a:	d00a      	beq.n	8003082 <I2C_ITError+0x7a>
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b60      	cmp	r3, #96	@ 0x60
 8003070:	d007      	beq.n	8003082 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003092:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003096:	d162      	bne.n	800315e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030a6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d020      	beq.n	80030f8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ba:	4a6a      	ldr	r2, [pc, #424]	@ (8003264 <I2C_ITError+0x25c>)
 80030bc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe f993 	bl	80013ee <HAL_DMA_Abort_IT>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 8089 	beq.w	80031e2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030f2:	4610      	mov	r0, r2
 80030f4:	4798      	blx	r3
 80030f6:	e074      	b.n	80031e2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fc:	4a59      	ldr	r2, [pc, #356]	@ (8003264 <I2C_ITError+0x25c>)
 80030fe:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	4618      	mov	r0, r3
 8003106:	f7fe f972 	bl	80013ee <HAL_DMA_Abort_IT>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d068      	beq.n	80031e2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311a:	2b40      	cmp	r3, #64	@ 0x40
 800311c:	d10b      	bne.n	8003136 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0201 	bic.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003158:	4610      	mov	r0, r2
 800315a:	4798      	blx	r3
 800315c:	e041      	b.n	80031e2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b60      	cmp	r3, #96	@ 0x60
 8003168:	d125      	bne.n	80031b6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003182:	2b40      	cmp	r3, #64	@ 0x40
 8003184:	d10b      	bne.n	800319e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fe ff43 	bl	800203a <HAL_I2C_AbortCpltCallback>
 80031b4:	e015      	b.n	80031e2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c0:	2b40      	cmp	r3, #64	@ 0x40
 80031c2:	d10b      	bne.n	80031dc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7fe ff22 	bl	8002026 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10e      	bne.n	8003210 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d109      	bne.n	8003210 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003202:	2b00      	cmp	r3, #0
 8003204:	d104      	bne.n	8003210 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800320c:	2b00      	cmp	r3, #0
 800320e:	d007      	beq.n	8003220 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800321e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003226:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b04      	cmp	r3, #4
 8003232:	d113      	bne.n	800325c <I2C_ITError+0x254>
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	2b28      	cmp	r3, #40	@ 0x28
 8003238:	d110      	bne.n	800325c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a0a      	ldr	r2, [pc, #40]	@ (8003268 <I2C_ITError+0x260>)
 800323e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe fec7 	bl	8001fea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	08003371 	.word	0x08003371
 8003268:	ffff0000 	.word	0xffff0000

0800326c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af02      	add	r7, sp, #8
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	460b      	mov	r3, r1
 800327a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003280:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d006      	beq.n	8003296 <I2C_MasterRequestWrite+0x2a>
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d003      	beq.n	8003296 <I2C_MasterRequestWrite+0x2a>
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003294:	d108      	bne.n	80032a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e00b      	b.n	80032c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ac:	2b12      	cmp	r3, #18
 80032ae:	d107      	bne.n	80032c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f8f7 	bl	80034c0 <I2C_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00d      	beq.n	80032f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032e6:	d103      	bne.n	80032f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e035      	b.n	8003360 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032fc:	d108      	bne.n	8003310 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032fe:	897b      	ldrh	r3, [r7, #10]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800330c:	611a      	str	r2, [r3, #16]
 800330e:	e01b      	b.n	8003348 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003310:	897b      	ldrh	r3, [r7, #10]
 8003312:	11db      	asrs	r3, r3, #7
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f003 0306 	and.w	r3, r3, #6
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f063 030f 	orn	r3, r3, #15
 8003320:	b2da      	uxtb	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	490e      	ldr	r1, [pc, #56]	@ (8003368 <I2C_MasterRequestWrite+0xfc>)
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f940 	bl	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e010      	b.n	8003360 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800333e:	897b      	ldrh	r3, [r7, #10]
 8003340:	b2da      	uxtb	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	4907      	ldr	r1, [pc, #28]	@ (800336c <I2C_MasterRequestWrite+0x100>)
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f930 	bl	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	00010008 	.word	0x00010008
 800336c:	00010002 	.word	0x00010002

08003370 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003380:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003388:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800338a:	4b4b      	ldr	r3, [pc, #300]	@ (80034b8 <I2C_DMAAbort+0x148>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	08db      	lsrs	r3, r3, #3
 8003390:	4a4a      	ldr	r2, [pc, #296]	@ (80034bc <I2C_DMAAbort+0x14c>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	0a1a      	lsrs	r2, r3, #8
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	00da      	lsls	r2, r3, #3
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	f043 0220 	orr.w	r2, r3, #32
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80033b6:	e00a      	b.n	80033ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033cc:	d0ea      	beq.n	80033a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033da:	2200      	movs	r2, #0
 80033dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ea:	2200      	movs	r2, #0
 80033ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2200      	movs	r2, #0
 8003402:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003410:	2200      	movs	r2, #0
 8003412:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003420:	2200      	movs	r2, #0
 8003422:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b60      	cmp	r3, #96	@ 0x60
 800343e:	d10e      	bne.n	800345e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2200      	movs	r2, #0
 8003454:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003456:	6978      	ldr	r0, [r7, #20]
 8003458:	f7fe fdef 	bl	800203a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800345c:	e027      	b.n	80034ae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800345e:	7cfb      	ldrb	r3, [r7, #19]
 8003460:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003464:	2b28      	cmp	r3, #40	@ 0x28
 8003466:	d117      	bne.n	8003498 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003486:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2228      	movs	r2, #40	@ 0x28
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003496:	e007      	b.n	80034a8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80034a8:	6978      	ldr	r0, [r7, #20]
 80034aa:	f7fe fdbc 	bl	8002026 <HAL_I2C_ErrorCallback>
}
 80034ae:	bf00      	nop
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000018 	.word	0x20000018
 80034bc:	14f8b589 	.word	0x14f8b589

080034c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	4613      	mov	r3, r2
 80034ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d0:	e048      	b.n	8003564 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d044      	beq.n	8003564 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034da:	f7fd fdd7 	bl	800108c <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d302      	bcc.n	80034f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d139      	bne.n	8003564 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	0c1b      	lsrs	r3, r3, #16
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d10d      	bne.n	8003516 <I2C_WaitOnFlagUntilTimeout+0x56>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	43da      	mvns	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	4013      	ands	r3, r2
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	e00c      	b.n	8003530 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	43da      	mvns	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4013      	ands	r3, r2
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf0c      	ite	eq
 8003528:	2301      	moveq	r3, #1
 800352a:	2300      	movne	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	429a      	cmp	r2, r3
 8003534:	d116      	bne.n	8003564 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e023      	b.n	80035ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	0c1b      	lsrs	r3, r3, #16
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d10d      	bne.n	800358a <I2C_WaitOnFlagUntilTimeout+0xca>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	43da      	mvns	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	4013      	ands	r3, r2
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	e00c      	b.n	80035a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	43da      	mvns	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4013      	ands	r3, r2
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	bf0c      	ite	eq
 800359c:	2301      	moveq	r3, #1
 800359e:	2300      	movne	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	461a      	mov	r2, r3
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d093      	beq.n	80034d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035c2:	e071      	b.n	80036a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035d2:	d123      	bne.n	800361c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003608:	f043 0204 	orr.w	r2, r3, #4
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e067      	b.n	80036ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003622:	d041      	beq.n	80036a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003624:	f7fd fd32 	bl	800108c <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	429a      	cmp	r2, r3
 8003632:	d302      	bcc.n	800363a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d136      	bne.n	80036a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	0c1b      	lsrs	r3, r3, #16
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d10c      	bne.n	800365e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	43da      	mvns	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4013      	ands	r3, r2
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf14      	ite	ne
 8003656:	2301      	movne	r3, #1
 8003658:	2300      	moveq	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	e00b      	b.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	43da      	mvns	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	4013      	ands	r3, r2
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d016      	beq.n	80036a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003694:	f043 0220 	orr.w	r2, r3, #32
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e021      	b.n	80036ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	0c1b      	lsrs	r3, r3, #16
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d10c      	bne.n	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	43da      	mvns	r2, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	4013      	ands	r3, r2
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e00b      	b.n	80036e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	43da      	mvns	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4013      	ands	r3, r2
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	bf14      	ite	ne
 80036de:	2301      	movne	r3, #1
 80036e0:	2300      	moveq	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f47f af6d 	bne.w	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003700:	e034      	b.n	800376c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f8b8 	bl	8003878 <I2C_IsAcknowledgeFailed>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e034      	b.n	800377c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d028      	beq.n	800376c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371a:	f7fd fcb7 	bl	800108c <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	429a      	cmp	r2, r3
 8003728:	d302      	bcc.n	8003730 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d11d      	bne.n	800376c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800373a:	2b80      	cmp	r3, #128	@ 0x80
 800373c:	d016      	beq.n	800376c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003758:	f043 0220 	orr.w	r2, r3, #32
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e007      	b.n	800377c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003776:	2b80      	cmp	r3, #128	@ 0x80
 8003778:	d1c3      	bne.n	8003702 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003790:	e034      	b.n	80037fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f870 	bl	8003878 <I2C_IsAcknowledgeFailed>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e034      	b.n	800380c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d028      	beq.n	80037fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037aa:	f7fd fc6f 	bl	800108c <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d302      	bcc.n	80037c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d11d      	bne.n	80037fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d016      	beq.n	80037fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e8:	f043 0220 	orr.w	r2, r3, #32
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e007      	b.n	800380c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b04      	cmp	r3, #4
 8003808:	d1c3      	bne.n	8003792 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003820:	4b13      	ldr	r3, [pc, #76]	@ (8003870 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	08db      	lsrs	r3, r3, #3
 8003826:	4a13      	ldr	r2, [pc, #76]	@ (8003874 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003828:	fba2 2303 	umull	r2, r3, r2, r3
 800382c:	0a1a      	lsrs	r2, r3, #8
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	3b01      	subs	r3, #1
 800383a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d107      	bne.n	8003852 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	f043 0220 	orr.w	r2, r3, #32
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e008      	b.n	8003864 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800385c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003860:	d0e9      	beq.n	8003836 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	20000018 	.word	0x20000018
 8003874:	14f8b589 	.word	0x14f8b589

08003878 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800388a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388e:	d11b      	bne.n	80038c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003898:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	f043 0204 	orr.w	r2, r3, #4
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80038e6:	d103      	bne.n	80038f0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80038ee:	e007      	b.n	8003900 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80038f8:	d102      	bne.n	8003900 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2208      	movs	r2, #8
 80038fe:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e267      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d075      	beq.n	8003a16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800392a:	4b88      	ldr	r3, [pc, #544]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b04      	cmp	r3, #4
 8003934:	d00c      	beq.n	8003950 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003936:	4b85      	ldr	r3, [pc, #532]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800393e:	2b08      	cmp	r3, #8
 8003940:	d112      	bne.n	8003968 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003942:	4b82      	ldr	r3, [pc, #520]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800394a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800394e:	d10b      	bne.n	8003968 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003950:	4b7e      	ldr	r3, [pc, #504]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d05b      	beq.n	8003a14 <HAL_RCC_OscConfig+0x108>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d157      	bne.n	8003a14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e242      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003970:	d106      	bne.n	8003980 <HAL_RCC_OscConfig+0x74>
 8003972:	4b76      	ldr	r3, [pc, #472]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a75      	ldr	r2, [pc, #468]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e01d      	b.n	80039bc <HAL_RCC_OscConfig+0xb0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003988:	d10c      	bne.n	80039a4 <HAL_RCC_OscConfig+0x98>
 800398a:	4b70      	ldr	r3, [pc, #448]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a6f      	ldr	r2, [pc, #444]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4b6d      	ldr	r3, [pc, #436]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a6c      	ldr	r2, [pc, #432]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e00b      	b.n	80039bc <HAL_RCC_OscConfig+0xb0>
 80039a4:	4b69      	ldr	r3, [pc, #420]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a68      	ldr	r2, [pc, #416]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	4b66      	ldr	r3, [pc, #408]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a65      	ldr	r2, [pc, #404]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d013      	beq.n	80039ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fd fb62 	bl	800108c <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039cc:	f7fd fb5e 	bl	800108c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	@ 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e207      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039de:	4b5b      	ldr	r3, [pc, #364]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0xc0>
 80039ea:	e014      	b.n	8003a16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ec:	f7fd fb4e 	bl	800108c <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f4:	f7fd fb4a 	bl	800108c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	@ 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e1f3      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a06:	4b51      	ldr	r3, [pc, #324]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0xe8>
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d063      	beq.n	8003aea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a22:	4b4a      	ldr	r3, [pc, #296]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00b      	beq.n	8003a46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2e:	4b47      	ldr	r3, [pc, #284]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d11c      	bne.n	8003a74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3a:	4b44      	ldr	r3, [pc, #272]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d116      	bne.n	8003a74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a46:	4b41      	ldr	r3, [pc, #260]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_RCC_OscConfig+0x152>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d001      	beq.n	8003a5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e1c7      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4937      	ldr	r1, [pc, #220]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a72:	e03a      	b.n	8003aea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d020      	beq.n	8003abe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a7c:	4b34      	ldr	r3, [pc, #208]	@ (8003b50 <HAL_RCC_OscConfig+0x244>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fd fb03 	bl	800108c <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8a:	f7fd faff 	bl	800108c <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e1a8      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa8:	4b28      	ldr	r3, [pc, #160]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4925      	ldr	r1, [pc, #148]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]
 8003abc:	e015      	b.n	8003aea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003abe:	4b24      	ldr	r3, [pc, #144]	@ (8003b50 <HAL_RCC_OscConfig+0x244>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fae2 	bl	800108c <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003acc:	f7fd fade 	bl	800108c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e187      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ade:	4b1b      	ldr	r3, [pc, #108]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d036      	beq.n	8003b64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d016      	beq.n	8003b2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afe:	4b15      	ldr	r3, [pc, #84]	@ (8003b54 <HAL_RCC_OscConfig+0x248>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7fd fac2 	bl	800108c <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b0c:	f7fd fabe 	bl	800108c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e167      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x200>
 8003b2a:	e01b      	b.n	8003b64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b2c:	4b09      	ldr	r3, [pc, #36]	@ (8003b54 <HAL_RCC_OscConfig+0x248>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b32:	f7fd faab 	bl	800108c <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b38:	e00e      	b.n	8003b58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3a:	f7fd faa7 	bl	800108c <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d907      	bls.n	8003b58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e150      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	42470000 	.word	0x42470000
 8003b54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b58:	4b88      	ldr	r3, [pc, #544]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1ea      	bne.n	8003b3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8097 	beq.w	8003ca0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b72:	2300      	movs	r3, #0
 8003b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b76:	4b81      	ldr	r3, [pc, #516]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10f      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	4b7d      	ldr	r3, [pc, #500]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b92:	4b7a      	ldr	r3, [pc, #488]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9a:	60bb      	str	r3, [r7, #8]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba2:	4b77      	ldr	r3, [pc, #476]	@ (8003d80 <HAL_RCC_OscConfig+0x474>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d118      	bne.n	8003be0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bae:	4b74      	ldr	r3, [pc, #464]	@ (8003d80 <HAL_RCC_OscConfig+0x474>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a73      	ldr	r2, [pc, #460]	@ (8003d80 <HAL_RCC_OscConfig+0x474>)
 8003bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bba:	f7fd fa67 	bl	800108c <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc2:	f7fd fa63 	bl	800108c <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e10c      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8003d80 <HAL_RCC_OscConfig+0x474>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d106      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x2ea>
 8003be8:	4b64      	ldr	r3, [pc, #400]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bec:	4a63      	ldr	r2, [pc, #396]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf4:	e01c      	b.n	8003c30 <HAL_RCC_OscConfig+0x324>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b05      	cmp	r3, #5
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCC_OscConfig+0x30c>
 8003bfe:	4b5f      	ldr	r3, [pc, #380]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c02:	4a5e      	ldr	r2, [pc, #376]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c04:	f043 0304 	orr.w	r3, r3, #4
 8003c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0e:	4a5b      	ldr	r2, [pc, #364]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c16:	e00b      	b.n	8003c30 <HAL_RCC_OscConfig+0x324>
 8003c18:	4b58      	ldr	r3, [pc, #352]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1c:	4a57      	ldr	r2, [pc, #348]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c24:	4b55      	ldr	r3, [pc, #340]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c28:	4a54      	ldr	r2, [pc, #336]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c2a:	f023 0304 	bic.w	r3, r3, #4
 8003c2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d015      	beq.n	8003c64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c38:	f7fd fa28 	bl	800108c <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c40:	f7fd fa24 	bl	800108c <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0cb      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c56:	4b49      	ldr	r3, [pc, #292]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0ee      	beq.n	8003c40 <HAL_RCC_OscConfig+0x334>
 8003c62:	e014      	b.n	8003c8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c64:	f7fd fa12 	bl	800108c <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6c:	f7fd fa0e 	bl	800108c <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e0b5      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c82:	4b3e      	ldr	r3, [pc, #248]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1ee      	bne.n	8003c6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d105      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c94:	4b39      	ldr	r3, [pc, #228]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c98:	4a38      	ldr	r2, [pc, #224]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80a1 	beq.w	8003dec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003caa:	4b34      	ldr	r3, [pc, #208]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d05c      	beq.n	8003d70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d141      	bne.n	8003d42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cbe:	4b31      	ldr	r3, [pc, #196]	@ (8003d84 <HAL_RCC_OscConfig+0x478>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7fd f9e2 	bl	800108c <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fd f9de 	bl	800108c <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e087      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cde:	4b27      	ldr	r3, [pc, #156]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69da      	ldr	r2, [r3, #28]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	019b      	lsls	r3, r3, #6
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d00:	085b      	lsrs	r3, r3, #1
 8003d02:	3b01      	subs	r3, #1
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0c:	061b      	lsls	r3, r3, #24
 8003d0e:	491b      	ldr	r1, [pc, #108]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d14:	4b1b      	ldr	r3, [pc, #108]	@ (8003d84 <HAL_RCC_OscConfig+0x478>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1a:	f7fd f9b7 	bl	800108c <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d22:	f7fd f9b3 	bl	800108c <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e05c      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d34:	4b11      	ldr	r3, [pc, #68]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x416>
 8003d40:	e054      	b.n	8003dec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d42:	4b10      	ldr	r3, [pc, #64]	@ (8003d84 <HAL_RCC_OscConfig+0x478>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7fd f9a0 	bl	800108c <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d50:	f7fd f99c 	bl	800108c <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e045      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	4b06      	ldr	r3, [pc, #24]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x444>
 8003d6e:	e03d      	b.n	8003dec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d107      	bne.n	8003d88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e038      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	40007000 	.word	0x40007000
 8003d84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d88:	4b1b      	ldr	r3, [pc, #108]	@ (8003df8 <HAL_RCC_OscConfig+0x4ec>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d028      	beq.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d121      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d11a      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003db8:	4013      	ands	r3, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d111      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d107      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d001      	beq.n	8003dec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800

08003dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0cc      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e10:	4b68      	ldr	r3, [pc, #416]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d90c      	bls.n	8003e38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b65      	ldr	r3, [pc, #404]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b63      	ldr	r3, [pc, #396]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0b8      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d020      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e50:	4b59      	ldr	r3, [pc, #356]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a58      	ldr	r2, [pc, #352]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e68:	4b53      	ldr	r3, [pc, #332]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	4a52      	ldr	r2, [pc, #328]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e74:	4b50      	ldr	r3, [pc, #320]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	494d      	ldr	r1, [pc, #308]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d044      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9a:	4b47      	ldr	r3, [pc, #284]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d119      	bne.n	8003eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e07f      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d003      	beq.n	8003eba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	d107      	bne.n	8003eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eba:	4b3f      	ldr	r3, [pc, #252]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e06f      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eca:	4b3b      	ldr	r3, [pc, #236]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e067      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eda:	4b37      	ldr	r3, [pc, #220]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f023 0203 	bic.w	r2, r3, #3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	4934      	ldr	r1, [pc, #208]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eec:	f7fd f8ce 	bl	800108c <HAL_GetTick>
 8003ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef4:	f7fd f8ca 	bl	800108c <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e04f      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 020c 	and.w	r2, r3, #12
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d1eb      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f1c:	4b25      	ldr	r3, [pc, #148]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d20c      	bcs.n	8003f44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2a:	4b22      	ldr	r3, [pc, #136]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f32:	4b20      	ldr	r3, [pc, #128]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e032      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f50:	4b19      	ldr	r3, [pc, #100]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4916      	ldr	r1, [pc, #88]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f6e:	4b12      	ldr	r3, [pc, #72]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	490e      	ldr	r1, [pc, #56]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f82:	f000 f821 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 8003f86:	4602      	mov	r2, r0
 8003f88:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	490a      	ldr	r1, [pc, #40]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c0>)
 8003f94:	5ccb      	ldrb	r3, [r1, r3]
 8003f96:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9a:	4a09      	ldr	r2, [pc, #36]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f9e:	4b09      	ldr	r3, [pc, #36]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fd f82e 	bl	8001004 <HAL_InitTick>

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40023c00 	.word	0x40023c00
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	08006c34 	.word	0x08006c34
 8003fc0:	20000018 	.word	0x20000018
 8003fc4:	2000001c 	.word	0x2000001c

08003fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fcc:	b094      	sub	sp, #80	@ 0x50
 8003fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe0:	4b79      	ldr	r3, [pc, #484]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 030c 	and.w	r3, r3, #12
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d00d      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x40>
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	f200 80e1 	bhi.w	80041b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <HAL_RCC_GetSysClockFreq+0x34>
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d003      	beq.n	8004002 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ffa:	e0db      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ffc:	4b73      	ldr	r3, [pc, #460]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004000:	e0db      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004002:	4b73      	ldr	r3, [pc, #460]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004004:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004006:	e0d8      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004008:	4b6f      	ldr	r3, [pc, #444]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004010:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004012:	4b6d      	ldr	r3, [pc, #436]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d063      	beq.n	80040e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401e:	4b6a      	ldr	r3, [pc, #424]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	099b      	lsrs	r3, r3, #6
 8004024:	2200      	movs	r2, #0
 8004026:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004028:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800402a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004030:	633b      	str	r3, [r7, #48]	@ 0x30
 8004032:	2300      	movs	r3, #0
 8004034:	637b      	str	r3, [r7, #52]	@ 0x34
 8004036:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800403a:	4622      	mov	r2, r4
 800403c:	462b      	mov	r3, r5
 800403e:	f04f 0000 	mov.w	r0, #0
 8004042:	f04f 0100 	mov.w	r1, #0
 8004046:	0159      	lsls	r1, r3, #5
 8004048:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800404c:	0150      	lsls	r0, r2, #5
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4621      	mov	r1, r4
 8004054:	1a51      	subs	r1, r2, r1
 8004056:	6139      	str	r1, [r7, #16]
 8004058:	4629      	mov	r1, r5
 800405a:	eb63 0301 	sbc.w	r3, r3, r1
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800406c:	4659      	mov	r1, fp
 800406e:	018b      	lsls	r3, r1, #6
 8004070:	4651      	mov	r1, sl
 8004072:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004076:	4651      	mov	r1, sl
 8004078:	018a      	lsls	r2, r1, #6
 800407a:	4651      	mov	r1, sl
 800407c:	ebb2 0801 	subs.w	r8, r2, r1
 8004080:	4659      	mov	r1, fp
 8004082:	eb63 0901 	sbc.w	r9, r3, r1
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004092:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004096:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800409a:	4690      	mov	r8, r2
 800409c:	4699      	mov	r9, r3
 800409e:	4623      	mov	r3, r4
 80040a0:	eb18 0303 	adds.w	r3, r8, r3
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	462b      	mov	r3, r5
 80040a8:	eb49 0303 	adc.w	r3, r9, r3
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040ba:	4629      	mov	r1, r5
 80040bc:	024b      	lsls	r3, r1, #9
 80040be:	4621      	mov	r1, r4
 80040c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040c4:	4621      	mov	r1, r4
 80040c6:	024a      	lsls	r2, r1, #9
 80040c8:	4610      	mov	r0, r2
 80040ca:	4619      	mov	r1, r3
 80040cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ce:	2200      	movs	r2, #0
 80040d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040d8:	f7fc f8d2 	bl	8000280 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4613      	mov	r3, r2
 80040e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040e4:	e058      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e6:	4b38      	ldr	r3, [pc, #224]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	099b      	lsrs	r3, r3, #6
 80040ec:	2200      	movs	r2, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	4611      	mov	r1, r2
 80040f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040f6:	623b      	str	r3, [r7, #32]
 80040f8:	2300      	movs	r3, #0
 80040fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80040fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004100:	4642      	mov	r2, r8
 8004102:	464b      	mov	r3, r9
 8004104:	f04f 0000 	mov.w	r0, #0
 8004108:	f04f 0100 	mov.w	r1, #0
 800410c:	0159      	lsls	r1, r3, #5
 800410e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004112:	0150      	lsls	r0, r2, #5
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4641      	mov	r1, r8
 800411a:	ebb2 0a01 	subs.w	sl, r2, r1
 800411e:	4649      	mov	r1, r9
 8004120:	eb63 0b01 	sbc.w	fp, r3, r1
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004130:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004134:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004138:	ebb2 040a 	subs.w	r4, r2, sl
 800413c:	eb63 050b 	sbc.w	r5, r3, fp
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	00eb      	lsls	r3, r5, #3
 800414a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800414e:	00e2      	lsls	r2, r4, #3
 8004150:	4614      	mov	r4, r2
 8004152:	461d      	mov	r5, r3
 8004154:	4643      	mov	r3, r8
 8004156:	18e3      	adds	r3, r4, r3
 8004158:	603b      	str	r3, [r7, #0]
 800415a:	464b      	mov	r3, r9
 800415c:	eb45 0303 	adc.w	r3, r5, r3
 8004160:	607b      	str	r3, [r7, #4]
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800416e:	4629      	mov	r1, r5
 8004170:	028b      	lsls	r3, r1, #10
 8004172:	4621      	mov	r1, r4
 8004174:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004178:	4621      	mov	r1, r4
 800417a:	028a      	lsls	r2, r1, #10
 800417c:	4610      	mov	r0, r2
 800417e:	4619      	mov	r1, r3
 8004180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004182:	2200      	movs	r2, #0
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	61fa      	str	r2, [r7, #28]
 8004188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800418c:	f7fc f878 	bl	8000280 <__aeabi_uldivmod>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4613      	mov	r3, r2
 8004196:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004198:	4b0b      	ldr	r3, [pc, #44]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	0c1b      	lsrs	r3, r3, #16
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	3301      	adds	r3, #1
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80041a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041b2:	e002      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041b4:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x204>)
 80041b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3750      	adds	r7, #80	@ 0x50
 80041c0:	46bd      	mov	sp, r7
 80041c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800
 80041cc:	00f42400 	.word	0x00f42400
 80041d0:	007a1200 	.word	0x007a1200

080041d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d8:	4b03      	ldr	r3, [pc, #12]	@ (80041e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041da:	681b      	ldr	r3, [r3, #0]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	20000018 	.word	0x20000018

080041ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041f0:	f7ff fff0 	bl	80041d4 <HAL_RCC_GetHCLKFreq>
 80041f4:	4602      	mov	r2, r0
 80041f6:	4b05      	ldr	r3, [pc, #20]	@ (800420c <HAL_RCC_GetPCLK1Freq+0x20>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	0a9b      	lsrs	r3, r3, #10
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	4903      	ldr	r1, [pc, #12]	@ (8004210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004202:	5ccb      	ldrb	r3, [r1, r3]
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004208:	4618      	mov	r0, r3
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40023800 	.word	0x40023800
 8004210:	08006c44 	.word	0x08006c44

08004214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004218:	f7ff ffdc 	bl	80041d4 <HAL_RCC_GetHCLKFreq>
 800421c:	4602      	mov	r2, r0
 800421e:	4b05      	ldr	r3, [pc, #20]	@ (8004234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	0b5b      	lsrs	r3, r3, #13
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	4903      	ldr	r1, [pc, #12]	@ (8004238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800422a:	5ccb      	ldrb	r3, [r1, r3]
 800422c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004230:	4618      	mov	r0, r3
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40023800 	.word	0x40023800
 8004238:	08006c44 	.word	0x08006c44

0800423c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e041      	b.n	80042d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fc fd3e 	bl	8000ce4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3304      	adds	r3, #4
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f000 fada 	bl	8004834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <HAL_TIM_PWM_Start+0x24>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	bf14      	ite	ne
 80042f8:	2301      	movne	r3, #1
 80042fa:	2300      	moveq	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	e022      	b.n	8004346 <HAL_TIM_PWM_Start+0x6a>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b04      	cmp	r3, #4
 8004304:	d109      	bne.n	800431a <HAL_TIM_PWM_Start+0x3e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b01      	cmp	r3, #1
 8004310:	bf14      	ite	ne
 8004312:	2301      	movne	r3, #1
 8004314:	2300      	moveq	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	e015      	b.n	8004346 <HAL_TIM_PWM_Start+0x6a>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b08      	cmp	r3, #8
 800431e:	d109      	bne.n	8004334 <HAL_TIM_PWM_Start+0x58>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b01      	cmp	r3, #1
 800432a:	bf14      	ite	ne
 800432c:	2301      	movne	r3, #1
 800432e:	2300      	moveq	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	e008      	b.n	8004346 <HAL_TIM_PWM_Start+0x6a>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b01      	cmp	r3, #1
 800433e:	bf14      	ite	ne
 8004340:	2301      	movne	r3, #1
 8004342:	2300      	moveq	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e07c      	b.n	8004448 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d104      	bne.n	800435e <HAL_TIM_PWM_Start+0x82>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800435c:	e013      	b.n	8004386 <HAL_TIM_PWM_Start+0xaa>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b04      	cmp	r3, #4
 8004362:	d104      	bne.n	800436e <HAL_TIM_PWM_Start+0x92>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800436c:	e00b      	b.n	8004386 <HAL_TIM_PWM_Start+0xaa>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d104      	bne.n	800437e <HAL_TIM_PWM_Start+0xa2>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800437c:	e003      	b.n	8004386 <HAL_TIM_PWM_Start+0xaa>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2202      	movs	r2, #2
 8004382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2201      	movs	r2, #1
 800438c:	6839      	ldr	r1, [r7, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fca6 	bl	8004ce0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a2d      	ldr	r2, [pc, #180]	@ (8004450 <HAL_TIM_PWM_Start+0x174>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_TIM_PWM_Start+0xcc>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004454 <HAL_TIM_PWM_Start+0x178>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d101      	bne.n	80043ac <HAL_TIM_PWM_Start+0xd0>
 80043a8:	2301      	movs	r3, #1
 80043aa:	e000      	b.n	80043ae <HAL_TIM_PWM_Start+0xd2>
 80043ac:	2300      	movs	r3, #0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a22      	ldr	r2, [pc, #136]	@ (8004450 <HAL_TIM_PWM_Start+0x174>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d022      	beq.n	8004412 <HAL_TIM_PWM_Start+0x136>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d4:	d01d      	beq.n	8004412 <HAL_TIM_PWM_Start+0x136>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a1f      	ldr	r2, [pc, #124]	@ (8004458 <HAL_TIM_PWM_Start+0x17c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d018      	beq.n	8004412 <HAL_TIM_PWM_Start+0x136>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1d      	ldr	r2, [pc, #116]	@ (800445c <HAL_TIM_PWM_Start+0x180>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <HAL_TIM_PWM_Start+0x136>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004460 <HAL_TIM_PWM_Start+0x184>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00e      	beq.n	8004412 <HAL_TIM_PWM_Start+0x136>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a16      	ldr	r2, [pc, #88]	@ (8004454 <HAL_TIM_PWM_Start+0x178>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d009      	beq.n	8004412 <HAL_TIM_PWM_Start+0x136>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a18      	ldr	r2, [pc, #96]	@ (8004464 <HAL_TIM_PWM_Start+0x188>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_TIM_PWM_Start+0x136>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a16      	ldr	r2, [pc, #88]	@ (8004468 <HAL_TIM_PWM_Start+0x18c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d111      	bne.n	8004436 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b06      	cmp	r3, #6
 8004422:	d010      	beq.n	8004446 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004434:	e007      	b.n	8004446 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0201 	orr.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40010000 	.word	0x40010000
 8004454:	40010400 	.word	0x40010400
 8004458:	40000400 	.word	0x40000400
 800445c:	40000800 	.word	0x40000800
 8004460:	40000c00 	.word	0x40000c00
 8004464:	40014000 	.word	0x40014000
 8004468:	40001800 	.word	0x40001800

0800446c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d020      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01b      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0202 	mvn.w	r2, #2
 80044a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f99e 	bl	80047f8 <HAL_TIM_IC_CaptureCallback>
 80044bc:	e005      	b.n	80044ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f990 	bl	80047e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f9a1 	bl	800480c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d020      	beq.n	800451c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01b      	beq.n	800451c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0204 	mvn.w	r2, #4
 80044ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2202      	movs	r2, #2
 80044f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f978 	bl	80047f8 <HAL_TIM_IC_CaptureCallback>
 8004508:	e005      	b.n	8004516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f96a 	bl	80047e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f97b 	bl	800480c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d020      	beq.n	8004568 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01b      	beq.n	8004568 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0208 	mvn.w	r2, #8
 8004538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2204      	movs	r2, #4
 800453e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f952 	bl	80047f8 <HAL_TIM_IC_CaptureCallback>
 8004554:	e005      	b.n	8004562 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f944 	bl	80047e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f955 	bl	800480c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	2b00      	cmp	r3, #0
 8004570:	d020      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01b      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f06f 0210 	mvn.w	r2, #16
 8004584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2208      	movs	r2, #8
 800458a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f92c 	bl	80047f8 <HAL_TIM_IC_CaptureCallback>
 80045a0:	e005      	b.n	80045ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f91e 	bl	80047e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f92f 	bl	800480c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00c      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0201 	mvn.w	r2, #1
 80045d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f8fc 	bl	80047d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00c      	beq.n	80045fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fc1e 	bl	8004e38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00c      	beq.n	8004620 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d007      	beq.n	8004620 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f900 	bl	8004820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00c      	beq.n	8004644 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0220 	mvn.w	r2, #32
 800463c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fbf0 	bl	8004e24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004666:	2302      	movs	r3, #2
 8004668:	e0ae      	b.n	80047c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b0c      	cmp	r3, #12
 8004676:	f200 809f 	bhi.w	80047b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800467a:	a201      	add	r2, pc, #4	@ (adr r2, 8004680 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	080046b5 	.word	0x080046b5
 8004684:	080047b9 	.word	0x080047b9
 8004688:	080047b9 	.word	0x080047b9
 800468c:	080047b9 	.word	0x080047b9
 8004690:	080046f5 	.word	0x080046f5
 8004694:	080047b9 	.word	0x080047b9
 8004698:	080047b9 	.word	0x080047b9
 800469c:	080047b9 	.word	0x080047b9
 80046a0:	08004737 	.word	0x08004737
 80046a4:	080047b9 	.word	0x080047b9
 80046a8:	080047b9 	.word	0x080047b9
 80046ac:	080047b9 	.word	0x080047b9
 80046b0:	08004777 	.word	0x08004777
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 f960 	bl	8004980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0208 	orr.w	r2, r2, #8
 80046ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0204 	bic.w	r2, r2, #4
 80046de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6999      	ldr	r1, [r3, #24]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	619a      	str	r2, [r3, #24]
      break;
 80046f2:	e064      	b.n	80047be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 f9b0 	bl	8004a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800470e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800471e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6999      	ldr	r1, [r3, #24]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	021a      	lsls	r2, r3, #8
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	619a      	str	r2, [r3, #24]
      break;
 8004734:	e043      	b.n	80047be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fa05 	bl	8004b4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0208 	orr.w	r2, r2, #8
 8004750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0204 	bic.w	r2, r2, #4
 8004760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69d9      	ldr	r1, [r3, #28]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	61da      	str	r2, [r3, #28]
      break;
 8004774:	e023      	b.n	80047be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fa59 	bl	8004c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69d9      	ldr	r1, [r3, #28]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	021a      	lsls	r2, r3, #8
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	61da      	str	r2, [r3, #28]
      break;
 80047b6:	e002      	b.n	80047be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	75fb      	strb	r3, [r7, #23]
      break;
 80047bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a43      	ldr	r2, [pc, #268]	@ (8004954 <TIM_Base_SetConfig+0x120>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d013      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004852:	d00f      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a40      	ldr	r2, [pc, #256]	@ (8004958 <TIM_Base_SetConfig+0x124>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00b      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a3f      	ldr	r2, [pc, #252]	@ (800495c <TIM_Base_SetConfig+0x128>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d007      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a3e      	ldr	r2, [pc, #248]	@ (8004960 <TIM_Base_SetConfig+0x12c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d003      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a3d      	ldr	r2, [pc, #244]	@ (8004964 <TIM_Base_SetConfig+0x130>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d108      	bne.n	8004886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a32      	ldr	r2, [pc, #200]	@ (8004954 <TIM_Base_SetConfig+0x120>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d02b      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004894:	d027      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a2f      	ldr	r2, [pc, #188]	@ (8004958 <TIM_Base_SetConfig+0x124>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d023      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2e      	ldr	r2, [pc, #184]	@ (800495c <TIM_Base_SetConfig+0x128>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d01f      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004960 <TIM_Base_SetConfig+0x12c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d01b      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2c      	ldr	r2, [pc, #176]	@ (8004964 <TIM_Base_SetConfig+0x130>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d017      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004968 <TIM_Base_SetConfig+0x134>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2a      	ldr	r2, [pc, #168]	@ (800496c <TIM_Base_SetConfig+0x138>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00f      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a29      	ldr	r2, [pc, #164]	@ (8004970 <TIM_Base_SetConfig+0x13c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00b      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a28      	ldr	r2, [pc, #160]	@ (8004974 <TIM_Base_SetConfig+0x140>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d007      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a27      	ldr	r2, [pc, #156]	@ (8004978 <TIM_Base_SetConfig+0x144>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d003      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a26      	ldr	r2, [pc, #152]	@ (800497c <TIM_Base_SetConfig+0x148>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d108      	bne.n	80048f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a0e      	ldr	r2, [pc, #56]	@ (8004954 <TIM_Base_SetConfig+0x120>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d003      	beq.n	8004926 <TIM_Base_SetConfig+0xf2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a10      	ldr	r2, [pc, #64]	@ (8004964 <TIM_Base_SetConfig+0x130>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d103      	bne.n	800492e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f043 0204 	orr.w	r2, r3, #4
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	601a      	str	r2, [r3, #0]
}
 8004946:	bf00      	nop
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40010000 	.word	0x40010000
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40000c00 	.word	0x40000c00
 8004964:	40010400 	.word	0x40010400
 8004968:	40014000 	.word	0x40014000
 800496c:	40014400 	.word	0x40014400
 8004970:	40014800 	.word	0x40014800
 8004974:	40001800 	.word	0x40001800
 8004978:	40001c00 	.word	0x40001c00
 800497c:	40002000 	.word	0x40002000

08004980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	f023 0201 	bic.w	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0303 	bic.w	r3, r3, #3
 80049b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f023 0302 	bic.w	r3, r3, #2
 80049c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a20      	ldr	r2, [pc, #128]	@ (8004a58 <TIM_OC1_SetConfig+0xd8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d003      	beq.n	80049e4 <TIM_OC1_SetConfig+0x64>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a1f      	ldr	r2, [pc, #124]	@ (8004a5c <TIM_OC1_SetConfig+0xdc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d10c      	bne.n	80049fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0308 	bic.w	r3, r3, #8
 80049ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a15      	ldr	r2, [pc, #84]	@ (8004a58 <TIM_OC1_SetConfig+0xd8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d003      	beq.n	8004a0e <TIM_OC1_SetConfig+0x8e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a14      	ldr	r2, [pc, #80]	@ (8004a5c <TIM_OC1_SetConfig+0xdc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d111      	bne.n	8004a32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	621a      	str	r2, [r3, #32]
}
 8004a4c:	bf00      	nop
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	40010400 	.word	0x40010400

08004a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	f023 0210 	bic.w	r2, r3, #16
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f023 0320 	bic.w	r3, r3, #32
 8004aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a22      	ldr	r2, [pc, #136]	@ (8004b44 <TIM_OC2_SetConfig+0xe4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d003      	beq.n	8004ac8 <TIM_OC2_SetConfig+0x68>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a21      	ldr	r2, [pc, #132]	@ (8004b48 <TIM_OC2_SetConfig+0xe8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d10d      	bne.n	8004ae4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ae2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a17      	ldr	r2, [pc, #92]	@ (8004b44 <TIM_OC2_SetConfig+0xe4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d003      	beq.n	8004af4 <TIM_OC2_SetConfig+0x94>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a16      	ldr	r2, [pc, #88]	@ (8004b48 <TIM_OC2_SetConfig+0xe8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d113      	bne.n	8004b1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	621a      	str	r2, [r3, #32]
}
 8004b36:	bf00      	nop
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40010000 	.word	0x40010000
 8004b48:	40010400 	.word	0x40010400

08004b4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0303 	bic.w	r3, r3, #3
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a21      	ldr	r2, [pc, #132]	@ (8004c2c <TIM_OC3_SetConfig+0xe0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d003      	beq.n	8004bb2 <TIM_OC3_SetConfig+0x66>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a20      	ldr	r2, [pc, #128]	@ (8004c30 <TIM_OC3_SetConfig+0xe4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d10d      	bne.n	8004bce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a16      	ldr	r2, [pc, #88]	@ (8004c2c <TIM_OC3_SetConfig+0xe0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d003      	beq.n	8004bde <TIM_OC3_SetConfig+0x92>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a15      	ldr	r2, [pc, #84]	@ (8004c30 <TIM_OC3_SetConfig+0xe4>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d113      	bne.n	8004c06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	621a      	str	r2, [r3, #32]
}
 8004c20:	bf00      	nop
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	40010000 	.word	0x40010000
 8004c30:	40010400 	.word	0x40010400

08004c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	021b      	lsls	r3, r3, #8
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	031b      	lsls	r3, r3, #12
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a12      	ldr	r2, [pc, #72]	@ (8004cd8 <TIM_OC4_SetConfig+0xa4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <TIM_OC4_SetConfig+0x68>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a11      	ldr	r2, [pc, #68]	@ (8004cdc <TIM_OC4_SetConfig+0xa8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d109      	bne.n	8004cb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ca2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	019b      	lsls	r3, r3, #6
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	621a      	str	r2, [r3, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40010400 	.word	0x40010400

08004ce0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a1a      	ldr	r2, [r3, #32]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	43db      	mvns	r3, r3
 8004d02:	401a      	ands	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a1a      	ldr	r2, [r3, #32]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f003 031f 	and.w	r3, r3, #31
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	fa01 f303 	lsl.w	r3, r1, r3
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e05a      	b.n	8004dfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a21      	ldr	r2, [pc, #132]	@ (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d022      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d90:	d01d      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1d      	ldr	r2, [pc, #116]	@ (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d018      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d013      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a1a      	ldr	r2, [pc, #104]	@ (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00e      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a18      	ldr	r2, [pc, #96]	@ (8004e18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d009      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a17      	ldr	r2, [pc, #92]	@ (8004e1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d004      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a15      	ldr	r2, [pc, #84]	@ (8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d10c      	bne.n	8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40010000 	.word	0x40010000
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	40010400 	.word	0x40010400
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40001800 	.word	0x40001800

08004e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e042      	b.n	8004ee4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fb ff94 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2224      	movs	r2, #36	@ 0x24
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fcef 	bl	8005874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	d112      	bne.n	8004f2c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <HAL_UART_Receive_IT+0x26>
 8004f0c:	88fb      	ldrh	r3, [r7, #6]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e00b      	b.n	8004f2e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fad2 	bl	80054cc <UART_Start_Receive_IT>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	e000      	b.n	8004f2e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004f2c:	2302      	movs	r3, #2
  }
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b0ba      	sub	sp, #232	@ 0xe8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10f      	bne.n	8004f9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <HAL_UART_IRQHandler+0x66>
 8004f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fbae 	bl	80056f8 <UART_Receive_IT>
      return;
 8004f9c:	e273      	b.n	8005486 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 80de 	beq.w	8005164 <HAL_UART_IRQHandler+0x22c>
 8004fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d106      	bne.n	8004fc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 80d1 	beq.w	8005164 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00b      	beq.n	8004fe6 <HAL_UART_IRQHandler+0xae>
 8004fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fde:	f043 0201 	orr.w	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00b      	beq.n	800500a <HAL_UART_IRQHandler+0xd2>
 8004ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005002:	f043 0202 	orr.w	r2, r3, #2
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800500a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00b      	beq.n	800502e <HAL_UART_IRQHandler+0xf6>
 8005016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005026:	f043 0204 	orr.w	r2, r3, #4
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800502e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d011      	beq.n	800505e <HAL_UART_IRQHandler+0x126>
 800503a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b00      	cmp	r3, #0
 8005044:	d105      	bne.n	8005052 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005056:	f043 0208 	orr.w	r2, r3, #8
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 820a 	beq.w	800547c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d008      	beq.n	8005086 <HAL_UART_IRQHandler+0x14e>
 8005074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fb39 	bl	80056f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005090:	2b40      	cmp	r3, #64	@ 0x40
 8005092:	bf0c      	ite	eq
 8005094:	2301      	moveq	r3, #1
 8005096:	2300      	movne	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <HAL_UART_IRQHandler+0x17a>
 80050aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d04f      	beq.n	8005152 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fa44 	bl	8005540 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c2:	2b40      	cmp	r3, #64	@ 0x40
 80050c4:	d141      	bne.n	800514a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3314      	adds	r3, #20
 80050cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80050dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3314      	adds	r3, #20
 80050ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80050f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80050f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80050fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800510a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1d9      	bne.n	80050c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005116:	2b00      	cmp	r3, #0
 8005118:	d013      	beq.n	8005142 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511e:	4a8a      	ldr	r2, [pc, #552]	@ (8005348 <HAL_UART_IRQHandler+0x410>)
 8005120:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005126:	4618      	mov	r0, r3
 8005128:	f7fc f961 	bl	80013ee <HAL_DMA_Abort_IT>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d016      	beq.n	8005160 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800513c:	4610      	mov	r0, r2
 800513e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005140:	e00e      	b.n	8005160 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f9ac 	bl	80054a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005148:	e00a      	b.n	8005160 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f9a8 	bl	80054a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005150:	e006      	b.n	8005160 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f9a4 	bl	80054a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800515e:	e18d      	b.n	800547c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005160:	bf00      	nop
    return;
 8005162:	e18b      	b.n	800547c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005168:	2b01      	cmp	r3, #1
 800516a:	f040 8167 	bne.w	800543c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800516e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005172:	f003 0310 	and.w	r3, r3, #16
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 8160 	beq.w	800543c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800517c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005180:	f003 0310 	and.w	r3, r3, #16
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 8159 	beq.w	800543c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800518a:	2300      	movs	r3, #0
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60bb      	str	r3, [r7, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	60bb      	str	r3, [r7, #8]
 800519e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051aa:	2b40      	cmp	r3, #64	@ 0x40
 80051ac:	f040 80ce 	bne.w	800534c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 80a9 	beq.w	8005318 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051ce:	429a      	cmp	r2, r3
 80051d0:	f080 80a2 	bcs.w	8005318 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051e6:	f000 8088 	beq.w	80052fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	330c      	adds	r3, #12
 80051f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005200:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005204:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005208:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	330c      	adds	r3, #12
 8005212:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005216:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800521a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005222:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800522e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1d9      	bne.n	80051ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3314      	adds	r3, #20
 800523c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005246:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005248:	f023 0301 	bic.w	r3, r3, #1
 800524c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3314      	adds	r3, #20
 8005256:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800525a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800525e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005262:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800526c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e1      	bne.n	8005236 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3314      	adds	r3, #20
 8005278:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005282:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005288:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3314      	adds	r3, #20
 8005292:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005296:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005298:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800529c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e3      	bne.n	8005272 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	330c      	adds	r3, #12
 80052be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052ca:	f023 0310 	bic.w	r3, r3, #16
 80052ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	330c      	adds	r3, #12
 80052d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80052dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80052de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e3      	bne.n	80052b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fc f80a 	bl	800130e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005308:	b29b      	uxth	r3, r3
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	b29b      	uxth	r3, r3
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f8cf 	bl	80054b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005316:	e0b3      	b.n	8005480 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800531c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005320:	429a      	cmp	r2, r3
 8005322:	f040 80ad 	bne.w	8005480 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005330:	f040 80a6 	bne.w	8005480 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800533e:	4619      	mov	r1, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f8b7 	bl	80054b4 <HAL_UARTEx_RxEventCallback>
      return;
 8005346:	e09b      	b.n	8005480 <HAL_UART_IRQHandler+0x548>
 8005348:	08005607 	.word	0x08005607
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005354:	b29b      	uxth	r3, r3
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005360:	b29b      	uxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 808e 	beq.w	8005484 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 8089 	beq.w	8005484 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	330c      	adds	r3, #12
 8005378:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005384:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005388:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	330c      	adds	r3, #12
 8005392:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005396:	647a      	str	r2, [r7, #68]	@ 0x44
 8005398:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800539c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e3      	bne.n	8005372 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3314      	adds	r3, #20
 80053b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	623b      	str	r3, [r7, #32]
   return(result);
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	f023 0301 	bic.w	r3, r3, #1
 80053c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3314      	adds	r3, #20
 80053ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80053d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e3      	bne.n	80053aa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	330c      	adds	r3, #12
 80053f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0310 	bic.w	r3, r3, #16
 8005406:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	330c      	adds	r3, #12
 8005410:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005414:	61fa      	str	r2, [r7, #28]
 8005416:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	69b9      	ldr	r1, [r7, #24]
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	617b      	str	r3, [r7, #20]
   return(result);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e3      	bne.n	80053f0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800542e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f83d 	bl	80054b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800543a:	e023      	b.n	8005484 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800543c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005444:	2b00      	cmp	r3, #0
 8005446:	d009      	beq.n	800545c <HAL_UART_IRQHandler+0x524>
 8005448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800544c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f8e7 	bl	8005628 <UART_Transmit_IT>
    return;
 800545a:	e014      	b.n	8005486 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800545c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00e      	beq.n	8005486 <HAL_UART_IRQHandler+0x54e>
 8005468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800546c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f927 	bl	80056c8 <UART_EndTransmit_IT>
    return;
 800547a:	e004      	b.n	8005486 <HAL_UART_IRQHandler+0x54e>
    return;
 800547c:	bf00      	nop
 800547e:	e002      	b.n	8005486 <HAL_UART_IRQHandler+0x54e>
      return;
 8005480:	bf00      	nop
 8005482:	e000      	b.n	8005486 <HAL_UART_IRQHandler+0x54e>
      return;
 8005484:	bf00      	nop
  }
}
 8005486:	37e8      	adds	r7, #232	@ 0xe8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	4613      	mov	r3, r2
 80054d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	88fa      	ldrh	r2, [r7, #6]
 80054e4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	88fa      	ldrh	r2, [r7, #6]
 80054ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2222      	movs	r2, #34	@ 0x22
 80054f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d007      	beq.n	8005512 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005510:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695a      	ldr	r2, [r3, #20]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0201 	orr.w	r2, r2, #1
 8005520:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f042 0220 	orr.w	r2, r2, #32
 8005530:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005540:	b480      	push	{r7}
 8005542:	b095      	sub	sp, #84	@ 0x54
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	330c      	adds	r3, #12
 800554e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800555e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	330c      	adds	r3, #12
 8005566:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005568:	643a      	str	r2, [r7, #64]	@ 0x40
 800556a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800556e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e5      	bne.n	8005548 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3314      	adds	r3, #20
 8005582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	61fb      	str	r3, [r7, #28]
   return(result);
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3314      	adds	r3, #20
 800559a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800559c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800559e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e5      	bne.n	800557c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d119      	bne.n	80055ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	330c      	adds	r3, #12
 80055be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f023 0310 	bic.w	r3, r3, #16
 80055ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	330c      	adds	r3, #12
 80055d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055d8:	61ba      	str	r2, [r7, #24]
 80055da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6979      	ldr	r1, [r7, #20]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	613b      	str	r3, [r7, #16]
   return(result);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e5      	bne.n	80055b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055fa:	bf00      	nop
 80055fc:	3754      	adds	r7, #84	@ 0x54
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005612:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f7ff ff40 	bl	80054a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005620:	bf00      	nop
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b21      	cmp	r3, #33	@ 0x21
 800563a:	d13e      	bne.n	80056ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005644:	d114      	bne.n	8005670 <UART_Transmit_IT+0x48>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d110      	bne.n	8005670 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	461a      	mov	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005662:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	1c9a      	adds	r2, r3, #2
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	621a      	str	r2, [r3, #32]
 800566e:	e008      	b.n	8005682 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	1c59      	adds	r1, r3, #1
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6211      	str	r1, [r2, #32]
 800567a:	781a      	ldrb	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29b      	uxth	r3, r3
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	4619      	mov	r1, r3
 8005690:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10f      	bne.n	80056b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68da      	ldr	r2, [r3, #12]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	e000      	b.n	80056bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056ba:	2302      	movs	r3, #2
  }
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff fecf 	bl	800548c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08c      	sub	sp, #48	@ 0x30
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005700:	2300      	movs	r3, #0
 8005702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005704:	2300      	movs	r3, #0
 8005706:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b22      	cmp	r3, #34	@ 0x22
 8005712:	f040 80aa 	bne.w	800586a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800571e:	d115      	bne.n	800574c <UART_Receive_IT+0x54>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d111      	bne.n	800574c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	b29b      	uxth	r3, r3
 8005736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573a:	b29a      	uxth	r2, r3
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005744:	1c9a      	adds	r2, r3, #2
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	629a      	str	r2, [r3, #40]	@ 0x28
 800574a:	e024      	b.n	8005796 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005750:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800575a:	d007      	beq.n	800576c <UART_Receive_IT+0x74>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10a      	bne.n	800577a <UART_Receive_IT+0x82>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	b2da      	uxtb	r2, r3
 8005774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	e008      	b.n	800578c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005786:	b2da      	uxtb	r2, r3
 8005788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800579a:	b29b      	uxth	r3, r3
 800579c:	3b01      	subs	r3, #1
 800579e:	b29b      	uxth	r3, r3
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	4619      	mov	r1, r3
 80057a4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d15d      	bne.n	8005866 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0220 	bic.w	r2, r2, #32
 80057b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695a      	ldr	r2, [r3, #20]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0201 	bic.w	r2, r2, #1
 80057d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d135      	bne.n	800585c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	330c      	adds	r3, #12
 80057fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	613b      	str	r3, [r7, #16]
   return(result);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f023 0310 	bic.w	r3, r3, #16
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	330c      	adds	r3, #12
 8005814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005816:	623a      	str	r2, [r7, #32]
 8005818:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	69f9      	ldr	r1, [r7, #28]
 800581c:	6a3a      	ldr	r2, [r7, #32]
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	61bb      	str	r3, [r7, #24]
   return(result);
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e5      	bne.n	80057f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b10      	cmp	r3, #16
 8005836:	d10a      	bne.n	800584e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005838:	2300      	movs	r3, #0
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005852:	4619      	mov	r1, r3
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff fe2d 	bl	80054b4 <HAL_UARTEx_RxEventCallback>
 800585a:	e002      	b.n	8005862 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7fb f91b 	bl	8000a98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	e002      	b.n	800586c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	e000      	b.n	800586c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800586a:	2302      	movs	r3, #2
  }
}
 800586c:	4618      	mov	r0, r3
 800586e:	3730      	adds	r7, #48	@ 0x30
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005878:	b0c0      	sub	sp, #256	@ 0x100
 800587a:	af00      	add	r7, sp, #0
 800587c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005890:	68d9      	ldr	r1, [r3, #12]
 8005892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	ea40 0301 	orr.w	r3, r0, r1
 800589c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800589e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058cc:	f021 010c 	bic.w	r1, r1, #12
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058da:	430b      	orrs	r3, r1
 80058dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ee:	6999      	ldr	r1, [r3, #24]
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	ea40 0301 	orr.w	r3, r0, r1
 80058fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	4b8f      	ldr	r3, [pc, #572]	@ (8005b40 <UART_SetConfig+0x2cc>)
 8005904:	429a      	cmp	r2, r3
 8005906:	d005      	beq.n	8005914 <UART_SetConfig+0xa0>
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4b8d      	ldr	r3, [pc, #564]	@ (8005b44 <UART_SetConfig+0x2d0>)
 8005910:	429a      	cmp	r2, r3
 8005912:	d104      	bne.n	800591e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005914:	f7fe fc7e 	bl	8004214 <HAL_RCC_GetPCLK2Freq>
 8005918:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800591c:	e003      	b.n	8005926 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800591e:	f7fe fc65 	bl	80041ec <HAL_RCC_GetPCLK1Freq>
 8005922:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005930:	f040 810c 	bne.w	8005b4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005938:	2200      	movs	r2, #0
 800593a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800593e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005942:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005946:	4622      	mov	r2, r4
 8005948:	462b      	mov	r3, r5
 800594a:	1891      	adds	r1, r2, r2
 800594c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800594e:	415b      	adcs	r3, r3
 8005950:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005952:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005956:	4621      	mov	r1, r4
 8005958:	eb12 0801 	adds.w	r8, r2, r1
 800595c:	4629      	mov	r1, r5
 800595e:	eb43 0901 	adc.w	r9, r3, r1
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	f04f 0300 	mov.w	r3, #0
 800596a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800596e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005976:	4690      	mov	r8, r2
 8005978:	4699      	mov	r9, r3
 800597a:	4623      	mov	r3, r4
 800597c:	eb18 0303 	adds.w	r3, r8, r3
 8005980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005984:	462b      	mov	r3, r5
 8005986:	eb49 0303 	adc.w	r3, r9, r3
 800598a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800598e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800599a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800599e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059a2:	460b      	mov	r3, r1
 80059a4:	18db      	adds	r3, r3, r3
 80059a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80059a8:	4613      	mov	r3, r2
 80059aa:	eb42 0303 	adc.w	r3, r2, r3
 80059ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80059b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80059b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059b8:	f7fa fc62 	bl	8000280 <__aeabi_uldivmod>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4b61      	ldr	r3, [pc, #388]	@ (8005b48 <UART_SetConfig+0x2d4>)
 80059c2:	fba3 2302 	umull	r2, r3, r3, r2
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	011c      	lsls	r4, r3, #4
 80059ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80059dc:	4642      	mov	r2, r8
 80059de:	464b      	mov	r3, r9
 80059e0:	1891      	adds	r1, r2, r2
 80059e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059e4:	415b      	adcs	r3, r3
 80059e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059ec:	4641      	mov	r1, r8
 80059ee:	eb12 0a01 	adds.w	sl, r2, r1
 80059f2:	4649      	mov	r1, r9
 80059f4:	eb43 0b01 	adc.w	fp, r3, r1
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a0c:	4692      	mov	sl, r2
 8005a0e:	469b      	mov	fp, r3
 8005a10:	4643      	mov	r3, r8
 8005a12:	eb1a 0303 	adds.w	r3, sl, r3
 8005a16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a1a:	464b      	mov	r3, r9
 8005a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8005a20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	18db      	adds	r3, r3, r3
 8005a3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a3e:	4613      	mov	r3, r2
 8005a40:	eb42 0303 	adc.w	r3, r2, r3
 8005a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a4e:	f7fa fc17 	bl	8000280 <__aeabi_uldivmod>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4611      	mov	r1, r2
 8005a58:	4b3b      	ldr	r3, [pc, #236]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	2264      	movs	r2, #100	@ 0x64
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	1acb      	subs	r3, r1, r3
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a6e:	4b36      	ldr	r3, [pc, #216]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005a70:	fba3 2302 	umull	r2, r3, r3, r2
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a7c:	441c      	add	r4, r3
 8005a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a90:	4642      	mov	r2, r8
 8005a92:	464b      	mov	r3, r9
 8005a94:	1891      	adds	r1, r2, r2
 8005a96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a98:	415b      	adcs	r3, r3
 8005a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	1851      	adds	r1, r2, r1
 8005aa4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	414b      	adcs	r3, r1
 8005aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ab8:	4659      	mov	r1, fp
 8005aba:	00cb      	lsls	r3, r1, #3
 8005abc:	4651      	mov	r1, sl
 8005abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ac2:	4651      	mov	r1, sl
 8005ac4:	00ca      	lsls	r2, r1, #3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4603      	mov	r3, r0
 8005acc:	4642      	mov	r2, r8
 8005ace:	189b      	adds	r3, r3, r2
 8005ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ad4:	464b      	mov	r3, r9
 8005ad6:	460a      	mov	r2, r1
 8005ad8:	eb42 0303 	adc.w	r3, r2, r3
 8005adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005aec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005af0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005af4:	460b      	mov	r3, r1
 8005af6:	18db      	adds	r3, r3, r3
 8005af8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005afa:	4613      	mov	r3, r2
 8005afc:	eb42 0303 	adc.w	r3, r2, r3
 8005b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b0a:	f7fa fbb9 	bl	8000280 <__aeabi_uldivmod>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4b0d      	ldr	r3, [pc, #52]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005b14:	fba3 1302 	umull	r1, r3, r3, r2
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	2164      	movs	r1, #100	@ 0x64
 8005b1c:	fb01 f303 	mul.w	r3, r1, r3
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	3332      	adds	r3, #50	@ 0x32
 8005b26:	4a08      	ldr	r2, [pc, #32]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005b28:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	f003 0207 	and.w	r2, r3, #7
 8005b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4422      	add	r2, r4
 8005b3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b3c:	e106      	b.n	8005d4c <UART_SetConfig+0x4d8>
 8005b3e:	bf00      	nop
 8005b40:	40011000 	.word	0x40011000
 8005b44:	40011400 	.word	0x40011400
 8005b48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b5e:	4642      	mov	r2, r8
 8005b60:	464b      	mov	r3, r9
 8005b62:	1891      	adds	r1, r2, r2
 8005b64:	6239      	str	r1, [r7, #32]
 8005b66:	415b      	adcs	r3, r3
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b6e:	4641      	mov	r1, r8
 8005b70:	1854      	adds	r4, r2, r1
 8005b72:	4649      	mov	r1, r9
 8005b74:	eb43 0501 	adc.w	r5, r3, r1
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	00eb      	lsls	r3, r5, #3
 8005b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b86:	00e2      	lsls	r2, r4, #3
 8005b88:	4614      	mov	r4, r2
 8005b8a:	461d      	mov	r5, r3
 8005b8c:	4643      	mov	r3, r8
 8005b8e:	18e3      	adds	r3, r4, r3
 8005b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b94:	464b      	mov	r3, r9
 8005b96:	eb45 0303 	adc.w	r3, r5, r3
 8005b9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005baa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	f04f 0300 	mov.w	r3, #0
 8005bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bba:	4629      	mov	r1, r5
 8005bbc:	008b      	lsls	r3, r1, #2
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	008a      	lsls	r2, r1, #2
 8005bc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bcc:	f7fa fb58 	bl	8000280 <__aeabi_uldivmod>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4b60      	ldr	r3, [pc, #384]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	011c      	lsls	r4, r3, #4
 8005bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005be8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005bec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	1891      	adds	r1, r2, r2
 8005bf6:	61b9      	str	r1, [r7, #24]
 8005bf8:	415b      	adcs	r3, r3
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c00:	4641      	mov	r1, r8
 8005c02:	1851      	adds	r1, r2, r1
 8005c04:	6139      	str	r1, [r7, #16]
 8005c06:	4649      	mov	r1, r9
 8005c08:	414b      	adcs	r3, r1
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c18:	4659      	mov	r1, fp
 8005c1a:	00cb      	lsls	r3, r1, #3
 8005c1c:	4651      	mov	r1, sl
 8005c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c22:	4651      	mov	r1, sl
 8005c24:	00ca      	lsls	r2, r1, #3
 8005c26:	4610      	mov	r0, r2
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	4642      	mov	r2, r8
 8005c2e:	189b      	adds	r3, r3, r2
 8005c30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c34:	464b      	mov	r3, r9
 8005c36:	460a      	mov	r2, r1
 8005c38:	eb42 0303 	adc.w	r3, r2, r3
 8005c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c58:	4649      	mov	r1, r9
 8005c5a:	008b      	lsls	r3, r1, #2
 8005c5c:	4641      	mov	r1, r8
 8005c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c62:	4641      	mov	r1, r8
 8005c64:	008a      	lsls	r2, r1, #2
 8005c66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c6a:	f7fa fb09 	bl	8000280 <__aeabi_uldivmod>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4611      	mov	r1, r2
 8005c74:	4b38      	ldr	r3, [pc, #224]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005c76:	fba3 2301 	umull	r2, r3, r3, r1
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	2264      	movs	r2, #100	@ 0x64
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	1acb      	subs	r3, r1, r3
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	3332      	adds	r3, #50	@ 0x32
 8005c88:	4a33      	ldr	r2, [pc, #204]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c94:	441c      	add	r4, r3
 8005c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ca0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	1891      	adds	r1, r2, r2
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	415b      	adcs	r3, r3
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cb4:	4641      	mov	r1, r8
 8005cb6:	1851      	adds	r1, r2, r1
 8005cb8:	6039      	str	r1, [r7, #0]
 8005cba:	4649      	mov	r1, r9
 8005cbc:	414b      	adcs	r3, r1
 8005cbe:	607b      	str	r3, [r7, #4]
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ccc:	4659      	mov	r1, fp
 8005cce:	00cb      	lsls	r3, r1, #3
 8005cd0:	4651      	mov	r1, sl
 8005cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cd6:	4651      	mov	r1, sl
 8005cd8:	00ca      	lsls	r2, r1, #3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	189b      	adds	r3, r3, r2
 8005ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	460a      	mov	r2, r1
 8005cea:	eb42 0303 	adc.w	r3, r2, r3
 8005cee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cfa:	667a      	str	r2, [r7, #100]	@ 0x64
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d08:	4649      	mov	r1, r9
 8005d0a:	008b      	lsls	r3, r1, #2
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d12:	4641      	mov	r1, r8
 8005d14:	008a      	lsls	r2, r1, #2
 8005d16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d1a:	f7fa fab1 	bl	8000280 <__aeabi_uldivmod>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4b0d      	ldr	r3, [pc, #52]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005d24:	fba3 1302 	umull	r1, r3, r3, r2
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	2164      	movs	r1, #100	@ 0x64
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	3332      	adds	r3, #50	@ 0x32
 8005d36:	4a08      	ldr	r2, [pc, #32]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005d38:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	f003 020f 	and.w	r2, r3, #15
 8005d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4422      	add	r2, r4
 8005d4a:	609a      	str	r2, [r3, #8]
}
 8005d4c:	bf00      	nop
 8005d4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d52:	46bd      	mov	sp, r7
 8005d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d58:	51eb851f 	.word	0x51eb851f

08005d5c <LCD_SendCommand>:
	}
	HAL_Delay(20);
}

void LCD_SendCommand(I2C_HandleTypeDef *hi2cx, uint32_t DevAddr, char DATA)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	4613      	mov	r3, r2
 8005d68:	71fb      	strb	r3, [r7, #7]
	char data_1 = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	75fb      	strb	r3, [r7, #23]
	char data_2 = 0;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	75bb      	strb	r3, [r7, #22]
	uint8_t data_t[4] = {0};
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]

	// KOMUT GÖNDERİMİ
	data_1 = (DATA & 0xF0);
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	f023 030f 	bic.w	r3, r3, #15
 8005d7c:	75fb      	strb	r3, [r7, #23]
	data_2 = (DATA & 0x0F) << 4;
 8005d7e:	79fb      	ldrb	r3, [r7, #7]
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	75bb      	strb	r3, [r7, #22]

	data_t[0] = data_1|(0x0C); // EN=1, RS=0
 8005d84:	7dfb      	ldrb	r3, [r7, #23]
 8005d86:	f043 030c 	orr.w	r3, r3, #12
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	743b      	strb	r3, [r7, #16]
	data_t[1] = data_1|(0x08); // EN=0, RS=0
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
 8005d90:	f043 0308 	orr.w	r3, r3, #8
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	747b      	strb	r3, [r7, #17]
	data_t[2] = data_2|(0x0C); // EN=1, RS=0
 8005d98:	7dbb      	ldrb	r3, [r7, #22]
 8005d9a:	f043 030c 	orr.w	r3, r3, #12
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	74bb      	strb	r3, [r7, #18]
	data_t[3] = data_2|(0x08); // EN=0, RS=0
 8005da2:	7dbb      	ldrb	r3, [r7, #22]
 8005da4:	f043 0308 	orr.w	r3, r3, #8
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	74fb      	strb	r3, [r7, #19]
	HAL_I2C_Master_Transmit(hi2cx, DevAddr, data_t, 4, 1000);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	b299      	uxth	r1, r3
 8005db0:	f107 0210 	add.w	r2, r7, #16
 8005db4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	2304      	movs	r3, #4
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f7fb fe6f 	bl	8001aa0 <HAL_I2C_Master_Transmit>
}
 8005dc2:	bf00      	nop
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <LCD_SendData>:

void LCD_SendData(I2C_HandleTypeDef *hi2cx, uint32_t DevAddr, char DATA)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b088      	sub	sp, #32
 8005dce:	af02      	add	r7, sp, #8
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	71fb      	strb	r3, [r7, #7]
	char data_1 = 0;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	75fb      	strb	r3, [r7, #23]
	char data_2 = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	75bb      	strb	r3, [r7, #22]
	uint8_t data_t[4] = {0};
 8005de0:	2300      	movs	r3, #0
 8005de2:	613b      	str	r3, [r7, #16]

	// KOMUT GÖNDERİMİ
	data_1 = (DATA & 0xF0);
 8005de4:	79fb      	ldrb	r3, [r7, #7]
 8005de6:	f023 030f 	bic.w	r3, r3, #15
 8005dea:	75fb      	strb	r3, [r7, #23]
	data_2 = (DATA & 0x0F) << 4;
 8005dec:	79fb      	ldrb	r3, [r7, #7]
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	75bb      	strb	r3, [r7, #22]

	data_t[0] = data_1|(0x0D); // EN=1, RS=0
 8005df2:	7dfb      	ldrb	r3, [r7, #23]
 8005df4:	f043 030d 	orr.w	r3, r3, #13
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	743b      	strb	r3, [r7, #16]
	data_t[1] = data_1|(0x09); // EN=0, RS=0
 8005dfc:	7dfb      	ldrb	r3, [r7, #23]
 8005dfe:	f043 0309 	orr.w	r3, r3, #9
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	747b      	strb	r3, [r7, #17]
	data_t[2] = data_2|(0x0D); // EN=1, RS=0
 8005e06:	7dbb      	ldrb	r3, [r7, #22]
 8005e08:	f043 030d 	orr.w	r3, r3, #13
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	74bb      	strb	r3, [r7, #18]
	data_t[3] = data_2|(0x09); // EN=0, RS=0
 8005e10:	7dbb      	ldrb	r3, [r7, #22]
 8005e12:	f043 0309 	orr.w	r3, r3, #9
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	74fb      	strb	r3, [r7, #19]
	HAL_I2C_Master_Transmit(hi2cx, DevAddr, data_t, 4, 1000);
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	b299      	uxth	r1, r3
 8005e1e:	f107 0210 	add.w	r2, r7, #16
 8005e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	2304      	movs	r3, #4
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f7fb fe38 	bl	8001aa0 <HAL_I2C_Master_Transmit>
	HAL_Delay(30);
 8005e30:	201e      	movs	r0, #30
 8005e32:	f7fb f937 	bl	80010a4 <HAL_Delay>
}
 8005e36:	bf00      	nop
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <LCD_SetCursor>:
	LCD_SendCommand(hi2cx, DevAddr, 0x01);
	HAL_Delay(20);
}

void LCD_SetCursor(I2C_HandleTypeDef *hi2cx, uint32_t DevAddr, int row, int col)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	607a      	str	r2, [r7, #4]
 8005e4a:	603b      	str	r3, [r7, #0]
	switch(row)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <LCD_SetCursor+0x1c>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d005      	beq.n	8005e64 <LCD_SetCursor+0x26>
	case 1:
		col |= 0xC0;
		break;

	default:
		break;
 8005e58:	e009      	b.n	8005e6e <LCD_SetCursor+0x30>
		col |= 0x80;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e60:	603b      	str	r3, [r7, #0]
		break;
 8005e62:	e004      	b.n	8005e6e <LCD_SetCursor+0x30>
		col |= 0xC0;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e6a:	603b      	str	r3, [r7, #0]
		break;
 8005e6c:	bf00      	nop
	}
	LCD_SendCommand(hi2cx, DevAddr, col);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f7ff ff70 	bl	8005d5c <LCD_SendCommand>
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <LCD_Init>:


void LCD_Init(I2C_HandleTypeDef *hi2cx, uint32_t DevAddr)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
	HAL_Delay(20);
 8005e8e:	2014      	movs	r0, #20
 8005e90:	f7fb f908 	bl	80010a4 <HAL_Delay>
	LCD_SendCommand(hi2cx, DevAddr, 0x30);
 8005e94:	2230      	movs	r2, #48	@ 0x30
 8005e96:	6839      	ldr	r1, [r7, #0]
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7ff ff5f 	bl	8005d5c <LCD_SendCommand>
	HAL_Delay(20);
 8005e9e:	2014      	movs	r0, #20
 8005ea0:	f7fb f900 	bl	80010a4 <HAL_Delay>
	LCD_SendCommand(hi2cx, DevAddr, 0x30);
 8005ea4:	2230      	movs	r2, #48	@ 0x30
 8005ea6:	6839      	ldr	r1, [r7, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff ff57 	bl	8005d5c <LCD_SendCommand>
	HAL_Delay(20);
 8005eae:	2014      	movs	r0, #20
 8005eb0:	f7fb f8f8 	bl	80010a4 <HAL_Delay>
	LCD_SendCommand(hi2cx, DevAddr, 0x30);
 8005eb4:	2230      	movs	r2, #48	@ 0x30
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff ff4f 	bl	8005d5c <LCD_SendCommand>
	HAL_Delay(20);
 8005ebe:	2014      	movs	r0, #20
 8005ec0:	f7fb f8f0 	bl	80010a4 <HAL_Delay>
	LCD_SendCommand(hi2cx, DevAddr, 0x20);	//4 bit modu
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff ff47 	bl	8005d5c <LCD_SendCommand>
	HAL_Delay(20);
 8005ece:	2014      	movs	r0, #20
 8005ed0:	f7fb f8e8 	bl	80010a4 <HAL_Delay>

	//Ekran ayarlamaları
	LCD_SendCommand(hi2cx, DevAddr, 0x28);	// Fonksiyon seçimi
 8005ed4:	2228      	movs	r2, #40	@ 0x28
 8005ed6:	6839      	ldr	r1, [r7, #0]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff ff3f 	bl	8005d5c <LCD_SendCommand>
	HAL_Delay(20);
 8005ede:	2014      	movs	r0, #20
 8005ee0:	f7fb f8e0 	bl	80010a4 <HAL_Delay>
	LCD_SendCommand(hi2cx, DevAddr, 0x08);	// Ekran kapalı
 8005ee4:	2208      	movs	r2, #8
 8005ee6:	6839      	ldr	r1, [r7, #0]
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff ff37 	bl	8005d5c <LCD_SendCommand>
	HAL_Delay(20);
 8005eee:	2014      	movs	r0, #20
 8005ef0:	f7fb f8d8 	bl	80010a4 <HAL_Delay>
	LCD_SendCommand(hi2cx, DevAddr, 0x01);	// Ekranı temizle
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff ff2f 	bl	8005d5c <LCD_SendCommand>
	HAL_Delay(20);
 8005efe:	2014      	movs	r0, #20
 8005f00:	f7fb f8d0 	bl	80010a4 <HAL_Delay>
	LCD_SendCommand(hi2cx, DevAddr, 0x06);	// Giriş kipi ayarlaması
 8005f04:	2206      	movs	r2, #6
 8005f06:	6839      	ldr	r1, [r7, #0]
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff ff27 	bl	8005d5c <LCD_SendCommand>
	HAL_Delay(20);
 8005f0e:	2014      	movs	r0, #20
 8005f10:	f7fb f8c8 	bl	80010a4 <HAL_Delay>
	LCD_SendCommand(hi2cx, DevAddr, 0x0C);	// Ekran açık
 8005f14:	220c      	movs	r2, #12
 8005f16:	6839      	ldr	r1, [r7, #0]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff ff1f 	bl	8005d5c <LCD_SendCommand>
	HAL_Delay(20);
 8005f1e:	2014      	movs	r0, #20
 8005f20:	f7fb f8c0 	bl	80010a4 <HAL_Delay>
}
 8005f24:	bf00      	nop
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <LCD_SendString>:

void LCD_SendString(I2C_HandleTypeDef *hi2cx, uint32_t DevAddr, char *str)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
	while(*str != '\0')
 8005f38:	e00b      	b.n	8005f52 <LCD_SendString+0x26>
	{
		LCD_SendData(hi2cx, DevAddr, *str++);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	68b9      	ldr	r1, [r7, #8]
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f7ff ff3f 	bl	8005dca <LCD_SendData>
		HAL_Delay(20);
 8005f4c:	2014      	movs	r0, #20
 8005f4e:	f7fb f8a9 	bl	80010a4 <HAL_Delay>
	while(*str != '\0')
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1ef      	bne.n	8005f3a <LCD_SendString+0xe>
	}
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <siscanf>:
 8005f64:	b40e      	push	{r1, r2, r3}
 8005f66:	b570      	push	{r4, r5, r6, lr}
 8005f68:	b09d      	sub	sp, #116	@ 0x74
 8005f6a:	ac21      	add	r4, sp, #132	@ 0x84
 8005f6c:	2500      	movs	r5, #0
 8005f6e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005f72:	f854 6b04 	ldr.w	r6, [r4], #4
 8005f76:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005f7a:	951b      	str	r5, [sp, #108]	@ 0x6c
 8005f7c:	9002      	str	r0, [sp, #8]
 8005f7e:	9006      	str	r0, [sp, #24]
 8005f80:	f7fa f926 	bl	80001d0 <strlen>
 8005f84:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb4 <siscanf+0x50>)
 8005f86:	9003      	str	r0, [sp, #12]
 8005f88:	9007      	str	r0, [sp, #28]
 8005f8a:	480b      	ldr	r0, [pc, #44]	@ (8005fb8 <siscanf+0x54>)
 8005f8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f92:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f96:	4632      	mov	r2, r6
 8005f98:	4623      	mov	r3, r4
 8005f9a:	a902      	add	r1, sp, #8
 8005f9c:	6800      	ldr	r0, [r0, #0]
 8005f9e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8005fa0:	9514      	str	r5, [sp, #80]	@ 0x50
 8005fa2:	9401      	str	r4, [sp, #4]
 8005fa4:	f000 f9b8 	bl	8006318 <__ssvfiscanf_r>
 8005fa8:	b01d      	add	sp, #116	@ 0x74
 8005faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005fae:	b003      	add	sp, #12
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	08005fbd 	.word	0x08005fbd
 8005fb8:	20000024 	.word	0x20000024

08005fbc <__seofread>:
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	4770      	bx	lr

08005fc0 <memset>:
 8005fc0:	4402      	add	r2, r0
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d100      	bne.n	8005fca <memset+0xa>
 8005fc8:	4770      	bx	lr
 8005fca:	f803 1b01 	strb.w	r1, [r3], #1
 8005fce:	e7f9      	b.n	8005fc4 <memset+0x4>

08005fd0 <strncmp>:
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	b16a      	cbz	r2, 8005ff0 <strncmp+0x20>
 8005fd4:	3901      	subs	r1, #1
 8005fd6:	1884      	adds	r4, r0, r2
 8005fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fdc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d103      	bne.n	8005fec <strncmp+0x1c>
 8005fe4:	42a0      	cmp	r0, r4
 8005fe6:	d001      	beq.n	8005fec <strncmp+0x1c>
 8005fe8:	2a00      	cmp	r2, #0
 8005fea:	d1f5      	bne.n	8005fd8 <strncmp+0x8>
 8005fec:	1ad0      	subs	r0, r2, r3
 8005fee:	bd10      	pop	{r4, pc}
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	e7fc      	b.n	8005fee <strncmp+0x1e>

08005ff4 <strncpy>:
 8005ff4:	b510      	push	{r4, lr}
 8005ff6:	3901      	subs	r1, #1
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	b132      	cbz	r2, 800600a <strncpy+0x16>
 8005ffc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006000:	f803 4b01 	strb.w	r4, [r3], #1
 8006004:	3a01      	subs	r2, #1
 8006006:	2c00      	cmp	r4, #0
 8006008:	d1f7      	bne.n	8005ffa <strncpy+0x6>
 800600a:	441a      	add	r2, r3
 800600c:	2100      	movs	r1, #0
 800600e:	4293      	cmp	r3, r2
 8006010:	d100      	bne.n	8006014 <strncpy+0x20>
 8006012:	bd10      	pop	{r4, pc}
 8006014:	f803 1b01 	strb.w	r1, [r3], #1
 8006018:	e7f9      	b.n	800600e <strncpy+0x1a>
	...

0800601c <__errno>:
 800601c:	4b01      	ldr	r3, [pc, #4]	@ (8006024 <__errno+0x8>)
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	20000024 	.word	0x20000024

08006028 <__libc_init_array>:
 8006028:	b570      	push	{r4, r5, r6, lr}
 800602a:	4d0d      	ldr	r5, [pc, #52]	@ (8006060 <__libc_init_array+0x38>)
 800602c:	4c0d      	ldr	r4, [pc, #52]	@ (8006064 <__libc_init_array+0x3c>)
 800602e:	1b64      	subs	r4, r4, r5
 8006030:	10a4      	asrs	r4, r4, #2
 8006032:	2600      	movs	r6, #0
 8006034:	42a6      	cmp	r6, r4
 8006036:	d109      	bne.n	800604c <__libc_init_array+0x24>
 8006038:	4d0b      	ldr	r5, [pc, #44]	@ (8006068 <__libc_init_array+0x40>)
 800603a:	4c0c      	ldr	r4, [pc, #48]	@ (800606c <__libc_init_array+0x44>)
 800603c:	f000 fde4 	bl	8006c08 <_init>
 8006040:	1b64      	subs	r4, r4, r5
 8006042:	10a4      	asrs	r4, r4, #2
 8006044:	2600      	movs	r6, #0
 8006046:	42a6      	cmp	r6, r4
 8006048:	d105      	bne.n	8006056 <__libc_init_array+0x2e>
 800604a:	bd70      	pop	{r4, r5, r6, pc}
 800604c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006050:	4798      	blx	r3
 8006052:	3601      	adds	r6, #1
 8006054:	e7ee      	b.n	8006034 <__libc_init_array+0xc>
 8006056:	f855 3b04 	ldr.w	r3, [r5], #4
 800605a:	4798      	blx	r3
 800605c:	3601      	adds	r6, #1
 800605e:	e7f2      	b.n	8006046 <__libc_init_array+0x1e>
 8006060:	08006d74 	.word	0x08006d74
 8006064:	08006d74 	.word	0x08006d74
 8006068:	08006d74 	.word	0x08006d74
 800606c:	08006d78 	.word	0x08006d78

08006070 <__retarget_lock_acquire_recursive>:
 8006070:	4770      	bx	lr

08006072 <__retarget_lock_release_recursive>:
 8006072:	4770      	bx	lr

08006074 <_free_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	4605      	mov	r5, r0
 8006078:	2900      	cmp	r1, #0
 800607a:	d041      	beq.n	8006100 <_free_r+0x8c>
 800607c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006080:	1f0c      	subs	r4, r1, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	bfb8      	it	lt
 8006086:	18e4      	addlt	r4, r4, r3
 8006088:	f000 f8e0 	bl	800624c <__malloc_lock>
 800608c:	4a1d      	ldr	r2, [pc, #116]	@ (8006104 <_free_r+0x90>)
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	b933      	cbnz	r3, 80060a0 <_free_r+0x2c>
 8006092:	6063      	str	r3, [r4, #4]
 8006094:	6014      	str	r4, [r2, #0]
 8006096:	4628      	mov	r0, r5
 8006098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800609c:	f000 b8dc 	b.w	8006258 <__malloc_unlock>
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	d908      	bls.n	80060b6 <_free_r+0x42>
 80060a4:	6820      	ldr	r0, [r4, #0]
 80060a6:	1821      	adds	r1, r4, r0
 80060a8:	428b      	cmp	r3, r1
 80060aa:	bf01      	itttt	eq
 80060ac:	6819      	ldreq	r1, [r3, #0]
 80060ae:	685b      	ldreq	r3, [r3, #4]
 80060b0:	1809      	addeq	r1, r1, r0
 80060b2:	6021      	streq	r1, [r4, #0]
 80060b4:	e7ed      	b.n	8006092 <_free_r+0x1e>
 80060b6:	461a      	mov	r2, r3
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	b10b      	cbz	r3, 80060c0 <_free_r+0x4c>
 80060bc:	42a3      	cmp	r3, r4
 80060be:	d9fa      	bls.n	80060b6 <_free_r+0x42>
 80060c0:	6811      	ldr	r1, [r2, #0]
 80060c2:	1850      	adds	r0, r2, r1
 80060c4:	42a0      	cmp	r0, r4
 80060c6:	d10b      	bne.n	80060e0 <_free_r+0x6c>
 80060c8:	6820      	ldr	r0, [r4, #0]
 80060ca:	4401      	add	r1, r0
 80060cc:	1850      	adds	r0, r2, r1
 80060ce:	4283      	cmp	r3, r0
 80060d0:	6011      	str	r1, [r2, #0]
 80060d2:	d1e0      	bne.n	8006096 <_free_r+0x22>
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	6053      	str	r3, [r2, #4]
 80060da:	4408      	add	r0, r1
 80060dc:	6010      	str	r0, [r2, #0]
 80060de:	e7da      	b.n	8006096 <_free_r+0x22>
 80060e0:	d902      	bls.n	80060e8 <_free_r+0x74>
 80060e2:	230c      	movs	r3, #12
 80060e4:	602b      	str	r3, [r5, #0]
 80060e6:	e7d6      	b.n	8006096 <_free_r+0x22>
 80060e8:	6820      	ldr	r0, [r4, #0]
 80060ea:	1821      	adds	r1, r4, r0
 80060ec:	428b      	cmp	r3, r1
 80060ee:	bf04      	itt	eq
 80060f0:	6819      	ldreq	r1, [r3, #0]
 80060f2:	685b      	ldreq	r3, [r3, #4]
 80060f4:	6063      	str	r3, [r4, #4]
 80060f6:	bf04      	itt	eq
 80060f8:	1809      	addeq	r1, r1, r0
 80060fa:	6021      	streq	r1, [r4, #0]
 80060fc:	6054      	str	r4, [r2, #4]
 80060fe:	e7ca      	b.n	8006096 <_free_r+0x22>
 8006100:	bd38      	pop	{r3, r4, r5, pc}
 8006102:	bf00      	nop
 8006104:	200002f4 	.word	0x200002f4

08006108 <sbrk_aligned>:
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	4e0f      	ldr	r6, [pc, #60]	@ (8006148 <sbrk_aligned+0x40>)
 800610c:	460c      	mov	r4, r1
 800610e:	6831      	ldr	r1, [r6, #0]
 8006110:	4605      	mov	r5, r0
 8006112:	b911      	cbnz	r1, 800611a <sbrk_aligned+0x12>
 8006114:	f000 fc38 	bl	8006988 <_sbrk_r>
 8006118:	6030      	str	r0, [r6, #0]
 800611a:	4621      	mov	r1, r4
 800611c:	4628      	mov	r0, r5
 800611e:	f000 fc33 	bl	8006988 <_sbrk_r>
 8006122:	1c43      	adds	r3, r0, #1
 8006124:	d103      	bne.n	800612e <sbrk_aligned+0x26>
 8006126:	f04f 34ff 	mov.w	r4, #4294967295
 800612a:	4620      	mov	r0, r4
 800612c:	bd70      	pop	{r4, r5, r6, pc}
 800612e:	1cc4      	adds	r4, r0, #3
 8006130:	f024 0403 	bic.w	r4, r4, #3
 8006134:	42a0      	cmp	r0, r4
 8006136:	d0f8      	beq.n	800612a <sbrk_aligned+0x22>
 8006138:	1a21      	subs	r1, r4, r0
 800613a:	4628      	mov	r0, r5
 800613c:	f000 fc24 	bl	8006988 <_sbrk_r>
 8006140:	3001      	adds	r0, #1
 8006142:	d1f2      	bne.n	800612a <sbrk_aligned+0x22>
 8006144:	e7ef      	b.n	8006126 <sbrk_aligned+0x1e>
 8006146:	bf00      	nop
 8006148:	200002f0 	.word	0x200002f0

0800614c <_malloc_r>:
 800614c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006150:	1ccd      	adds	r5, r1, #3
 8006152:	f025 0503 	bic.w	r5, r5, #3
 8006156:	3508      	adds	r5, #8
 8006158:	2d0c      	cmp	r5, #12
 800615a:	bf38      	it	cc
 800615c:	250c      	movcc	r5, #12
 800615e:	2d00      	cmp	r5, #0
 8006160:	4606      	mov	r6, r0
 8006162:	db01      	blt.n	8006168 <_malloc_r+0x1c>
 8006164:	42a9      	cmp	r1, r5
 8006166:	d904      	bls.n	8006172 <_malloc_r+0x26>
 8006168:	230c      	movs	r3, #12
 800616a:	6033      	str	r3, [r6, #0]
 800616c:	2000      	movs	r0, #0
 800616e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006172:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006248 <_malloc_r+0xfc>
 8006176:	f000 f869 	bl	800624c <__malloc_lock>
 800617a:	f8d8 3000 	ldr.w	r3, [r8]
 800617e:	461c      	mov	r4, r3
 8006180:	bb44      	cbnz	r4, 80061d4 <_malloc_r+0x88>
 8006182:	4629      	mov	r1, r5
 8006184:	4630      	mov	r0, r6
 8006186:	f7ff ffbf 	bl	8006108 <sbrk_aligned>
 800618a:	1c43      	adds	r3, r0, #1
 800618c:	4604      	mov	r4, r0
 800618e:	d158      	bne.n	8006242 <_malloc_r+0xf6>
 8006190:	f8d8 4000 	ldr.w	r4, [r8]
 8006194:	4627      	mov	r7, r4
 8006196:	2f00      	cmp	r7, #0
 8006198:	d143      	bne.n	8006222 <_malloc_r+0xd6>
 800619a:	2c00      	cmp	r4, #0
 800619c:	d04b      	beq.n	8006236 <_malloc_r+0xea>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	4639      	mov	r1, r7
 80061a2:	4630      	mov	r0, r6
 80061a4:	eb04 0903 	add.w	r9, r4, r3
 80061a8:	f000 fbee 	bl	8006988 <_sbrk_r>
 80061ac:	4581      	cmp	r9, r0
 80061ae:	d142      	bne.n	8006236 <_malloc_r+0xea>
 80061b0:	6821      	ldr	r1, [r4, #0]
 80061b2:	1a6d      	subs	r5, r5, r1
 80061b4:	4629      	mov	r1, r5
 80061b6:	4630      	mov	r0, r6
 80061b8:	f7ff ffa6 	bl	8006108 <sbrk_aligned>
 80061bc:	3001      	adds	r0, #1
 80061be:	d03a      	beq.n	8006236 <_malloc_r+0xea>
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	442b      	add	r3, r5
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	f8d8 3000 	ldr.w	r3, [r8]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	bb62      	cbnz	r2, 8006228 <_malloc_r+0xdc>
 80061ce:	f8c8 7000 	str.w	r7, [r8]
 80061d2:	e00f      	b.n	80061f4 <_malloc_r+0xa8>
 80061d4:	6822      	ldr	r2, [r4, #0]
 80061d6:	1b52      	subs	r2, r2, r5
 80061d8:	d420      	bmi.n	800621c <_malloc_r+0xd0>
 80061da:	2a0b      	cmp	r2, #11
 80061dc:	d917      	bls.n	800620e <_malloc_r+0xc2>
 80061de:	1961      	adds	r1, r4, r5
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	6025      	str	r5, [r4, #0]
 80061e4:	bf18      	it	ne
 80061e6:	6059      	strne	r1, [r3, #4]
 80061e8:	6863      	ldr	r3, [r4, #4]
 80061ea:	bf08      	it	eq
 80061ec:	f8c8 1000 	streq.w	r1, [r8]
 80061f0:	5162      	str	r2, [r4, r5]
 80061f2:	604b      	str	r3, [r1, #4]
 80061f4:	4630      	mov	r0, r6
 80061f6:	f000 f82f 	bl	8006258 <__malloc_unlock>
 80061fa:	f104 000b 	add.w	r0, r4, #11
 80061fe:	1d23      	adds	r3, r4, #4
 8006200:	f020 0007 	bic.w	r0, r0, #7
 8006204:	1ac2      	subs	r2, r0, r3
 8006206:	bf1c      	itt	ne
 8006208:	1a1b      	subne	r3, r3, r0
 800620a:	50a3      	strne	r3, [r4, r2]
 800620c:	e7af      	b.n	800616e <_malloc_r+0x22>
 800620e:	6862      	ldr	r2, [r4, #4]
 8006210:	42a3      	cmp	r3, r4
 8006212:	bf0c      	ite	eq
 8006214:	f8c8 2000 	streq.w	r2, [r8]
 8006218:	605a      	strne	r2, [r3, #4]
 800621a:	e7eb      	b.n	80061f4 <_malloc_r+0xa8>
 800621c:	4623      	mov	r3, r4
 800621e:	6864      	ldr	r4, [r4, #4]
 8006220:	e7ae      	b.n	8006180 <_malloc_r+0x34>
 8006222:	463c      	mov	r4, r7
 8006224:	687f      	ldr	r7, [r7, #4]
 8006226:	e7b6      	b.n	8006196 <_malloc_r+0x4a>
 8006228:	461a      	mov	r2, r3
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	42a3      	cmp	r3, r4
 800622e:	d1fb      	bne.n	8006228 <_malloc_r+0xdc>
 8006230:	2300      	movs	r3, #0
 8006232:	6053      	str	r3, [r2, #4]
 8006234:	e7de      	b.n	80061f4 <_malloc_r+0xa8>
 8006236:	230c      	movs	r3, #12
 8006238:	6033      	str	r3, [r6, #0]
 800623a:	4630      	mov	r0, r6
 800623c:	f000 f80c 	bl	8006258 <__malloc_unlock>
 8006240:	e794      	b.n	800616c <_malloc_r+0x20>
 8006242:	6005      	str	r5, [r0, #0]
 8006244:	e7d6      	b.n	80061f4 <_malloc_r+0xa8>
 8006246:	bf00      	nop
 8006248:	200002f4 	.word	0x200002f4

0800624c <__malloc_lock>:
 800624c:	4801      	ldr	r0, [pc, #4]	@ (8006254 <__malloc_lock+0x8>)
 800624e:	f7ff bf0f 	b.w	8006070 <__retarget_lock_acquire_recursive>
 8006252:	bf00      	nop
 8006254:	200002ec 	.word	0x200002ec

08006258 <__malloc_unlock>:
 8006258:	4801      	ldr	r0, [pc, #4]	@ (8006260 <__malloc_unlock+0x8>)
 800625a:	f7ff bf0a 	b.w	8006072 <__retarget_lock_release_recursive>
 800625e:	bf00      	nop
 8006260:	200002ec 	.word	0x200002ec

08006264 <_sungetc_r>:
 8006264:	b538      	push	{r3, r4, r5, lr}
 8006266:	1c4b      	adds	r3, r1, #1
 8006268:	4614      	mov	r4, r2
 800626a:	d103      	bne.n	8006274 <_sungetc_r+0x10>
 800626c:	f04f 35ff 	mov.w	r5, #4294967295
 8006270:	4628      	mov	r0, r5
 8006272:	bd38      	pop	{r3, r4, r5, pc}
 8006274:	8993      	ldrh	r3, [r2, #12]
 8006276:	f023 0320 	bic.w	r3, r3, #32
 800627a:	8193      	strh	r3, [r2, #12]
 800627c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800627e:	6852      	ldr	r2, [r2, #4]
 8006280:	b2cd      	uxtb	r5, r1
 8006282:	b18b      	cbz	r3, 80062a8 <_sungetc_r+0x44>
 8006284:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006286:	4293      	cmp	r3, r2
 8006288:	dd08      	ble.n	800629c <_sungetc_r+0x38>
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	1e5a      	subs	r2, r3, #1
 800628e:	6022      	str	r2, [r4, #0]
 8006290:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006294:	6863      	ldr	r3, [r4, #4]
 8006296:	3301      	adds	r3, #1
 8006298:	6063      	str	r3, [r4, #4]
 800629a:	e7e9      	b.n	8006270 <_sungetc_r+0xc>
 800629c:	4621      	mov	r1, r4
 800629e:	f000 fb38 	bl	8006912 <__submore>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d0f1      	beq.n	800628a <_sungetc_r+0x26>
 80062a6:	e7e1      	b.n	800626c <_sungetc_r+0x8>
 80062a8:	6921      	ldr	r1, [r4, #16]
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	b151      	cbz	r1, 80062c4 <_sungetc_r+0x60>
 80062ae:	4299      	cmp	r1, r3
 80062b0:	d208      	bcs.n	80062c4 <_sungetc_r+0x60>
 80062b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80062b6:	42a9      	cmp	r1, r5
 80062b8:	d104      	bne.n	80062c4 <_sungetc_r+0x60>
 80062ba:	3b01      	subs	r3, #1
 80062bc:	3201      	adds	r2, #1
 80062be:	6023      	str	r3, [r4, #0]
 80062c0:	6062      	str	r2, [r4, #4]
 80062c2:	e7d5      	b.n	8006270 <_sungetc_r+0xc>
 80062c4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80062c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80062ce:	2303      	movs	r3, #3
 80062d0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80062d2:	4623      	mov	r3, r4
 80062d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	2301      	movs	r3, #1
 80062dc:	e7dc      	b.n	8006298 <_sungetc_r+0x34>

080062de <__ssrefill_r>:
 80062de:	b510      	push	{r4, lr}
 80062e0:	460c      	mov	r4, r1
 80062e2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80062e4:	b169      	cbz	r1, 8006302 <__ssrefill_r+0x24>
 80062e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062ea:	4299      	cmp	r1, r3
 80062ec:	d001      	beq.n	80062f2 <__ssrefill_r+0x14>
 80062ee:	f7ff fec1 	bl	8006074 <_free_r>
 80062f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062f4:	6063      	str	r3, [r4, #4]
 80062f6:	2000      	movs	r0, #0
 80062f8:	6360      	str	r0, [r4, #52]	@ 0x34
 80062fa:	b113      	cbz	r3, 8006302 <__ssrefill_r+0x24>
 80062fc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80062fe:	6023      	str	r3, [r4, #0]
 8006300:	bd10      	pop	{r4, pc}
 8006302:	6923      	ldr	r3, [r4, #16]
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	2300      	movs	r3, #0
 8006308:	6063      	str	r3, [r4, #4]
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	f043 0320 	orr.w	r3, r3, #32
 8006310:	81a3      	strh	r3, [r4, #12]
 8006312:	f04f 30ff 	mov.w	r0, #4294967295
 8006316:	e7f3      	b.n	8006300 <__ssrefill_r+0x22>

08006318 <__ssvfiscanf_r>:
 8006318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631c:	460c      	mov	r4, r1
 800631e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8006322:	2100      	movs	r1, #0
 8006324:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006328:	49a6      	ldr	r1, [pc, #664]	@ (80065c4 <__ssvfiscanf_r+0x2ac>)
 800632a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800632c:	f10d 0804 	add.w	r8, sp, #4
 8006330:	49a5      	ldr	r1, [pc, #660]	@ (80065c8 <__ssvfiscanf_r+0x2b0>)
 8006332:	4fa6      	ldr	r7, [pc, #664]	@ (80065cc <__ssvfiscanf_r+0x2b4>)
 8006334:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006338:	4606      	mov	r6, r0
 800633a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	f892 9000 	ldrb.w	r9, [r2]
 8006342:	f1b9 0f00 	cmp.w	r9, #0
 8006346:	f000 8158 	beq.w	80065fa <__ssvfiscanf_r+0x2e2>
 800634a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800634e:	f013 0308 	ands.w	r3, r3, #8
 8006352:	f102 0501 	add.w	r5, r2, #1
 8006356:	d019      	beq.n	800638c <__ssvfiscanf_r+0x74>
 8006358:	6863      	ldr	r3, [r4, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	dd0f      	ble.n	800637e <__ssvfiscanf_r+0x66>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	781a      	ldrb	r2, [r3, #0]
 8006362:	5cba      	ldrb	r2, [r7, r2]
 8006364:	0712      	lsls	r2, r2, #28
 8006366:	d401      	bmi.n	800636c <__ssvfiscanf_r+0x54>
 8006368:	462a      	mov	r2, r5
 800636a:	e7e8      	b.n	800633e <__ssvfiscanf_r+0x26>
 800636c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800636e:	3201      	adds	r2, #1
 8006370:	9245      	str	r2, [sp, #276]	@ 0x114
 8006372:	6862      	ldr	r2, [r4, #4]
 8006374:	3301      	adds	r3, #1
 8006376:	3a01      	subs	r2, #1
 8006378:	6062      	str	r2, [r4, #4]
 800637a:	6023      	str	r3, [r4, #0]
 800637c:	e7ec      	b.n	8006358 <__ssvfiscanf_r+0x40>
 800637e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006380:	4621      	mov	r1, r4
 8006382:	4630      	mov	r0, r6
 8006384:	4798      	blx	r3
 8006386:	2800      	cmp	r0, #0
 8006388:	d0e9      	beq.n	800635e <__ssvfiscanf_r+0x46>
 800638a:	e7ed      	b.n	8006368 <__ssvfiscanf_r+0x50>
 800638c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8006390:	f040 8085 	bne.w	800649e <__ssvfiscanf_r+0x186>
 8006394:	9341      	str	r3, [sp, #260]	@ 0x104
 8006396:	9343      	str	r3, [sp, #268]	@ 0x10c
 8006398:	7853      	ldrb	r3, [r2, #1]
 800639a:	2b2a      	cmp	r3, #42	@ 0x2a
 800639c:	bf02      	ittt	eq
 800639e:	2310      	moveq	r3, #16
 80063a0:	1c95      	addeq	r5, r2, #2
 80063a2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80063a4:	220a      	movs	r2, #10
 80063a6:	46aa      	mov	sl, r5
 80063a8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80063ac:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80063b0:	2b09      	cmp	r3, #9
 80063b2:	d91e      	bls.n	80063f2 <__ssvfiscanf_r+0xda>
 80063b4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80065d0 <__ssvfiscanf_r+0x2b8>
 80063b8:	2203      	movs	r2, #3
 80063ba:	4658      	mov	r0, fp
 80063bc:	f7f9 ff10 	bl	80001e0 <memchr>
 80063c0:	b138      	cbz	r0, 80063d2 <__ssvfiscanf_r+0xba>
 80063c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80063c4:	eba0 000b 	sub.w	r0, r0, fp
 80063c8:	2301      	movs	r3, #1
 80063ca:	4083      	lsls	r3, r0
 80063cc:	4313      	orrs	r3, r2
 80063ce:	9341      	str	r3, [sp, #260]	@ 0x104
 80063d0:	4655      	mov	r5, sl
 80063d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80063d6:	2b78      	cmp	r3, #120	@ 0x78
 80063d8:	d806      	bhi.n	80063e8 <__ssvfiscanf_r+0xd0>
 80063da:	2b57      	cmp	r3, #87	@ 0x57
 80063dc:	d810      	bhi.n	8006400 <__ssvfiscanf_r+0xe8>
 80063de:	2b25      	cmp	r3, #37	@ 0x25
 80063e0:	d05d      	beq.n	800649e <__ssvfiscanf_r+0x186>
 80063e2:	d857      	bhi.n	8006494 <__ssvfiscanf_r+0x17c>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d075      	beq.n	80064d4 <__ssvfiscanf_r+0x1bc>
 80063e8:	2303      	movs	r3, #3
 80063ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 80063ec:	230a      	movs	r3, #10
 80063ee:	9342      	str	r3, [sp, #264]	@ 0x108
 80063f0:	e088      	b.n	8006504 <__ssvfiscanf_r+0x1ec>
 80063f2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80063f4:	fb02 1103 	mla	r1, r2, r3, r1
 80063f8:	3930      	subs	r1, #48	@ 0x30
 80063fa:	9143      	str	r1, [sp, #268]	@ 0x10c
 80063fc:	4655      	mov	r5, sl
 80063fe:	e7d2      	b.n	80063a6 <__ssvfiscanf_r+0x8e>
 8006400:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006404:	2a20      	cmp	r2, #32
 8006406:	d8ef      	bhi.n	80063e8 <__ssvfiscanf_r+0xd0>
 8006408:	a101      	add	r1, pc, #4	@ (adr r1, 8006410 <__ssvfiscanf_r+0xf8>)
 800640a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800640e:	bf00      	nop
 8006410:	080064e3 	.word	0x080064e3
 8006414:	080063e9 	.word	0x080063e9
 8006418:	080063e9 	.word	0x080063e9
 800641c:	0800653d 	.word	0x0800653d
 8006420:	080063e9 	.word	0x080063e9
 8006424:	080063e9 	.word	0x080063e9
 8006428:	080063e9 	.word	0x080063e9
 800642c:	080063e9 	.word	0x080063e9
 8006430:	080063e9 	.word	0x080063e9
 8006434:	080063e9 	.word	0x080063e9
 8006438:	080063e9 	.word	0x080063e9
 800643c:	08006553 	.word	0x08006553
 8006440:	08006539 	.word	0x08006539
 8006444:	0800649b 	.word	0x0800649b
 8006448:	0800649b 	.word	0x0800649b
 800644c:	0800649b 	.word	0x0800649b
 8006450:	080063e9 	.word	0x080063e9
 8006454:	080064f5 	.word	0x080064f5
 8006458:	080063e9 	.word	0x080063e9
 800645c:	080063e9 	.word	0x080063e9
 8006460:	080063e9 	.word	0x080063e9
 8006464:	080063e9 	.word	0x080063e9
 8006468:	08006563 	.word	0x08006563
 800646c:	080064fd 	.word	0x080064fd
 8006470:	080064db 	.word	0x080064db
 8006474:	080063e9 	.word	0x080063e9
 8006478:	080063e9 	.word	0x080063e9
 800647c:	0800655f 	.word	0x0800655f
 8006480:	080063e9 	.word	0x080063e9
 8006484:	08006539 	.word	0x08006539
 8006488:	080063e9 	.word	0x080063e9
 800648c:	080063e9 	.word	0x080063e9
 8006490:	080064e3 	.word	0x080064e3
 8006494:	3b45      	subs	r3, #69	@ 0x45
 8006496:	2b02      	cmp	r3, #2
 8006498:	d8a6      	bhi.n	80063e8 <__ssvfiscanf_r+0xd0>
 800649a:	2305      	movs	r3, #5
 800649c:	e031      	b.n	8006502 <__ssvfiscanf_r+0x1ea>
 800649e:	6863      	ldr	r3, [r4, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	dd0d      	ble.n	80064c0 <__ssvfiscanf_r+0x1a8>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	781a      	ldrb	r2, [r3, #0]
 80064a8:	454a      	cmp	r2, r9
 80064aa:	f040 80a6 	bne.w	80065fa <__ssvfiscanf_r+0x2e2>
 80064ae:	3301      	adds	r3, #1
 80064b0:	6862      	ldr	r2, [r4, #4]
 80064b2:	6023      	str	r3, [r4, #0]
 80064b4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80064b6:	3a01      	subs	r2, #1
 80064b8:	3301      	adds	r3, #1
 80064ba:	6062      	str	r2, [r4, #4]
 80064bc:	9345      	str	r3, [sp, #276]	@ 0x114
 80064be:	e753      	b.n	8006368 <__ssvfiscanf_r+0x50>
 80064c0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80064c2:	4621      	mov	r1, r4
 80064c4:	4630      	mov	r0, r6
 80064c6:	4798      	blx	r3
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d0eb      	beq.n	80064a4 <__ssvfiscanf_r+0x18c>
 80064cc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80064ce:	2800      	cmp	r0, #0
 80064d0:	f040 808b 	bne.w	80065ea <__ssvfiscanf_r+0x2d2>
 80064d4:	f04f 30ff 	mov.w	r0, #4294967295
 80064d8:	e08b      	b.n	80065f2 <__ssvfiscanf_r+0x2da>
 80064da:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80064dc:	f042 0220 	orr.w	r2, r2, #32
 80064e0:	9241      	str	r2, [sp, #260]	@ 0x104
 80064e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80064e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064e8:	9241      	str	r2, [sp, #260]	@ 0x104
 80064ea:	2210      	movs	r2, #16
 80064ec:	2b6e      	cmp	r3, #110	@ 0x6e
 80064ee:	9242      	str	r2, [sp, #264]	@ 0x108
 80064f0:	d902      	bls.n	80064f8 <__ssvfiscanf_r+0x1e0>
 80064f2:	e005      	b.n	8006500 <__ssvfiscanf_r+0x1e8>
 80064f4:	2300      	movs	r3, #0
 80064f6:	9342      	str	r3, [sp, #264]	@ 0x108
 80064f8:	2303      	movs	r3, #3
 80064fa:	e002      	b.n	8006502 <__ssvfiscanf_r+0x1ea>
 80064fc:	2308      	movs	r3, #8
 80064fe:	9342      	str	r3, [sp, #264]	@ 0x108
 8006500:	2304      	movs	r3, #4
 8006502:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006504:	6863      	ldr	r3, [r4, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	dd39      	ble.n	800657e <__ssvfiscanf_r+0x266>
 800650a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800650c:	0659      	lsls	r1, r3, #25
 800650e:	d404      	bmi.n	800651a <__ssvfiscanf_r+0x202>
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	781a      	ldrb	r2, [r3, #0]
 8006514:	5cba      	ldrb	r2, [r7, r2]
 8006516:	0712      	lsls	r2, r2, #28
 8006518:	d438      	bmi.n	800658c <__ssvfiscanf_r+0x274>
 800651a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800651c:	2b02      	cmp	r3, #2
 800651e:	dc47      	bgt.n	80065b0 <__ssvfiscanf_r+0x298>
 8006520:	466b      	mov	r3, sp
 8006522:	4622      	mov	r2, r4
 8006524:	a941      	add	r1, sp, #260	@ 0x104
 8006526:	4630      	mov	r0, r6
 8006528:	f000 f86c 	bl	8006604 <_scanf_chars>
 800652c:	2801      	cmp	r0, #1
 800652e:	d064      	beq.n	80065fa <__ssvfiscanf_r+0x2e2>
 8006530:	2802      	cmp	r0, #2
 8006532:	f47f af19 	bne.w	8006368 <__ssvfiscanf_r+0x50>
 8006536:	e7c9      	b.n	80064cc <__ssvfiscanf_r+0x1b4>
 8006538:	220a      	movs	r2, #10
 800653a:	e7d7      	b.n	80064ec <__ssvfiscanf_r+0x1d4>
 800653c:	4629      	mov	r1, r5
 800653e:	4640      	mov	r0, r8
 8006540:	f000 f9ae 	bl	80068a0 <__sccl>
 8006544:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800654a:	9341      	str	r3, [sp, #260]	@ 0x104
 800654c:	4605      	mov	r5, r0
 800654e:	2301      	movs	r3, #1
 8006550:	e7d7      	b.n	8006502 <__ssvfiscanf_r+0x1ea>
 8006552:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006558:	9341      	str	r3, [sp, #260]	@ 0x104
 800655a:	2300      	movs	r3, #0
 800655c:	e7d1      	b.n	8006502 <__ssvfiscanf_r+0x1ea>
 800655e:	2302      	movs	r3, #2
 8006560:	e7cf      	b.n	8006502 <__ssvfiscanf_r+0x1ea>
 8006562:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006564:	06c3      	lsls	r3, r0, #27
 8006566:	f53f aeff 	bmi.w	8006368 <__ssvfiscanf_r+0x50>
 800656a:	9b00      	ldr	r3, [sp, #0]
 800656c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800656e:	1d19      	adds	r1, r3, #4
 8006570:	9100      	str	r1, [sp, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	07c0      	lsls	r0, r0, #31
 8006576:	bf4c      	ite	mi
 8006578:	801a      	strhmi	r2, [r3, #0]
 800657a:	601a      	strpl	r2, [r3, #0]
 800657c:	e6f4      	b.n	8006368 <__ssvfiscanf_r+0x50>
 800657e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006580:	4621      	mov	r1, r4
 8006582:	4630      	mov	r0, r6
 8006584:	4798      	blx	r3
 8006586:	2800      	cmp	r0, #0
 8006588:	d0bf      	beq.n	800650a <__ssvfiscanf_r+0x1f2>
 800658a:	e79f      	b.n	80064cc <__ssvfiscanf_r+0x1b4>
 800658c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800658e:	3201      	adds	r2, #1
 8006590:	9245      	str	r2, [sp, #276]	@ 0x114
 8006592:	6862      	ldr	r2, [r4, #4]
 8006594:	3a01      	subs	r2, #1
 8006596:	2a00      	cmp	r2, #0
 8006598:	6062      	str	r2, [r4, #4]
 800659a:	dd02      	ble.n	80065a2 <__ssvfiscanf_r+0x28a>
 800659c:	3301      	adds	r3, #1
 800659e:	6023      	str	r3, [r4, #0]
 80065a0:	e7b6      	b.n	8006510 <__ssvfiscanf_r+0x1f8>
 80065a2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80065a4:	4621      	mov	r1, r4
 80065a6:	4630      	mov	r0, r6
 80065a8:	4798      	blx	r3
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d0b0      	beq.n	8006510 <__ssvfiscanf_r+0x1f8>
 80065ae:	e78d      	b.n	80064cc <__ssvfiscanf_r+0x1b4>
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	dc0f      	bgt.n	80065d4 <__ssvfiscanf_r+0x2bc>
 80065b4:	466b      	mov	r3, sp
 80065b6:	4622      	mov	r2, r4
 80065b8:	a941      	add	r1, sp, #260	@ 0x104
 80065ba:	4630      	mov	r0, r6
 80065bc:	f000 f87c 	bl	80066b8 <_scanf_i>
 80065c0:	e7b4      	b.n	800652c <__ssvfiscanf_r+0x214>
 80065c2:	bf00      	nop
 80065c4:	08006265 	.word	0x08006265
 80065c8:	080062df 	.word	0x080062df
 80065cc:	08006c6c 	.word	0x08006c6c
 80065d0:	08006c4c 	.word	0x08006c4c
 80065d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006600 <__ssvfiscanf_r+0x2e8>)
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f43f aec6 	beq.w	8006368 <__ssvfiscanf_r+0x50>
 80065dc:	466b      	mov	r3, sp
 80065de:	4622      	mov	r2, r4
 80065e0:	a941      	add	r1, sp, #260	@ 0x104
 80065e2:	4630      	mov	r0, r6
 80065e4:	f3af 8000 	nop.w
 80065e8:	e7a0      	b.n	800652c <__ssvfiscanf_r+0x214>
 80065ea:	89a3      	ldrh	r3, [r4, #12]
 80065ec:	065b      	lsls	r3, r3, #25
 80065ee:	f53f af71 	bmi.w	80064d4 <__ssvfiscanf_r+0x1bc>
 80065f2:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80065f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fa:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80065fc:	e7f9      	b.n	80065f2 <__ssvfiscanf_r+0x2da>
 80065fe:	bf00      	nop
 8006600:	00000000 	.word	0x00000000

08006604 <_scanf_chars>:
 8006604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006608:	4615      	mov	r5, r2
 800660a:	688a      	ldr	r2, [r1, #8]
 800660c:	4680      	mov	r8, r0
 800660e:	460c      	mov	r4, r1
 8006610:	b932      	cbnz	r2, 8006620 <_scanf_chars+0x1c>
 8006612:	698a      	ldr	r2, [r1, #24]
 8006614:	2a00      	cmp	r2, #0
 8006616:	bf14      	ite	ne
 8006618:	f04f 32ff 	movne.w	r2, #4294967295
 800661c:	2201      	moveq	r2, #1
 800661e:	608a      	str	r2, [r1, #8]
 8006620:	6822      	ldr	r2, [r4, #0]
 8006622:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80066b4 <_scanf_chars+0xb0>
 8006626:	06d1      	lsls	r1, r2, #27
 8006628:	bf5f      	itttt	pl
 800662a:	681a      	ldrpl	r2, [r3, #0]
 800662c:	1d11      	addpl	r1, r2, #4
 800662e:	6019      	strpl	r1, [r3, #0]
 8006630:	6816      	ldrpl	r6, [r2, #0]
 8006632:	2700      	movs	r7, #0
 8006634:	69a0      	ldr	r0, [r4, #24]
 8006636:	b188      	cbz	r0, 800665c <_scanf_chars+0x58>
 8006638:	2801      	cmp	r0, #1
 800663a:	d107      	bne.n	800664c <_scanf_chars+0x48>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	781a      	ldrb	r2, [r3, #0]
 8006640:	6963      	ldr	r3, [r4, #20]
 8006642:	5c9b      	ldrb	r3, [r3, r2]
 8006644:	b953      	cbnz	r3, 800665c <_scanf_chars+0x58>
 8006646:	2f00      	cmp	r7, #0
 8006648:	d031      	beq.n	80066ae <_scanf_chars+0xaa>
 800664a:	e022      	b.n	8006692 <_scanf_chars+0x8e>
 800664c:	2802      	cmp	r0, #2
 800664e:	d120      	bne.n	8006692 <_scanf_chars+0x8e>
 8006650:	682b      	ldr	r3, [r5, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006658:	071b      	lsls	r3, r3, #28
 800665a:	d41a      	bmi.n	8006692 <_scanf_chars+0x8e>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	06da      	lsls	r2, r3, #27
 8006660:	bf5e      	ittt	pl
 8006662:	682b      	ldrpl	r3, [r5, #0]
 8006664:	781b      	ldrbpl	r3, [r3, #0]
 8006666:	f806 3b01 	strbpl.w	r3, [r6], #1
 800666a:	682a      	ldr	r2, [r5, #0]
 800666c:	686b      	ldr	r3, [r5, #4]
 800666e:	3201      	adds	r2, #1
 8006670:	602a      	str	r2, [r5, #0]
 8006672:	68a2      	ldr	r2, [r4, #8]
 8006674:	3b01      	subs	r3, #1
 8006676:	3a01      	subs	r2, #1
 8006678:	606b      	str	r3, [r5, #4]
 800667a:	3701      	adds	r7, #1
 800667c:	60a2      	str	r2, [r4, #8]
 800667e:	b142      	cbz	r2, 8006692 <_scanf_chars+0x8e>
 8006680:	2b00      	cmp	r3, #0
 8006682:	dcd7      	bgt.n	8006634 <_scanf_chars+0x30>
 8006684:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006688:	4629      	mov	r1, r5
 800668a:	4640      	mov	r0, r8
 800668c:	4798      	blx	r3
 800668e:	2800      	cmp	r0, #0
 8006690:	d0d0      	beq.n	8006634 <_scanf_chars+0x30>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	f013 0310 	ands.w	r3, r3, #16
 8006698:	d105      	bne.n	80066a6 <_scanf_chars+0xa2>
 800669a:	68e2      	ldr	r2, [r4, #12]
 800669c:	3201      	adds	r2, #1
 800669e:	60e2      	str	r2, [r4, #12]
 80066a0:	69a2      	ldr	r2, [r4, #24]
 80066a2:	b102      	cbz	r2, 80066a6 <_scanf_chars+0xa2>
 80066a4:	7033      	strb	r3, [r6, #0]
 80066a6:	6923      	ldr	r3, [r4, #16]
 80066a8:	443b      	add	r3, r7
 80066aa:	6123      	str	r3, [r4, #16]
 80066ac:	2000      	movs	r0, #0
 80066ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066b2:	bf00      	nop
 80066b4:	08006c6c 	.word	0x08006c6c

080066b8 <_scanf_i>:
 80066b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066bc:	4698      	mov	r8, r3
 80066be:	4b74      	ldr	r3, [pc, #464]	@ (8006890 <_scanf_i+0x1d8>)
 80066c0:	460c      	mov	r4, r1
 80066c2:	4682      	mov	sl, r0
 80066c4:	4616      	mov	r6, r2
 80066c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80066ca:	b087      	sub	sp, #28
 80066cc:	ab03      	add	r3, sp, #12
 80066ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80066d2:	4b70      	ldr	r3, [pc, #448]	@ (8006894 <_scanf_i+0x1dc>)
 80066d4:	69a1      	ldr	r1, [r4, #24]
 80066d6:	4a70      	ldr	r2, [pc, #448]	@ (8006898 <_scanf_i+0x1e0>)
 80066d8:	2903      	cmp	r1, #3
 80066da:	bf08      	it	eq
 80066dc:	461a      	moveq	r2, r3
 80066de:	68a3      	ldr	r3, [r4, #8]
 80066e0:	9201      	str	r2, [sp, #4]
 80066e2:	1e5a      	subs	r2, r3, #1
 80066e4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80066e8:	bf88      	it	hi
 80066ea:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80066ee:	4627      	mov	r7, r4
 80066f0:	bf82      	ittt	hi
 80066f2:	eb03 0905 	addhi.w	r9, r3, r5
 80066f6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80066fa:	60a3      	strhi	r3, [r4, #8]
 80066fc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006700:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006704:	bf98      	it	ls
 8006706:	f04f 0900 	movls.w	r9, #0
 800670a:	6023      	str	r3, [r4, #0]
 800670c:	463d      	mov	r5, r7
 800670e:	f04f 0b00 	mov.w	fp, #0
 8006712:	6831      	ldr	r1, [r6, #0]
 8006714:	ab03      	add	r3, sp, #12
 8006716:	7809      	ldrb	r1, [r1, #0]
 8006718:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800671c:	2202      	movs	r2, #2
 800671e:	f7f9 fd5f 	bl	80001e0 <memchr>
 8006722:	b328      	cbz	r0, 8006770 <_scanf_i+0xb8>
 8006724:	f1bb 0f01 	cmp.w	fp, #1
 8006728:	d159      	bne.n	80067de <_scanf_i+0x126>
 800672a:	6862      	ldr	r2, [r4, #4]
 800672c:	b92a      	cbnz	r2, 800673a <_scanf_i+0x82>
 800672e:	6822      	ldr	r2, [r4, #0]
 8006730:	2108      	movs	r1, #8
 8006732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006736:	6061      	str	r1, [r4, #4]
 8006738:	6022      	str	r2, [r4, #0]
 800673a:	6822      	ldr	r2, [r4, #0]
 800673c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006740:	6022      	str	r2, [r4, #0]
 8006742:	68a2      	ldr	r2, [r4, #8]
 8006744:	1e51      	subs	r1, r2, #1
 8006746:	60a1      	str	r1, [r4, #8]
 8006748:	b192      	cbz	r2, 8006770 <_scanf_i+0xb8>
 800674a:	6832      	ldr	r2, [r6, #0]
 800674c:	1c51      	adds	r1, r2, #1
 800674e:	6031      	str	r1, [r6, #0]
 8006750:	7812      	ldrb	r2, [r2, #0]
 8006752:	f805 2b01 	strb.w	r2, [r5], #1
 8006756:	6872      	ldr	r2, [r6, #4]
 8006758:	3a01      	subs	r2, #1
 800675a:	2a00      	cmp	r2, #0
 800675c:	6072      	str	r2, [r6, #4]
 800675e:	dc07      	bgt.n	8006770 <_scanf_i+0xb8>
 8006760:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006764:	4631      	mov	r1, r6
 8006766:	4650      	mov	r0, sl
 8006768:	4790      	blx	r2
 800676a:	2800      	cmp	r0, #0
 800676c:	f040 8085 	bne.w	800687a <_scanf_i+0x1c2>
 8006770:	f10b 0b01 	add.w	fp, fp, #1
 8006774:	f1bb 0f03 	cmp.w	fp, #3
 8006778:	d1cb      	bne.n	8006712 <_scanf_i+0x5a>
 800677a:	6863      	ldr	r3, [r4, #4]
 800677c:	b90b      	cbnz	r3, 8006782 <_scanf_i+0xca>
 800677e:	230a      	movs	r3, #10
 8006780:	6063      	str	r3, [r4, #4]
 8006782:	6863      	ldr	r3, [r4, #4]
 8006784:	4945      	ldr	r1, [pc, #276]	@ (800689c <_scanf_i+0x1e4>)
 8006786:	6960      	ldr	r0, [r4, #20]
 8006788:	1ac9      	subs	r1, r1, r3
 800678a:	f000 f889 	bl	80068a0 <__sccl>
 800678e:	f04f 0b00 	mov.w	fp, #0
 8006792:	68a3      	ldr	r3, [r4, #8]
 8006794:	6822      	ldr	r2, [r4, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d03d      	beq.n	8006816 <_scanf_i+0x15e>
 800679a:	6831      	ldr	r1, [r6, #0]
 800679c:	6960      	ldr	r0, [r4, #20]
 800679e:	f891 c000 	ldrb.w	ip, [r1]
 80067a2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d035      	beq.n	8006816 <_scanf_i+0x15e>
 80067aa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80067ae:	d124      	bne.n	80067fa <_scanf_i+0x142>
 80067b0:	0510      	lsls	r0, r2, #20
 80067b2:	d522      	bpl.n	80067fa <_scanf_i+0x142>
 80067b4:	f10b 0b01 	add.w	fp, fp, #1
 80067b8:	f1b9 0f00 	cmp.w	r9, #0
 80067bc:	d003      	beq.n	80067c6 <_scanf_i+0x10e>
 80067be:	3301      	adds	r3, #1
 80067c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80067c4:	60a3      	str	r3, [r4, #8]
 80067c6:	6873      	ldr	r3, [r6, #4]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	6073      	str	r3, [r6, #4]
 80067ce:	dd1b      	ble.n	8006808 <_scanf_i+0x150>
 80067d0:	6833      	ldr	r3, [r6, #0]
 80067d2:	3301      	adds	r3, #1
 80067d4:	6033      	str	r3, [r6, #0]
 80067d6:	68a3      	ldr	r3, [r4, #8]
 80067d8:	3b01      	subs	r3, #1
 80067da:	60a3      	str	r3, [r4, #8]
 80067dc:	e7d9      	b.n	8006792 <_scanf_i+0xda>
 80067de:	f1bb 0f02 	cmp.w	fp, #2
 80067e2:	d1ae      	bne.n	8006742 <_scanf_i+0x8a>
 80067e4:	6822      	ldr	r2, [r4, #0]
 80067e6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80067ea:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80067ee:	d1c4      	bne.n	800677a <_scanf_i+0xc2>
 80067f0:	2110      	movs	r1, #16
 80067f2:	6061      	str	r1, [r4, #4]
 80067f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067f8:	e7a2      	b.n	8006740 <_scanf_i+0x88>
 80067fa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80067fe:	6022      	str	r2, [r4, #0]
 8006800:	780b      	ldrb	r3, [r1, #0]
 8006802:	f805 3b01 	strb.w	r3, [r5], #1
 8006806:	e7de      	b.n	80067c6 <_scanf_i+0x10e>
 8006808:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800680c:	4631      	mov	r1, r6
 800680e:	4650      	mov	r0, sl
 8006810:	4798      	blx	r3
 8006812:	2800      	cmp	r0, #0
 8006814:	d0df      	beq.n	80067d6 <_scanf_i+0x11e>
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	05d9      	lsls	r1, r3, #23
 800681a:	d50d      	bpl.n	8006838 <_scanf_i+0x180>
 800681c:	42bd      	cmp	r5, r7
 800681e:	d909      	bls.n	8006834 <_scanf_i+0x17c>
 8006820:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006824:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006828:	4632      	mov	r2, r6
 800682a:	4650      	mov	r0, sl
 800682c:	4798      	blx	r3
 800682e:	f105 39ff 	add.w	r9, r5, #4294967295
 8006832:	464d      	mov	r5, r9
 8006834:	42bd      	cmp	r5, r7
 8006836:	d028      	beq.n	800688a <_scanf_i+0x1d2>
 8006838:	6822      	ldr	r2, [r4, #0]
 800683a:	f012 0210 	ands.w	r2, r2, #16
 800683e:	d113      	bne.n	8006868 <_scanf_i+0x1b0>
 8006840:	702a      	strb	r2, [r5, #0]
 8006842:	6863      	ldr	r3, [r4, #4]
 8006844:	9e01      	ldr	r6, [sp, #4]
 8006846:	4639      	mov	r1, r7
 8006848:	4650      	mov	r0, sl
 800684a:	47b0      	blx	r6
 800684c:	f8d8 3000 	ldr.w	r3, [r8]
 8006850:	6821      	ldr	r1, [r4, #0]
 8006852:	1d1a      	adds	r2, r3, #4
 8006854:	f8c8 2000 	str.w	r2, [r8]
 8006858:	f011 0f20 	tst.w	r1, #32
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	d00f      	beq.n	8006880 <_scanf_i+0x1c8>
 8006860:	6018      	str	r0, [r3, #0]
 8006862:	68e3      	ldr	r3, [r4, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	60e3      	str	r3, [r4, #12]
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	1bed      	subs	r5, r5, r7
 800686c:	445d      	add	r5, fp
 800686e:	442b      	add	r3, r5
 8006870:	6123      	str	r3, [r4, #16]
 8006872:	2000      	movs	r0, #0
 8006874:	b007      	add	sp, #28
 8006876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800687a:	f04f 0b00 	mov.w	fp, #0
 800687e:	e7ca      	b.n	8006816 <_scanf_i+0x15e>
 8006880:	07ca      	lsls	r2, r1, #31
 8006882:	bf4c      	ite	mi
 8006884:	8018      	strhmi	r0, [r3, #0]
 8006886:	6018      	strpl	r0, [r3, #0]
 8006888:	e7eb      	b.n	8006862 <_scanf_i+0x1aa>
 800688a:	2001      	movs	r0, #1
 800688c:	e7f2      	b.n	8006874 <_scanf_i+0x1bc>
 800688e:	bf00      	nop
 8006890:	08006c28 	.word	0x08006c28
 8006894:	08006b15 	.word	0x08006b15
 8006898:	08006bf5 	.word	0x08006bf5
 800689c:	08006c60 	.word	0x08006c60

080068a0 <__sccl>:
 80068a0:	b570      	push	{r4, r5, r6, lr}
 80068a2:	780b      	ldrb	r3, [r1, #0]
 80068a4:	4604      	mov	r4, r0
 80068a6:	2b5e      	cmp	r3, #94	@ 0x5e
 80068a8:	bf0b      	itete	eq
 80068aa:	784b      	ldrbeq	r3, [r1, #1]
 80068ac:	1c4a      	addne	r2, r1, #1
 80068ae:	1c8a      	addeq	r2, r1, #2
 80068b0:	2100      	movne	r1, #0
 80068b2:	bf08      	it	eq
 80068b4:	2101      	moveq	r1, #1
 80068b6:	3801      	subs	r0, #1
 80068b8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80068bc:	f800 1f01 	strb.w	r1, [r0, #1]!
 80068c0:	42a8      	cmp	r0, r5
 80068c2:	d1fb      	bne.n	80068bc <__sccl+0x1c>
 80068c4:	b90b      	cbnz	r3, 80068ca <__sccl+0x2a>
 80068c6:	1e50      	subs	r0, r2, #1
 80068c8:	bd70      	pop	{r4, r5, r6, pc}
 80068ca:	f081 0101 	eor.w	r1, r1, #1
 80068ce:	54e1      	strb	r1, [r4, r3]
 80068d0:	4610      	mov	r0, r2
 80068d2:	4602      	mov	r2, r0
 80068d4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80068d8:	2d2d      	cmp	r5, #45	@ 0x2d
 80068da:	d005      	beq.n	80068e8 <__sccl+0x48>
 80068dc:	2d5d      	cmp	r5, #93	@ 0x5d
 80068de:	d016      	beq.n	800690e <__sccl+0x6e>
 80068e0:	2d00      	cmp	r5, #0
 80068e2:	d0f1      	beq.n	80068c8 <__sccl+0x28>
 80068e4:	462b      	mov	r3, r5
 80068e6:	e7f2      	b.n	80068ce <__sccl+0x2e>
 80068e8:	7846      	ldrb	r6, [r0, #1]
 80068ea:	2e5d      	cmp	r6, #93	@ 0x5d
 80068ec:	d0fa      	beq.n	80068e4 <__sccl+0x44>
 80068ee:	42b3      	cmp	r3, r6
 80068f0:	dcf8      	bgt.n	80068e4 <__sccl+0x44>
 80068f2:	3002      	adds	r0, #2
 80068f4:	461a      	mov	r2, r3
 80068f6:	3201      	adds	r2, #1
 80068f8:	4296      	cmp	r6, r2
 80068fa:	54a1      	strb	r1, [r4, r2]
 80068fc:	dcfb      	bgt.n	80068f6 <__sccl+0x56>
 80068fe:	1af2      	subs	r2, r6, r3
 8006900:	3a01      	subs	r2, #1
 8006902:	1c5d      	adds	r5, r3, #1
 8006904:	42b3      	cmp	r3, r6
 8006906:	bfa8      	it	ge
 8006908:	2200      	movge	r2, #0
 800690a:	18ab      	adds	r3, r5, r2
 800690c:	e7e1      	b.n	80068d2 <__sccl+0x32>
 800690e:	4610      	mov	r0, r2
 8006910:	e7da      	b.n	80068c8 <__sccl+0x28>

08006912 <__submore>:
 8006912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006916:	460c      	mov	r4, r1
 8006918:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800691a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800691e:	4299      	cmp	r1, r3
 8006920:	d11d      	bne.n	800695e <__submore+0x4c>
 8006922:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006926:	f7ff fc11 	bl	800614c <_malloc_r>
 800692a:	b918      	cbnz	r0, 8006934 <__submore+0x22>
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006934:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006938:	63a3      	str	r3, [r4, #56]	@ 0x38
 800693a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800693e:	6360      	str	r0, [r4, #52]	@ 0x34
 8006940:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006944:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006948:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800694c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006950:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8006954:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006958:	6020      	str	r0, [r4, #0]
 800695a:	2000      	movs	r0, #0
 800695c:	e7e8      	b.n	8006930 <__submore+0x1e>
 800695e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006960:	0077      	lsls	r7, r6, #1
 8006962:	463a      	mov	r2, r7
 8006964:	f000 f82e 	bl	80069c4 <_realloc_r>
 8006968:	4605      	mov	r5, r0
 800696a:	2800      	cmp	r0, #0
 800696c:	d0de      	beq.n	800692c <__submore+0x1a>
 800696e:	eb00 0806 	add.w	r8, r0, r6
 8006972:	4601      	mov	r1, r0
 8006974:	4632      	mov	r2, r6
 8006976:	4640      	mov	r0, r8
 8006978:	f000 f816 	bl	80069a8 <memcpy>
 800697c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8006980:	f8c4 8000 	str.w	r8, [r4]
 8006984:	e7e9      	b.n	800695a <__submore+0x48>
	...

08006988 <_sbrk_r>:
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	4d06      	ldr	r5, [pc, #24]	@ (80069a4 <_sbrk_r+0x1c>)
 800698c:	2300      	movs	r3, #0
 800698e:	4604      	mov	r4, r0
 8006990:	4608      	mov	r0, r1
 8006992:	602b      	str	r3, [r5, #0]
 8006994:	f7fa faa2 	bl	8000edc <_sbrk>
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	d102      	bne.n	80069a2 <_sbrk_r+0x1a>
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	b103      	cbz	r3, 80069a2 <_sbrk_r+0x1a>
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	bd38      	pop	{r3, r4, r5, pc}
 80069a4:	200002e8 	.word	0x200002e8

080069a8 <memcpy>:
 80069a8:	440a      	add	r2, r1
 80069aa:	4291      	cmp	r1, r2
 80069ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80069b0:	d100      	bne.n	80069b4 <memcpy+0xc>
 80069b2:	4770      	bx	lr
 80069b4:	b510      	push	{r4, lr}
 80069b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069be:	4291      	cmp	r1, r2
 80069c0:	d1f9      	bne.n	80069b6 <memcpy+0xe>
 80069c2:	bd10      	pop	{r4, pc}

080069c4 <_realloc_r>:
 80069c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c8:	4607      	mov	r7, r0
 80069ca:	4614      	mov	r4, r2
 80069cc:	460d      	mov	r5, r1
 80069ce:	b921      	cbnz	r1, 80069da <_realloc_r+0x16>
 80069d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069d4:	4611      	mov	r1, r2
 80069d6:	f7ff bbb9 	b.w	800614c <_malloc_r>
 80069da:	b92a      	cbnz	r2, 80069e8 <_realloc_r+0x24>
 80069dc:	f7ff fb4a 	bl	8006074 <_free_r>
 80069e0:	4625      	mov	r5, r4
 80069e2:	4628      	mov	r0, r5
 80069e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e8:	f000 f906 	bl	8006bf8 <_malloc_usable_size_r>
 80069ec:	4284      	cmp	r4, r0
 80069ee:	4606      	mov	r6, r0
 80069f0:	d802      	bhi.n	80069f8 <_realloc_r+0x34>
 80069f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069f6:	d8f4      	bhi.n	80069e2 <_realloc_r+0x1e>
 80069f8:	4621      	mov	r1, r4
 80069fa:	4638      	mov	r0, r7
 80069fc:	f7ff fba6 	bl	800614c <_malloc_r>
 8006a00:	4680      	mov	r8, r0
 8006a02:	b908      	cbnz	r0, 8006a08 <_realloc_r+0x44>
 8006a04:	4645      	mov	r5, r8
 8006a06:	e7ec      	b.n	80069e2 <_realloc_r+0x1e>
 8006a08:	42b4      	cmp	r4, r6
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	bf28      	it	cs
 8006a10:	4632      	movcs	r2, r6
 8006a12:	f7ff ffc9 	bl	80069a8 <memcpy>
 8006a16:	4629      	mov	r1, r5
 8006a18:	4638      	mov	r0, r7
 8006a1a:	f7ff fb2b 	bl	8006074 <_free_r>
 8006a1e:	e7f1      	b.n	8006a04 <_realloc_r+0x40>

08006a20 <_strtol_l.isra.0>:
 8006a20:	2b24      	cmp	r3, #36	@ 0x24
 8006a22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a26:	4686      	mov	lr, r0
 8006a28:	4690      	mov	r8, r2
 8006a2a:	d801      	bhi.n	8006a30 <_strtol_l.isra.0+0x10>
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d106      	bne.n	8006a3e <_strtol_l.isra.0+0x1e>
 8006a30:	f7ff faf4 	bl	800601c <__errno>
 8006a34:	2316      	movs	r3, #22
 8006a36:	6003      	str	r3, [r0, #0]
 8006a38:	2000      	movs	r0, #0
 8006a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a3e:	4834      	ldr	r0, [pc, #208]	@ (8006b10 <_strtol_l.isra.0+0xf0>)
 8006a40:	460d      	mov	r5, r1
 8006a42:	462a      	mov	r2, r5
 8006a44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a48:	5d06      	ldrb	r6, [r0, r4]
 8006a4a:	f016 0608 	ands.w	r6, r6, #8
 8006a4e:	d1f8      	bne.n	8006a42 <_strtol_l.isra.0+0x22>
 8006a50:	2c2d      	cmp	r4, #45	@ 0x2d
 8006a52:	d110      	bne.n	8006a76 <_strtol_l.isra.0+0x56>
 8006a54:	782c      	ldrb	r4, [r5, #0]
 8006a56:	2601      	movs	r6, #1
 8006a58:	1c95      	adds	r5, r2, #2
 8006a5a:	f033 0210 	bics.w	r2, r3, #16
 8006a5e:	d115      	bne.n	8006a8c <_strtol_l.isra.0+0x6c>
 8006a60:	2c30      	cmp	r4, #48	@ 0x30
 8006a62:	d10d      	bne.n	8006a80 <_strtol_l.isra.0+0x60>
 8006a64:	782a      	ldrb	r2, [r5, #0]
 8006a66:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006a6a:	2a58      	cmp	r2, #88	@ 0x58
 8006a6c:	d108      	bne.n	8006a80 <_strtol_l.isra.0+0x60>
 8006a6e:	786c      	ldrb	r4, [r5, #1]
 8006a70:	3502      	adds	r5, #2
 8006a72:	2310      	movs	r3, #16
 8006a74:	e00a      	b.n	8006a8c <_strtol_l.isra.0+0x6c>
 8006a76:	2c2b      	cmp	r4, #43	@ 0x2b
 8006a78:	bf04      	itt	eq
 8006a7a:	782c      	ldrbeq	r4, [r5, #0]
 8006a7c:	1c95      	addeq	r5, r2, #2
 8006a7e:	e7ec      	b.n	8006a5a <_strtol_l.isra.0+0x3a>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1f6      	bne.n	8006a72 <_strtol_l.isra.0+0x52>
 8006a84:	2c30      	cmp	r4, #48	@ 0x30
 8006a86:	bf14      	ite	ne
 8006a88:	230a      	movne	r3, #10
 8006a8a:	2308      	moveq	r3, #8
 8006a8c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006a90:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006a94:	2200      	movs	r2, #0
 8006a96:	fbbc f9f3 	udiv	r9, ip, r3
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	fb03 ca19 	mls	sl, r3, r9, ip
 8006aa0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006aa4:	2f09      	cmp	r7, #9
 8006aa6:	d80f      	bhi.n	8006ac8 <_strtol_l.isra.0+0xa8>
 8006aa8:	463c      	mov	r4, r7
 8006aaa:	42a3      	cmp	r3, r4
 8006aac:	dd1b      	ble.n	8006ae6 <_strtol_l.isra.0+0xc6>
 8006aae:	1c57      	adds	r7, r2, #1
 8006ab0:	d007      	beq.n	8006ac2 <_strtol_l.isra.0+0xa2>
 8006ab2:	4581      	cmp	r9, r0
 8006ab4:	d314      	bcc.n	8006ae0 <_strtol_l.isra.0+0xc0>
 8006ab6:	d101      	bne.n	8006abc <_strtol_l.isra.0+0x9c>
 8006ab8:	45a2      	cmp	sl, r4
 8006aba:	db11      	blt.n	8006ae0 <_strtol_l.isra.0+0xc0>
 8006abc:	fb00 4003 	mla	r0, r0, r3, r4
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ac6:	e7eb      	b.n	8006aa0 <_strtol_l.isra.0+0x80>
 8006ac8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006acc:	2f19      	cmp	r7, #25
 8006ace:	d801      	bhi.n	8006ad4 <_strtol_l.isra.0+0xb4>
 8006ad0:	3c37      	subs	r4, #55	@ 0x37
 8006ad2:	e7ea      	b.n	8006aaa <_strtol_l.isra.0+0x8a>
 8006ad4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006ad8:	2f19      	cmp	r7, #25
 8006ada:	d804      	bhi.n	8006ae6 <_strtol_l.isra.0+0xc6>
 8006adc:	3c57      	subs	r4, #87	@ 0x57
 8006ade:	e7e4      	b.n	8006aaa <_strtol_l.isra.0+0x8a>
 8006ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae4:	e7ed      	b.n	8006ac2 <_strtol_l.isra.0+0xa2>
 8006ae6:	1c53      	adds	r3, r2, #1
 8006ae8:	d108      	bne.n	8006afc <_strtol_l.isra.0+0xdc>
 8006aea:	2322      	movs	r3, #34	@ 0x22
 8006aec:	f8ce 3000 	str.w	r3, [lr]
 8006af0:	4660      	mov	r0, ip
 8006af2:	f1b8 0f00 	cmp.w	r8, #0
 8006af6:	d0a0      	beq.n	8006a3a <_strtol_l.isra.0+0x1a>
 8006af8:	1e69      	subs	r1, r5, #1
 8006afa:	e006      	b.n	8006b0a <_strtol_l.isra.0+0xea>
 8006afc:	b106      	cbz	r6, 8006b00 <_strtol_l.isra.0+0xe0>
 8006afe:	4240      	negs	r0, r0
 8006b00:	f1b8 0f00 	cmp.w	r8, #0
 8006b04:	d099      	beq.n	8006a3a <_strtol_l.isra.0+0x1a>
 8006b06:	2a00      	cmp	r2, #0
 8006b08:	d1f6      	bne.n	8006af8 <_strtol_l.isra.0+0xd8>
 8006b0a:	f8c8 1000 	str.w	r1, [r8]
 8006b0e:	e794      	b.n	8006a3a <_strtol_l.isra.0+0x1a>
 8006b10:	08006c6c 	.word	0x08006c6c

08006b14 <_strtol_r>:
 8006b14:	f7ff bf84 	b.w	8006a20 <_strtol_l.isra.0>

08006b18 <_strtoul_l.isra.0>:
 8006b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b1c:	4e34      	ldr	r6, [pc, #208]	@ (8006bf0 <_strtoul_l.isra.0+0xd8>)
 8006b1e:	4686      	mov	lr, r0
 8006b20:	460d      	mov	r5, r1
 8006b22:	4628      	mov	r0, r5
 8006b24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b28:	5d37      	ldrb	r7, [r6, r4]
 8006b2a:	f017 0708 	ands.w	r7, r7, #8
 8006b2e:	d1f8      	bne.n	8006b22 <_strtoul_l.isra.0+0xa>
 8006b30:	2c2d      	cmp	r4, #45	@ 0x2d
 8006b32:	d110      	bne.n	8006b56 <_strtoul_l.isra.0+0x3e>
 8006b34:	782c      	ldrb	r4, [r5, #0]
 8006b36:	2701      	movs	r7, #1
 8006b38:	1c85      	adds	r5, r0, #2
 8006b3a:	f033 0010 	bics.w	r0, r3, #16
 8006b3e:	d115      	bne.n	8006b6c <_strtoul_l.isra.0+0x54>
 8006b40:	2c30      	cmp	r4, #48	@ 0x30
 8006b42:	d10d      	bne.n	8006b60 <_strtoul_l.isra.0+0x48>
 8006b44:	7828      	ldrb	r0, [r5, #0]
 8006b46:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006b4a:	2858      	cmp	r0, #88	@ 0x58
 8006b4c:	d108      	bne.n	8006b60 <_strtoul_l.isra.0+0x48>
 8006b4e:	786c      	ldrb	r4, [r5, #1]
 8006b50:	3502      	adds	r5, #2
 8006b52:	2310      	movs	r3, #16
 8006b54:	e00a      	b.n	8006b6c <_strtoul_l.isra.0+0x54>
 8006b56:	2c2b      	cmp	r4, #43	@ 0x2b
 8006b58:	bf04      	itt	eq
 8006b5a:	782c      	ldrbeq	r4, [r5, #0]
 8006b5c:	1c85      	addeq	r5, r0, #2
 8006b5e:	e7ec      	b.n	8006b3a <_strtoul_l.isra.0+0x22>
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1f6      	bne.n	8006b52 <_strtoul_l.isra.0+0x3a>
 8006b64:	2c30      	cmp	r4, #48	@ 0x30
 8006b66:	bf14      	ite	ne
 8006b68:	230a      	movne	r3, #10
 8006b6a:	2308      	moveq	r3, #8
 8006b6c:	f04f 38ff 	mov.w	r8, #4294967295
 8006b70:	2600      	movs	r6, #0
 8006b72:	fbb8 f8f3 	udiv	r8, r8, r3
 8006b76:	fb03 f908 	mul.w	r9, r3, r8
 8006b7a:	ea6f 0909 	mvn.w	r9, r9
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006b84:	f1bc 0f09 	cmp.w	ip, #9
 8006b88:	d810      	bhi.n	8006bac <_strtoul_l.isra.0+0x94>
 8006b8a:	4664      	mov	r4, ip
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	dd1e      	ble.n	8006bce <_strtoul_l.isra.0+0xb6>
 8006b90:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006b94:	d007      	beq.n	8006ba6 <_strtoul_l.isra.0+0x8e>
 8006b96:	4580      	cmp	r8, r0
 8006b98:	d316      	bcc.n	8006bc8 <_strtoul_l.isra.0+0xb0>
 8006b9a:	d101      	bne.n	8006ba0 <_strtoul_l.isra.0+0x88>
 8006b9c:	45a1      	cmp	r9, r4
 8006b9e:	db13      	blt.n	8006bc8 <_strtoul_l.isra.0+0xb0>
 8006ba0:	fb00 4003 	mla	r0, r0, r3, r4
 8006ba4:	2601      	movs	r6, #1
 8006ba6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006baa:	e7e9      	b.n	8006b80 <_strtoul_l.isra.0+0x68>
 8006bac:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006bb0:	f1bc 0f19 	cmp.w	ip, #25
 8006bb4:	d801      	bhi.n	8006bba <_strtoul_l.isra.0+0xa2>
 8006bb6:	3c37      	subs	r4, #55	@ 0x37
 8006bb8:	e7e8      	b.n	8006b8c <_strtoul_l.isra.0+0x74>
 8006bba:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8006bbe:	f1bc 0f19 	cmp.w	ip, #25
 8006bc2:	d804      	bhi.n	8006bce <_strtoul_l.isra.0+0xb6>
 8006bc4:	3c57      	subs	r4, #87	@ 0x57
 8006bc6:	e7e1      	b.n	8006b8c <_strtoul_l.isra.0+0x74>
 8006bc8:	f04f 36ff 	mov.w	r6, #4294967295
 8006bcc:	e7eb      	b.n	8006ba6 <_strtoul_l.isra.0+0x8e>
 8006bce:	1c73      	adds	r3, r6, #1
 8006bd0:	d106      	bne.n	8006be0 <_strtoul_l.isra.0+0xc8>
 8006bd2:	2322      	movs	r3, #34	@ 0x22
 8006bd4:	f8ce 3000 	str.w	r3, [lr]
 8006bd8:	4630      	mov	r0, r6
 8006bda:	b932      	cbnz	r2, 8006bea <_strtoul_l.isra.0+0xd2>
 8006bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006be0:	b107      	cbz	r7, 8006be4 <_strtoul_l.isra.0+0xcc>
 8006be2:	4240      	negs	r0, r0
 8006be4:	2a00      	cmp	r2, #0
 8006be6:	d0f9      	beq.n	8006bdc <_strtoul_l.isra.0+0xc4>
 8006be8:	b106      	cbz	r6, 8006bec <_strtoul_l.isra.0+0xd4>
 8006bea:	1e69      	subs	r1, r5, #1
 8006bec:	6011      	str	r1, [r2, #0]
 8006bee:	e7f5      	b.n	8006bdc <_strtoul_l.isra.0+0xc4>
 8006bf0:	08006c6c 	.word	0x08006c6c

08006bf4 <_strtoul_r>:
 8006bf4:	f7ff bf90 	b.w	8006b18 <_strtoul_l.isra.0>

08006bf8 <_malloc_usable_size_r>:
 8006bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bfc:	1f18      	subs	r0, r3, #4
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	bfbc      	itt	lt
 8006c02:	580b      	ldrlt	r3, [r1, r0]
 8006c04:	18c0      	addlt	r0, r0, r3
 8006c06:	4770      	bx	lr

08006c08 <_init>:
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	bf00      	nop
 8006c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0e:	bc08      	pop	{r3}
 8006c10:	469e      	mov	lr, r3
 8006c12:	4770      	bx	lr

08006c14 <_fini>:
 8006c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c16:	bf00      	nop
 8006c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1a:	bc08      	pop	{r3}
 8006c1c:	469e      	mov	lr, r3
 8006c1e:	4770      	bx	lr
